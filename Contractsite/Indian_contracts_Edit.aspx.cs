using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Data.SqlClient;
using System.Collections;
using System.Data.Sql;
using System.Net;
using System.IO;
using System.Web.UI.WebControls.Adapters;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Net.Mail;
using System.Globalization;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.Net.Mime;
using System.Threading;
using System.ComponentModel;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using System.Windows.Forms;
using System.Collections.Generic;
 







public partial class _Default : System.Web.UI.Page
{
       static string office;




    public string LoadFinanceNo(string venue, string type, string financetype)
    {
        string fnumb = null;
        if (financetype == "Pashuram Finance")
        {
            if (type == "Fractional" || type == "Trade-In-Fractionals")
            {
                fnumb = Queries.GetFinanceNum(venue, financetype) + "Z3F";

            }
            else
            {
                fnumb = Queries.GetFinanceNum(venue, financetype) + "Z3";
            }
        }
        else if (financetype == "Crown Finance")
        {
            if (type == "Fractional" || type == "Trade-In-Fractionals")
            {
                fnumb = Queries.GetFinanceNum(venue, financetype);

            }
            else
            {
                fnumb = Queries.GetFinanceNum(venue, financetype);
            }
        }
        return fnumb;
    }


    public void financebreakup(string noemi, string financeamt, string emiamt, string contractid, string ctype, string contno, string installmentcnt,string oldloanamt)
    {
        if (financeradiobuttonlist.SelectedItem.Text == "Finance")
        {
            int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
            int emimonths = Convert.ToInt32(noemi);// (noemiTextBox.Text);
         //   double principalamt = Convert.ToDouble(financeamt)+Convert.ToDouble(oldloanamt);// balamtpayableTextBox.Text);
            double emiamt1 = Convert.ToDouble(emiamt);// emiamtTextBox.Text);
            int months = 12;
            int ik;
            string month, fmonth;
            //   string dt = DateTime.ParseExact(dealdateTextBox.Text).ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
            DateTime dt = DateTime.ParseExact(dealdateTextBox.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
           // string date = dt.ToString("yyyy-MM-dd");
         //   DateTime ddy = Convert.ToDateTime(dt);
            int ddyr = dt.Year;
            DataSet ds2 = Queries.LoadFinanceContractDetails(contno);
            Session["ofinmonth"] = ds2.Tables[0].Rows[0]["financeMonth"].ToString();
            if (ctype == "Trade-In-Fractionals")
            {
	        	double principalamt = Convert.ToDouble(financeamt)+Convert.ToDouble(oldloanamt);
                //  int interest = 11;
                if (currencyDropDownList.SelectedItem.Text == "INR" || currencyDropDownList.SelectedItem.Text == "Rs")
                {
                    DataSet dsfin = Queries.LoadFinanceMethodRatesFractional(financemethodDropDownList.SelectedItem.Text, ddyr);

                    int interest = Convert.ToInt32(dsfin.Tables[0].Rows[0]["Interest_rate"]); //12;
                    for (ik = 1; ik <= emimonths; ik++)
                    {

                        //if contractdetails id doesnt exists then
                        int exists = Queries.CheckIDExistsInFinance_Breakup(contno);
                        if (exists == 1)
                        {
                            //get min principalamt
                            int ink = ik - 1;
                            double pa = Queries.GetMinPrinicipalAmt(contno);
                            double mi = Queries.GetMinMonthlyPrincipal(contno, ink, pa);
                            double newba = pa - mi;
                            double Yearly_interest = Math.Round((newba * interest) / 100);
                            double Monthly_Instalment = emiamt1;
                            double Installments = ik;
                            double Monthly_Interest = Math.Round(Yearly_interest / months);
                            double Monthly_Principal = Math.Round(Monthly_Instalment - Monthly_Interest);
                            fmonth = Queries.FinanceInstallmentMonthF(contno);
                            month = Queries.FinanceInstallmentMonthStartdate(contno);
                            int insert = Queries.InsertFinance_Breakup(contno, contractid, newba, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                        }
                        else
                        {
                            double Yearly_interest = Math.Round((principalamt * interest) / 100);
                            double Monthly_Instalment = emiamt1;
                            double Installments = ik;
                            double Monthly_Interest = Math.Round(Yearly_interest / months);
                            double Monthly_Principal = Math.Round(Monthly_Instalment - Monthly_Interest);

                            //get max month from installment table
                            if (installmentcnt == "0" || installmentcnt == "" || installmentcnt == "NaN")
                            {
                                fmonth = Queries.FinanceInstallmentMonthStartdateNewFZeroInstallment(contno);
                                month = Queries.FinanceInstallmentMonthStartdateNewZeroInstallment(contno);
                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);

                            }
                            else if (String.Compare(Session["ofinmonth"].ToString(), finmonthTextBox.Text) != 0)
                            {

                                string d = finmonthTextBox.Text;
                                string dd = "15" + " " + d;
                                int mon, yr;
                                DateTime val = Convert.ToDateTime(dd);
                                DateTime fdat = Convert.ToDateTime(val);
                                int dtd = 15;// fdat.Day;
                                int dtmonth = fdat.Month;
                                int year = fdat.Year;
                                mon = dtmonth;
                                string month1 = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(mon);
                                fmonth = dtd + "/" + mon + "/" + year;
                                month = month1 + "-" + year;


                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                            }
                            else
                            {
                                fmonth = Queries.FinanceInstallmentMonthStartdateNewF(contno);
                                month = Queries.FinanceInstallmentMonthStartdateNew(contno);
                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                            }
                        }

                    }
                }//IF CURRENCY 
                else
                {
                    //crown finance
                }
            }
            else if (ctype == "Fractional")
            {
                double principalamt = Convert.ToDouble(financeamt);
                //  int interest = 11;
                if (currencyDropDownList.SelectedItem.Text == "INR" || currencyDropDownList.SelectedItem.Text == "Rs")
                {
                    DataSet dsfin = Queries.LoadFinanceMethodRatesFractional(financemethodDropDownList.SelectedItem.Text, ddyr);

                    int interest = Convert.ToInt32(dsfin.Tables[0].Rows[0]["Interest_rate"]); //12;
                    for (ik = 1; ik <= emimonths; ik++)
                    {

                        //if contractdetails id doesnt exists then
                        int exists = Queries.CheckIDExistsInFinance_Breakup(contno);
                        if (exists == 1)
                        {
                            //get min principalamt
                            int ink = ik - 1;
                            double pa = Queries.GetMinPrinicipalAmt(contno);
                            double mi = Queries.GetMinMonthlyPrincipal(contno, ink, pa);
                            double newba = pa - mi;
                            double Yearly_interest = Math.Round((newba * interest) / 100);
                            double Monthly_Instalment = emiamt1;
                            double Installments = ik;
                            double Monthly_Interest = Math.Round(Yearly_interest / months);
                            double Monthly_Principal = Math.Round(Monthly_Instalment - Monthly_Interest);
                            fmonth = Queries.FinanceInstallmentMonthF(contno);
                            month = Queries.FinanceInstallmentMonthStartdate(contno);
                            int insert = Queries.InsertFinance_Breakup(contno, contractid, newba, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                        }
                        else
                        {
                            double Yearly_interest = Math.Round((principalamt * interest) / 100);
                            double Monthly_Instalment = emiamt1;
                            double Installments = ik;
                            double Monthly_Interest = Math.Round(Yearly_interest / months);
                            double Monthly_Principal = Math.Round(Monthly_Instalment - Monthly_Interest);

                            //get max month from installment table
                            if (installmentcnt == "0" || installmentcnt == "" || installmentcnt == "NaN")
                            {
                                fmonth = Queries.FinanceInstallmentMonthStartdateNewFZeroInstallment(contno);
                                month = Queries.FinanceInstallmentMonthStartdateNewZeroInstallment(contno);
                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);

                            }
                            else if (String.Compare(Session["ofinmonth"].ToString(), finmonthTextBox.Text) != 0)
                            {

                                string d = finmonthTextBox.Text;
                                string dd = "15" + " " + d;
                                int mon, yr;
                                DateTime val = Convert.ToDateTime(dd);
                                DateTime fdat = Convert.ToDateTime(val);
                                int dtd = 15;// fdat.Day;
                                int dtmonth = fdat.Month;
                                int year = fdat.Year;
                                mon = dtmonth;
                                string month1 = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(mon);
                                fmonth = dtd + "/" + mon + "/" + year;
                                month = month1 + "-" + year;


                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                            }
                            else
                            {
                                fmonth = Queries.FinanceInstallmentMonthStartdateNewF(contno);
                                month = Queries.FinanceInstallmentMonthStartdateNew(contno);
                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                            }
                        }

                    }
                }//IF CURRENCY 
                else
                {
                    //crown finance
                }
            }

            else
            {
		double principalamt = Convert.ToDouble(financeamt);
                // int interest = 19;
                if (currencyDropDownList.SelectedItem.Text == "INR" || currencyDropDownList.SelectedItem.Text == "Rs")
                {
                    // int interest = 19;
                    DataSet dsfin = Queries.LoadFinanceMethodRates(financemethodDropDownList.SelectedItem.Text, ddyr);
                    //get the finance month

                    int interest = Convert.ToInt32(dsfin.Tables[0].Rows[0]["Interest_rate"]);
                    for (ik = 1; ik <= emimonths; ik++)
                    {

                        //if contractdetails id doesnt exists then
                        int exists = Queries.CheckIDExistsInFinance_Breakup(contno);
                        if (exists == 1)
                        {
                            //get min principalamt
                            int ink = ik - 1;
                            double pa = Queries.GetMinPrinicipalAmt(contno);
                            double mi = Queries.GetMinMonthlyPrincipal(contno, ink, pa);
                            double newba = pa - mi;
                            double Yearly_interest = Math.Round((newba * interest) / 100);
                            double Monthly_Instalment = emiamt1;
                            double Installments = ik;
                            double Monthly_Interest = Math.Round(Yearly_interest / months);
                            double Monthly_Principal = Math.Round(Monthly_Instalment - Monthly_Interest);
                            fmonth = Queries.FinanceInstallmentMonthF(contno);
                            month = Queries.FinanceInstallmentMonthStartdate(contno);
                            int insert = Queries.InsertFinance_Breakup(contno, contractid, newba, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                        }
                        else
                        {
                            double Yearly_interest = Math.Round((principalamt * interest) / 100);
                            double Monthly_Instalment = emiamt1;
                            double Installments = ik;
                            double Monthly_Interest = Math.Round(Yearly_interest / months);
                            double Monthly_Principal = Math.Round(Monthly_Instalment - Monthly_Interest);

                            if (installmentcnt == "0" || installmentcnt == "" || installmentcnt == "NaN")
                            {
                                //get date from deal reagistered date
                                fmonth = Queries.FinanceInstallmentMonthStartdateNewFZeroInstallment(contno);
                                month = Queries.FinanceInstallmentMonthStartdateNewZeroInstallment(contno);
                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);

                            }
                            else if (String.Compare(Session["ofinmonth"].ToString(), finmonthTextBox.Text) != 0)
                            {

                                string d = finmonthTextBox.Text;
                                string dd = "15" + " " + d;
                                int mon, yr;
                                DateTime val = Convert.ToDateTime(dd);
                                DateTime fdat = Convert.ToDateTime(val);
                                int dtd = 15;// fdat.Day;
                                int dtmonth = fdat.Month;
                                int year = fdat.Year;
                                mon = dtmonth;
                                string month1 = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(mon);
                                fmonth = dtd + "/" + mon + "/" + year;
                                month = month1 + "-" + year;


                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                            }

                            else
                            {
                                //get max month from installment table
                                fmonth = Queries.FinanceInstallmentMonthStartdateNewF(contno);
                                month = Queries.FinanceInstallmentMonthStartdateNew(contno);
                                int insert = Queries.InsertFinance_Breakup(contno, contractid, principalamt, Yearly_interest, Monthly_Principal, Monthly_Interest, Monthly_Instalment, Installments.ToString(), month, fmonth);
                            }
                        }

                    }
                }//CURRENCY
                else
                { }
            }
        }
        else if(financeradiobuttonlist.SelectedItem.Text=="Non Finance")
        {
            // int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
            //check if contno exists
            int exists = Queries.ContractDetails_IDFinance_Breakup(contno);
            //if YES
            if (exists == 1)
            {
                //delete previous entries
                int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
            }
            //if NO
            else
            { }
        }
    }
    public void CheckBreakup(string financetype, string ofinancebal, string noemi, string onoemi, string financeamt, string emiamt, string contractid, string ctype, string contno, string instno, string oldInstNo,string oldloanamt)
    {
        if (financetype == "Finance")
        {
            //check if contno exists
            int exists = Queries.ContractDetails_IDFinance_Breakup(contno);
            //if YES
            if (exists == 1)
            {
                int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                //insert new entries
                financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno, oldloanamt);

                /*  if (String.Compare(oldInstNo, instno) != 0)
                  {

                      if ((String.Compare(ofinancebal, financeamt) != 0) && (String.Compare(onoemi, noemi) != 0))
                      {

                          //delete previous entries
                          int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                          //insert new entries
                          financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno);

                      }
                      else
                      {
                          int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                          //insert new entries
                          financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno);
                      }
                  }

                  else if (String.Compare(oldInstNo, instno) != 0)
                  {
                      if ((String.Compare(ofinancebal, financeamt) == 0) && (String.Compare(onoemi, noemi) != 0))
                      {
                          //delete previous entries
                          int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                          //insert new entries
                          financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno);

                      }
                      else
                      {
                          int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                          //insert new entries
                          financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno);
                      }
                  }
                  else if (String.Compare(oldInstNo, instno) != 0)
                  {
                      if ((String.Compare(ofinancebal, financeamt) != 0) && (String.Compare(onoemi, noemi) == 0))
                      {
                          //delete previous entries
                          int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                          //insert new entries
                          financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno);

                      }
                      else
                      {
                          int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
                          //insert new entries
                          financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno);
                      }

                  }


                  else
                  {

                  }*/
            }
            //if NO
            else
            {

                financebreakup(noemi, financeamt, emiamt, contractid, ctype, contno, instno, oldloanamt);
            }
        }
        else if (financetype == "Non Finance")
        {
            //check if contno exists
            int exists = Queries.ContractDetails_IDFinance_Breakup(contno);
            //if YES
            if (exists == 1)
            {
                //delete previous entries
                int del = Queries.DeleteContractDetailsIDFinance_Breakup(contno);
            }
            //if NO
            else
            { }

        }

    }
    public void LoadDocuments(string ContractDetails_ID, string office, string Finance_Details, string ContractType, string aftype, string mc, string canxcontno, string companyname, string statename)
    {
        if (mc == "Yes")
        {
            int othersid1 = Queries.ContractNo_OthernamesExistsNone(ContractDetails_ID);
            if (othersid1 == 0)
            {

                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany1GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany2GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany3GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany1GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany2GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany3GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }
                            }
                        }

                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }
                            }
                        }



                    }
                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }

                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }

                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                    string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }
            //check if id exists in othernames
            int othersid = Queries.ContractNo_OthernamesExistsA(ContractDetails_ID);
            if (othersid == 1)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }
                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {

                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }


            int othersid3 = Queries.ContractNo_OthernamesExistsS(ContractDetails_ID);
            if (othersid3 == 1)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }

                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }

                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }
            int othersid2 = Queries.ContractNo_OthernamesExistsB(ContractDetails_ID);
            if (othersid2 == 1)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany13GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany14GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany15GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany16GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany13GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany14GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany15GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany16GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany13(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany14(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany15(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany16(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany13(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany14(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany15(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany16(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }

                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9MCGOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9MC(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }
        }
        else if (mc == "No" || mc == "")
        {
            int othersid1 = Queries.ContractNo_OthernamesExistsNone(ContractDetails_ID);
            if (othersid1 == 0)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany1GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany2GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany3GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany1GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany2GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany3GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }

                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }

                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        PrintPdfDropDownList.Items.Clear();
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points4(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }
            //check if id exists in othernames
            int othersid = Queries.ContractNo_OthernamesExistsA(ContractDetails_ID);
            if (othersid == 1)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null) || oldLAno != "N/A")
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany5GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany6GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany5(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany6(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }

                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "GOA" || statename == "Goa")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }

                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();

                        if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                        {
                            PrintPdfDropDownList.Items.Clear();
                            DataSet ds21 = Queries.LoadPrintPDFFiles_Points1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                            PrintPdfDropDownList.DataSource = ds21;
                            PrintPdfDropDownList.DataTextField = "printname";
                            PrintPdfDropDownList.DataValueField = "printname";
                            PrintPdfDropDownList.AppendDataBoundItems = true;
                            PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                            PrintPdfDropDownList.DataBind();
                        }
                        else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                        {
                            PrintPdfDropDownList.Items.Clear();
                            DataSet ds21 = Queries.LoadPrintPDFFiles_Points2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                            PrintPdfDropDownList.DataSource = ds21;
                            PrintPdfDropDownList.DataTextField = "printname";
                            PrintPdfDropDownList.DataValueField = "printname";
                            PrintPdfDropDownList.AppendDataBoundItems = true;
                            PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                            PrintPdfDropDownList.DataBind();

                        }
                        else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                        {
                            PrintPdfDropDownList.Items.Clear();
                            DataSet ds21 = Queries.LoadPrintPDFFiles_Points3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                            PrintPdfDropDownList.DataSource = ds21;
                            PrintPdfDropDownList.DataTextField = "printname";
                            PrintPdfDropDownList.DataValueField = "printname";
                            PrintPdfDropDownList.AppendDataBoundItems = true;
                            PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                            PrintPdfDropDownList.DataBind();
                        }
                        else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                        {

                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();

                        if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                        {
                            PrintPdfDropDownList.Items.Clear();
                            DataSet ds21 = Queries.LoadPrintPDFFiles_Points1(ContractType, office, club, curr, Finance_Details, aftype, mc);
                            PrintPdfDropDownList.DataSource = ds21;
                            PrintPdfDropDownList.DataTextField = "printname";
                            PrintPdfDropDownList.DataValueField = "printname";
                            PrintPdfDropDownList.AppendDataBoundItems = true;
                            PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                            PrintPdfDropDownList.DataBind();
                        }
                        else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                        {
                            PrintPdfDropDownList.Items.Clear();
                            DataSet ds21 = Queries.LoadPrintPDFFiles_Points2(ContractType, office, club, curr, Finance_Details, aftype, mc);
                            PrintPdfDropDownList.DataSource = ds21;
                            PrintPdfDropDownList.DataTextField = "printname";
                            PrintPdfDropDownList.DataValueField = "printname";
                            PrintPdfDropDownList.AppendDataBoundItems = true;
                            PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                            PrintPdfDropDownList.DataBind();

                        }
                        else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                        {
                            PrintPdfDropDownList.Items.Clear();
                            DataSet ds21 = Queries.LoadPrintPDFFiles_Points3(ContractType, office, club, curr, Finance_Details, aftype, mc);
                            PrintPdfDropDownList.DataSource = ds21;
                            PrintPdfDropDownList.DataTextField = "printname";
                            PrintPdfDropDownList.DataValueField = "printname";
                            PrintPdfDropDownList.AppendDataBoundItems = true;
                            PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                            PrintPdfDropDownList.DataBind();
                        }
                        else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                        {

                        }
                    }
                }
            }


            int othersid3 = Queries.ContractNo_OthernamesExistsS(ContractDetails_ID);
            if (othersid3 == 1)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }

                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points10(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points11(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points12(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }
            int othersid2 = Queries.ContractNo_OthernamesExistsB(ContractDetails_ID);
            if (othersid2 == 1)
            {
                if (ContractType == "Trade-In-Fractionals" || ContractType == "Fractional")
                {
                    PrintPdfDropDownList.Items.Clear();
                    DataSet dsp = Queries.loadtradeinfractional(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["resort"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        string tradevalue = dsp.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        string oldLAno = dsp.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany13GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany14GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany15GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany16GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany13GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany14GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany15GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany16GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                        }
                        else
                        {
                            if (companyname == "" || companyname == null)
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany13(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany14(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany15(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalNOCompany16(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }
                            else
                            {
                                if ((tradevalue == "" || tradevalue == null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany13(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue == "" || tradevalue == null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();

                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany14(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno == "" || oldLAno == null || oldLAno == "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany15(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();

                                }
                                else if ((tradevalue != "" || tradevalue != null) && (oldLAno != "" || oldLAno != null || oldLAno != "N/A"))
                                {
                                    PrintPdfDropDownList.Items.Clear();
                                    DataSet ds21 = Queries.LoadPrintPDFFiles_FractionalCompany16(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                    PrintPdfDropDownList.DataSource = ds21;
                                    PrintPdfDropDownList.DataTextField = "printname";
                                    PrintPdfDropDownList.DataValueField = "printname";
                                    PrintPdfDropDownList.AppendDataBoundItems = true;
                                    PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                    PrintPdfDropDownList.DataBind();
                                }

                            }

                        }
                    }

                }
                else if (ContractType == "Points")
                {
                    DataSet dsp = Queries.LoadNewPointsDetails(ContractDetails_ID);
                    PrintPdfDropDownList.Items.Clear();
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {


                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Points")
                {
                    DataSet dsp = Queries.LoadTradeinPointsDetails(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["New_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
                else if (ContractType == "Trade-In-Weeks")
                {
                    DataSet dsp = Queries.LoadTradeinWeeksDetails(ContractDetails_ID);
                    if (dsp.Tables[0].Rows.Count == 0) { }
                    else
                    {
                        string club = dsp.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                        string curr = dsp.Tables[0].Rows[0]["Currency"].ToString();
                        if (statename == "Goa" || statename == "GOA")
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9GOA(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                        else
                        {
                            if ((canxcontno == "" || canxcontno == null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points7(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname == "" || companyname == null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points8(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();

                            }
                            else if ((canxcontno == "" || canxcontno == null) && (companyname != "" || companyname != null))
                            {
                                PrintPdfDropDownList.Items.Clear();
                                DataSet ds21 = Queries.LoadPrintPDFFiles_Points9(ContractType, office, club, curr, Finance_Details, aftype, mc);
                                PrintPdfDropDownList.DataSource = ds21;
                                PrintPdfDropDownList.DataTextField = "printname";
                                PrintPdfDropDownList.DataValueField = "printname";
                                PrintPdfDropDownList.AppendDataBoundItems = true;
                                PrintPdfDropDownList.Items.Insert(0, new ListItem("", ""));
                                PrintPdfDropDownList.DataBind();
                            }
                            else if ((canxcontno != "" || canxcontno != null) && (companyname != "" || companyname != null))
                            {

                            }
                        }
                    }
                }
            }
        }

    }//load documents end
    public void SOR_AdditionalName(string contractdetails_ID)
    {
        // string ContractdetailsID = ContractdetailsIDTextBox.Text;
        string contractno = contractnoTextBox.Text;
        //  office = Queries.GetOfficeFromCountry(profileidTextBox.Text);
        office = Queries.GetOfficeFromCountry(Session["ProfileID"].ToString());
        int ik;
        string iname, iadd;//, istate="", icountry="", ipincode="";
        string name, add, state = "", country = "", pincode = "";
        string user = (string)Session["username"];
        string sornote = "SOR Details Added";
        string addonnote = "Additional Name Details Added";
        if (asornoTextBox.Text == "")
        {
        }
        else
        {
            int num = Convert.ToInt32(asornoTextBox.Text);
            if (SORDropDownList.SelectedItem.Text == "")
            {

            }
            else if (SORDropDownList.SelectedItem.Text == "SOR Name")
            {
                for (ik = 1; ik <= Convert.ToInt32(num); ik++)
                {
                    string id = Queries.GetContractNo_OthernamesID(office);
                    iname = "textBox1_" + ik + "1";
                    name = Request.Form[iname];
                    iadd = "textBox1_" + ik + "2";
                    add = Request.Form[iadd];
                    //istate = "textBox1_" + ik + "3";
                    //state = Request.Form[istate];
                    //icountry = "textBox1_" + ik + "4";
                    //country = Request.Form[icountry];
                    //ipincode = "textBox1_" + ik + "5";
                    //pincode = Request.Form[ipincode];

                    int insertrow = Queries.InsertContractNo_Othernames(id, contractnoTextBox.Text, contractdetails_ID, SORDropDownList.SelectedItem.Text, name.ToUpper(), add.ToUpper(), state.ToUpper(), country.ToUpper(), pincode, "Active", "", DateTime.Now.ToString());
                    string log5in = "SOR Details:" + "ContractdetailsID: " + contractdetails_ID + "," + "Contractno: " + contractnoTextBox.Text + "," + "Type:" + SORDropDownList.SelectedItem.Text + "," + "Name:" + name.ToUpper() + "," + "address:" + add.ToUpper();// + "," + "state:" + state.ToUpper() + "," + "country:" + country.ToUpper() + "," + "postcode:" + pincode;
                    int insertlogin = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), contractdetails_ID, log5in, user, DateTime.Now.ToString(), "Indian_contracts.aspx", sornote, "", log5in);
                    int updatesor = Queries.UpdateContractNo_OthernamesID(office);
                }

                asornoTextBox.Text = "";
                int existssor = Queries.ContractIDINSOR_Additional(contractdetails_ID);
                if (existssor == 1)
                {
                    //GridView2.Visible = true;
                    //DataSet dsor = Queries.LoadContractNo_Othernames(contractdetails_ID);
                    //GridView2.DataSource = dsor;
                    //GridView2.DataBind();

                }
                else
                {
                    //GridView2.Visible = false;
                }

            }
            else if (SORDropDownList.SelectedItem.Text == "Additional Name")
            {
                for (ik = 1; ik <= Convert.ToInt32(num); ik++)
                {
                    string id = Queries.GetContractNo_OthernamesID(office);
                    iname = "textBox1_" + ik + "1";
                    name = Request.Form[iname];
                    iadd = "textBox1_" + ik + "2";
                    add = Request.Form[iadd];
                    //istate = "textBox1_" + ik + "3";
                    //state = Request.Form[istate];
                    //icountry = "textBox1_" + ik + "4";
                    //country = Request.Form[icountry];
                    //ipincode = "textBox1_" + ik + "5";
                    //pincode = Request.Form[ipincode];

                    int insertrow = Queries.InsertContractNo_Othernames(id, contractnoTextBox.Text, contractdetails_ID, SORDropDownList.SelectedItem.Text, name.ToUpper(), add.ToUpper(), state.ToUpper(), country.ToUpper(), pincode, "Active", "", DateTime.Now.ToString());
                    string log5in = "Additional Name Details:" + "ContractdetailsID: " + contractdetails_ID + "," + "Contractno: " + contractnoTextBox.Text + "," + "Type:" + SORDropDownList.SelectedItem.Text + "," + "Name:" + name.ToUpper() + "," + "address:" + add.ToUpper();// + "," + "state:" + state.ToUpper() + "," + "country:" + country.ToUpper() + "," + "postcode:" + pincode;
                    int insertlogin = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), contractdetails_ID, log5in, user, DateTime.Now.ToString(), "Indian_contracts.aspx", addonnote, "", log5in);
                    int updatesor = Queries.UpdateContractNo_OthernamesID(office);
                }

                asornoTextBox.Text = "";
               
            }

        }

        

    }
    public void visibilityPointstrue()
    {

        lblAdministrationFees.Visible = false;
        AdministrationFeesTextBox.Visible = false;
        lblconversionfee.Visible = false;
        conversionfeeTextBox.Visible = false;
        lblnewpoints.Visible = true;
        newpointsTextBox.Visible = true;

    }

    public void visibilitytradeinPointstrue()
    {

        lblAdministrationFees.Visible = false;
        AdministrationFeesTextBox.Visible = false;
        lblconversionfee.Visible = true;
        conversionfeeTextBox.Visible = true;
        lblnewpoints.Visible = true;
        newpointsTextBox.Visible = true;
    }

    public void visibilitytradeinweekstrue()
    {

        lbltipnopoints.Visible = false;
        tipnopointsTextBox.Visible = false;

        lblAdministrationFees.Visible = false;
        AdministrationFeesTextBox.Visible = false;
        lblconversionfee.Visible = true;
        conversionfeeTextBox.Visible = true;
        lblnewpoints.Visible = true;
        newpointsTextBox.Visible = true;
    }

    public void visibilityfractionaltrue()
    {

        lblconversionfee.Visible = false;
        conversionfeeTextBox.Visible = false;
        lblnewpoints.Visible = false;
        newpointsTextBox.Visible = false;
    }

    public void visibilitytradeinfractionaltrue()
    {

        lblAdministrationFees.Visible = true;
        AdministrationFeesTextBox.Visible = true;
        lblconversionfee.Visible = false;
        conversionfeeTextBox.Visible = false;
        lblnewpoints.Visible = false;
        newpointsTextBox.Visible = false;
    }




    public string getdata()
    {
        string htmlstr = "";
        SqlDataReader dr = Queries.LoadAffiliationType(office);//,currencyDropDownList.SelectedItem.Text);
        while (dr.Read())
        {

            int id = dr.GetInt32(0);
            string name = dr.GetString(1);
            double amt = dr.GetDouble(2);
            string addvalue = "dispplayvalue";
            string ca = "ca";

            htmlstr += " <input id=" + ca + "" + id + " type='checkbox' class='hello' name='aamt' onClick=" + addvalue + "() value='" + amt + "'>" + name + "";


        }

        return htmlstr;
    }
    public void SORAddltionalLoadVisibility()
    {
        lblsoraname.Visible = false;
        soranameTextBox.Visible = false;
        lblsoraaddress.Visible = false;
        soraaddressTextBox.Visible = false;
        lblsorastate.Visible = false;
        sorastateTextBox.Visible = false;
        lblsoracountry.Visible = false;
        soracountryTextBox.Visible = false;
        lblsorapincode.Visible = false;
        sorapincodeTextBox.Visible = false;
        btndelete.Visible = false;
        btnupdate.Visible = false;

    }
    public void OnlySORLoadVisibility()
    {
        lblsoraname.Visible = true;
        soranameTextBox.Visible = true;
        lblsoraaddress.Visible = true;
        soraaddressTextBox.Visible = true;
        lblsorastate.Visible = true;
        sorastateTextBox.Visible = true;

        lblsoracountry.Visible = true;
        soracountryTextBox.Visible = true;
        lblsorapincode.Visible = true;
        sorapincodeTextBox.Visible = true;
        btndelete.Visible = true;
        btnupdate.Visible = true;

    }
    public void OnlyAddltionalLoadVisibility()
    {
        lblsoraname.Visible = true;
        soranameTextBox.Visible = true;
        lblsoraaddress.Visible = false;
        soraaddressTextBox.Visible = false;
        lblsorastate.Visible = false;
        sorastateTextBox.Visible = false;

        lblsoracountry.Visible = false;
        soracountryTextBox.Visible = false;
        lblsorapincode.Visible = false;
        sorapincodeTextBox.Visible = false;
        btndelete.Visible = true;
        btnupdate.Visible = true;

    }

    protected void Page_Load(object sender, EventArgs e)
    {

        string user = (string)Session["username"];

        string sContractdetailsID = (string)Session["ContractdetailsID"];

        if (user == null)
        {
            Response.Redirect("~/WebSite5/production/login.aspx");
        }


        if (!IsPostBack)
        {

            Session["oProfile_Venue_Country"] = ""; Session["oProfile_Venue"] = ""; Session["oProfile_Group_Venue"] = ""; Session["oProfile_Marketing_Program"] = "";
            Session["oProfile_Agent"] = ""; Session["oProfile_Agent_Code"] = ""; Session["oProfile_Member_Type1"] = ""; Session["oProfile_Member_Number1"] = "";
            Session["oProfile_Member_Type2"] = ""; Session["oProfile_Member_Number2"] = ""; Session["oProfile_Employment_status"] = ""; Session["oProfile_Marital_status"] = "";
            Session["oProfile_NOY_Living_as_couple"] = ""; Session["oOffice"] = ""; Session["oComments"] = ""; Session["oManager"] = "";
            Session["ophid"] = ""; Session["ocard"] = "";

            Session["oProfile_Primary_Title"] = ""; Session["oProfile_Primary_Fname"] = ""; Session["oProfile_Primary_Lname"] = "";
            Session["oProfile_Primary_DOB"] = ""; Session["oProfile_Primary_Nationality"] = ""; Session["oProfile_Primary_Country"] = "";
            Session["opage"] = ""; Session["opdesignation"] = ""; Session["oplang"] = "";

            Session["oProfile_Secondary_Title"] = ""; Session["oProfile_Secondary_Fname"] = ""; Session["oProfile_Secondary_Lname"] = "";
            Session["oProfile_Secondary_DOB"] = ""; Session["oProfile_Secondary_Nationality"] = ""; Session["oProfile_Secondary_Country"] = "";
            Session["osage"] = ""; Session["osdesignation"] = ""; Session["oslang"] = "";

            Session["oSub_Profile1_Title"] = ""; Session["oSub_Profile1_Fname"] = ""; Session["oSub_Profile1_Lname"] = "";
            Session["oSub_Profile1_DOB"] = ""; Session["  oSub_Profile1_Nationality"] = ""; Session["oSub_Profile1_Country"] = "";
            Session["osp1age"] = "";

            Session["oSub_Profile2_Title"] = ""; Session["oSub_Profile2_Fname"] = ""; Session["oSub_Profile2_Lname"] = "";
            Session["oSub_Profile2_DOB"] = ""; Session["  oSub_Profile2_Nationality"] = ""; Session["oSub_Profile2_Country"] = "";
            Session["osp2age"] = "";

            Session["oSub_Profile3_Title"] = ""; Session["oSub_Profile3_Fname"] = ""; Session["oSub_Profile3_Lname"] = "";
            Session["oSub_Profile3_DOB"] = ""; Session["  oSub_Profile3_Nationality"] = ""; Session["oSub_Profile3_Country"] = "";
            Session["osp3age"] = "";

            Session["oSub_Profile4_Title"] = ""; Session["oSub_Profile4_Fname"] = ""; Session["oSub_Profile4_Lname"] = "";
            Session["oSub_Profile4_DOB"] = ""; Session["  oSub_Profile4_Nationality"] = ""; Session["oSub_Profile4_Country"] = "";
            Session["osp4age"] = "";

            Session["oProfile_Address_Line1"] = ""; Session["oProfile_Address_Line2"] = ""; Session["oProfile_Address_State"] = "";
            Session["oProfile_Address_city"] = ""; Session["oProfile_Address_Postcode"] = ""; Session["oProfile_Address_Created_Date"] = "";
            Session["oProfile_Address_Expiry_Date"] = ""; Session["oProfile_Address_Country"] = "";

            Session["oProfile_CorAddress_Line1"] = ""; Session["oProfile_CorAddress_Line2"] = ""; Session["oProfile_CorAddress_State"] = "";
            Session["oProfile_CorAddress_city"] = ""; Session["oProfile_CorAddress_Postcode"] = ""; Session["oProfile_CorAddress_Created_Date"] = "";
            Session["oProfile_Address_Expiry_Date"] = ""; Session["oProfile_CorAddress_Country"] = "";


            Session["oPrimary_CC"] = ""; Session["oPrimary_Mobile"] = ""; Session["oPrimary_Alt_CC"] = "";
            Session["oPrimary_Alternate"] = ""; Session["opriOfficecc"] = ""; Session["opriOfficeno"] = "";

            Session["osecOfficecc"] = ""; Session["osecofficeno"] = ""; Session["oSecondary_CC"] = "";
            Session["oSecondary_Mobile"] = ""; Session["oSecondary_Alt_CC"] = ""; Session["oSecondary_Alternate"] = "";

            Session["oSubprofile1_CC"] = ""; Session["oSubprofile1_Mobile"] = ""; Session["oSubprofile1_Alt_CC"] = ""; Session["oSubprofile1_Alternate"] = "";
            Session["oSubprofile2_CC"] = ""; Session["oSubprofile2_Mobile"] = ""; Session["oSubprofile2_Alt_CC"] = ""; Session["oSubprofile2_Alternate"] = "";

            Session["oSubprofile3_CC"] = ""; Session["oSubprofile3_Mobile"] = ""; Session["oSubprofile3_Alt_CC"] = ""; Session["oSubprofile3_Alternate"] = "";
            Session["oSubprofile4_CC"] = ""; Session["oSubprofile4_Mobile"] = ""; Session["oSubprofile4_Alt_CC"] = ""; Session["oSubprofile4_Alternate"] = "";

            Session["oPrimary_Email"] = ""; Session["oSecondary_Email"] = ""; Session["oSubprofile1_Email"] = "";
            Session["oSubprofile2_Email"] = ""; Session["oSubprofile3_Email"] = ""; Session["oSubprofile4_Email"] = "";

            Session["oPrimary_Email2"] = ""; Session["oSecondary_Email2"] = ""; Session["oSubprofile1_Email2"] = "";
            Session["oSubprofile2_Email2"] = ""; Session["oSubprofile3_Email2"] = ""; Session["oSubprofile4_Email2"] = "";


            Session["oProfile_Stay_ID"] = ""; Session["oProfile_Stay_Resort_Name"] = ""; Session["oProfile_Stay_Resort_Room_Number"] = "";
            Session["oProfile_Stay_Arrival_Date"] = ""; Session["oProfile_Stay_Departure_Date"] = "";

            Session["oTour_Details_Guest_Status"] = ""; Session["oTour_Details_Guest_Sales_Rep"] = ""; Session["oTour_Details_Tour_Date"] = "";
            Session["tourweekno"] = ""; Session["oTour_Details_Sales_Deck_Check_In"] = ""; Session["oTour_Details_Sales_Deck_Check_Out"] = "";
            Session["oTour_Details_Taxi_In_Price"] = ""; Session["oTour_Details_Taxi_In_Ref"] = ""; Session["oTour_Details_Taxi_Out_Price"] = "";
            Session["oTour_Details_Taxi_Out_Ref"] = ""; Session["oComments"] = ""; Session["oregTerms"] = ""; Session["ocomment2"] = "";

            Session["ProfileID"] = ""; Session["ophid"] = ""; Session["ocard"] = ""; Session["oTour_Details_Tour_Date"] = "";

            Session["sechomeno"] = ""; Session["prihomeno"] = ""; Session["oprihomeno"] = ""; Session["oprihomecc"] = "";
            Session["osechomecc"] = ""; Session["osechomeno"] = "";

            Session["pancardspell"] = ""; Session["cogstinospell"] = "";



            //load blank values of session
            //  Session["contractdetails_id"] = "";
            Session["contractno"] = ""; Session["ocsalesrep"] = ""; Session["ocTomgr"] = ""; Session["obuttonup"] = ""; Session["odealdate"] = ""; Session["odealstatus"] = "";
            Session["Contract_CreatedDate"] = ""; Session["oContractUpdatedDate"] = ""; Session["omcwv"] = ""; Session["ofinancedetails"] = ""; Session["ocontract_Remark"] = "";
            Session["ContractType"] = ""; Session["ofinancedetails"] = "";
            Session["ocontract_Remark"] = ""; Session["opan"] = ""; Session["oadhar"] = "";
            Session["omcfees"] = ""; Session["omcdate"] = ""; Session["omemberfee"] = ""; Session["omemebercgst"] = ""; Session["omembersgst"] = "";
            Session["ocanxcontno"] = ""; Session["ocanxdate"] = ""; Session["oloanbuofficer"] = ""; Session["ocogstin"] = ""; Session["ocompanypano"] = "";
            Session["odealweekno"] = ""; Session["odeckdetails"] = ""; Session["odeckremark"] = ""; Session["ocontractcomment"] = ""; Session["Contract_createdUser"] = ""; Session["obu6"] = "";
            Session["oupdowngrade"] = ""; Session["oExpirydate"] = ""; Session["oCommence_date"] = ""; Session["oContract_group"] = ""; Session["oContract_Venue"] = "";
            Session["oReturnhomedate"] = "";


            Session["TeamDetailsID"] = ""; Session["Approval_Comments"] = ""; Session["Rep_report"] = "";
            Session["To_report"] = ""; Session["SMS_Update"] = ""; Session["Created_Date"] = ""; Session["CreatedBy"] = "";
            Session["Updated_Date"] = ""; Session["UpdatedBy"] = "";


            Session["Finance_Details_Id"] = ""; Session["ofinancemethod"] = "";
            Session["ocurrency"] = ""; Session["oaffiliate"] = ""; Session["ototalintax"] = ""; Session["odepamt"] = ""; Session["Initial_Deposit_Amount"] = "";
            Session["obalpayable"] = ""; Session["odepbal"] = "";
            Session["ototalbalance"] = ""; Session["opaymethod"] = ""; Session["onoinstallment"] = ""; Session["oinstallment"] = ""; Session["ofinance"] = "";
            Session["oFinanceno"] = ""; Session["oisgtrate"] = ""; Session["ointerestrate"] = ""; Session["ofindocfee"] = ""; Session["oigstamt"] = ""; Session["onoemi"] = "";
            Session["oemiamt"] = ""; Session["ofinmonth"] = ""; Session["ooldLoanAgreement"] = ""; Session["oregcollectionterm"] = ""; Session["oregcollamt"] = "";
            Session["obaladepamtdate"] = ""; Session["ooldloanamt"] = "";
            Session["eurorate"] = ""; Session["loanamtINEuro"] = ""; Session["monthlyPremiumprotectionplan"] = "";Session["Open_Loan_AgreementNo"] = "";



            Session["Deposit_Receipt_Id"] = ""; Session["oReceipt_No"] = ""; Session["oReceipt_Date"] = "";
            Session["place_supply"] = ""; Session["state"] = ""; Session["state_code"] = ""; Session["Product_Name"] = ""; Session["SAC"] = "";
            Session["oAmount"] = ""; Session["otaxable_value"] = "";
            Session["ocgstrate"] = ""; Session["ocgstamt"] = ""; Session["osgstrate"] = ""; Session["osgstamt"] = ""; Session["ototalamt"] = ""; Session["oPayment_Mode"] = "";
            Session["oactual_currency"] = ""; Session["oconverted_currency"] = ""; Session["oConverted_rate"] = ""; Session["oExchangedValue_date"] = ""; Session["oActual_Amt"] = "";
            Session["Receipt_Status"] = ""; Session["receipttype"] = ""; Session["payment_date"] = ""; Session["Total_deposit"] = "";
            Session["USDTotal_deposit"] = ""; Session["Previous_DepositAmt"] = "";  Session["floodcess"] = "";


            Session["CRM_ID"] = "";
            Session["program_source"] = ""; Session["Referred_By"] = ""; Session["comment1"] = ""; Session["created_date"] = "";
            Session["updated_date"] = ""; Session["createdby"] = ""; Session["updatedby"] = ""; Session["status"] = "";

            Session["Installment_ID"] = ""; Session["iProfileID"] = ""; Session["ContractNo"] = ""; Session["Installment_no"] = "";
            Session["Installment_Amount"] = ""; Session["Installment_Date"] = ""; Session["Installment_Invoice_No"] = "";
            Session["Paymentmode"] = "";

            Session["Contract_PA_Id"] = "";
            Session["onewpoints"] = ""; Session["oconversionfee"] = ""; Session["oadminfee"] = ""; Session["ototpurchprice"] = ""; Session["ocgst"] = ""; Session["osgst"] = ""; Session["ototalpriceInTax"] = "";
            Session["odeposit"] = ""; Session["obalance"] = ""; Session["obalancedue"] = ""; Session["oremarks"] = "";
            Session["ooldVolume"] = ""; Session["ooldadminfee"] = ""; Session["ooldTotalTax"] = ""; Session["ooldDeposit"] = ""; Session["ousdoldvolume"] = ""; Session["ousdoldadminfee"] = ""; Session["ousdoldtax"] = ""; Session["ousdolddeposit"] = "";
            Session["oUSDConvertedVolume"] = ""; Session["oUSDConvertedAdminfee"] = ""; Session["oUSDConvertedTax"] = ""; Session["oUSDConverteddeposit"] = "";
            Session["totaltax"] = ""; Session["oUSDConvertedTotalVolume"] = ""; Session["oexchangerate"] = "";

            Session["ContractPoints_ID"] = ""; Session["opts_club"] = ""; Session["opts_newpts"] = ""; Session["opts_entitlement"] = "";
            Session["opts_totalpts"] = ""; Session["opts_firstyr"] = ""; Session["opts_Tenure"] = ""; Session["opts_lastyr"] = ""; Session["opts_nopersons"] = "";

            Session["ContractTradeInPoint_ID"] = "";
            Session["otip_Trade_In_Details_club_resort"] = ""; Session["otip_Trade_In_Details_No_rights"] = ""; Session["otip_Trade_In_Details_ContNo_RCINo"] = ""; Session["otip_Trade_In_Details_Points_value"] = ""; Session["Actualpoints_value"] = ""; Session["otip_New_Club"] = ""; Session["otip_New_Club_Points_Rights"] = ""; Session["otip_New_MemebrshipType"] = "";
            Session["otip_New_TotalPointsRights"] = ""; Session["otip_New_First_year_occupancy"] = ""; Session["otip_New_Tenure"] = "";
            Session["otip_New_Last_year_occupancy"] = ""; Session["otip_nopersons"] = ""; Session["oldtipmemtype"] = "";




     

            Session["ContractTradeInWeeks_ID"] = "";
            Session["otiw_Trade_In_Weeks_resort"] = ""; Session["otiw_Trade_In_Weeks_Apt"] = ""; Session["otiw_Trade_In_Weeks_Season"] = ""; Session["otiw_Trade_In_Weeks_NoWks"] = ""; Session["otiw_Trade_In_Weeks_ContNo_RCINo"] = ""; Session["otiw_Trade_In_Weeks_Points_value"] = ""; Session["otiw_NewPointsW_Club"] = "";
            Session["otiw_NewPointsW_Club_Points_Rights"] = ""; Session["otiw_NewPointsW_MemebrshipType"] = ""; Session["otiw_NewPointsW_Total_Points_rights"] = ""; Session["otiw_NewPointsW_First_year_occupancy"] = ""; Session["otiw_NewPointsW_Tenure"] = ""; Session["otiw_NewPointsW_Last_year_occupancy"] = ""; Session["otiw_nopersons"] = "";
            Session["oldtiwmemtype"] = ""; Session["wActualpoints_value"] = "";

            Session["ContractFractionalIndian_ID"] = "";
            Session["otiresort"] = ""; Session["otifresidence_no"] = ""; Session["otifresidence_type"] = ""; Session["otiffractional_interest"] = ""; Session["otifentitlement"] = "";
            Session["otiffirstyear_Occupancy"] = ""; Session["otiftenure"] = ""; Session["otiflastyear_Occupancy"] = ""; Session["otifleaseback"] = ""; Session["otifMc_Charges"] = "";

            Session["Contract_Fractional_PA_Id"] = "";
            Session["ofctAdmission_fees"] = ""; Session["ofctadministration_fees"] = ""; Session["ofctCgst"] = ""; Session["ofctSgst"] = ""; Session["ofctTotal_Purchase_Price"] = ""; Session["ofctTotal_Price_Including_Tax"] = "";
            Session["ofctDeposit"] = ""; Session["ofctBalance"] = ""; Session["ofctBalance_Due_Dates"] = ""; Session["ofctRemarks"] = ""; Session["otradeinvalue"] = ""; Session["ototalvalue"] = "";
            Session["oFoldVolume"] = ""; Session["oFoldadminfee"] = ""; Session["oFoldTotalTax"] = ""; Session["oFoldDeposit"] = ""; Session["oFusdoldvolume"] = ""; Session["oFusdoldadminfee"] = ""; Session["oFusdoldtax"] = ""; Session["oFusdolddeposit"] = "";
            Session["oUSDConvertedFVolume"] = ""; Session["oUSDConvertedFAdminfee"] = ""; Session["oUSDConvertedFTax"] = ""; Session["oUSDConvertedFdeposit"] = "";
            Session["Ftotaltax"] = ""; Session["oUSDConvertedTotalVolume"] = ""; Session["oexchangerate"] = "";


            Session["ContractTrade_InFractional_ID"] = "";
            Session["otifOldcontracttype"] = ""; Session["otifRESORT"] = ""; Session["otifAPT_TYPE"] = ""; Session["otifSEASON"] = ""; Session["otifNO_WEEKS"] = ""; Session["otifNO_POINTS"] = ""; Session["otifPOINTS_VALUE"] = ""; Session["otifoldContract_No"] = "";
            Session["oldtifmemtype"] = "";

            Session["otherNamesID"] = "";
            Session["Type"] = ""; Session["Name"] = ""; Session["Address"] = ""; Session["State"] = ""; Session["Country"] = "";
            Session["Postcode"] = ""; Session["Status"] = ""; Session["Document_name"] = ""; Session["Added_Date"] = "";


            Session["Total_deposit"] = ""; Session["USDTotal_deposit"] = ""; Session["Previous_DepositAmt"] = "";


            Session["oSC_Previous_Status"] = "";
            Session["oSC_Updated_Status"] = "";
            Session["oSC_Cancel_Group_Venue"] = "";
            Session["oSC_Cancel_Reason"] = "";
            Session["oSC_Cancel_Date"] = "";
            Session["oSC_Profile_ID"] = "";
            Session["oSC_User"] = "";
            Session["oContract_Finance_ID"] = "";
            Session["oSC_Update_Date"] = "";
            Session["oContract_num_new"] = "";
            Session["oSC_Cancel_Type"] = ""; Session["oSC_Cancel_Comment"] = "";
            Session["oSC_Withdraw_Date"] = "";




            // int contractdetailsdidexistence = Queries.ContractDetailsIDIContractDetailsExists(sContractdetailsID);
            //if (contractdetailsdidexistence == 1)
            // { 



            ContractdetailsIDTextBox.Text = sContractdetailsID;
            DataSet dsct = Queries.LoadContractNoDetailsOnContractDetails_ID(sContractdetailsID);

            Session["contractno"] = dsct.Tables[0].Rows[0]["Contractno"].ToString();
            contractnoTextBox.Text = dsct.Tables[0].Rows[0]["Contractno"].ToString();
            Session["ProfileID"] = Queries.GetProfileIDOnContractNo(Session["contractno"].ToString());




            DataSet ds = Queries.LoadProfielDetailsFull(Session["ProfileID"].ToString());
            profileidTextBox.Text = ds.Tables[0].Rows[0]["Profile_ID"].ToString();
            indateTextBox.Text = ds.Tables[0].Rows[0]["Profile_Date_Of_Insertion"].ToString();
            createdbyTextBox.Text = ds.Tables[0].Rows[0]["Profile_Created_By"].ToString();
            office = Queries.GetOfficeFromCountry(Session["ProfileID"].ToString());// ds.Tables[0].Rows[0]["Office"].ToString();
            officeTextBox.Text = ds.Tables[0].Rows[0]["Office"].ToString();

            commentsTextBox.Text = ds.Tables[0].Rows[0]["Comments"].ToString();
            comment2.Text = ds.Tables[0].Rows[0]["comment2"].ToString();
            companynameTextBox.Text = ds.Tables[0].Rows[0]["Company_Name"].ToString().ToUpper();
            //  gstinTextBox.Text = dsct.Tables[0].Rows[0]["Client_GSTIN"].ToString();
            companypanoTextBox.Text = dsct.Tables[0].Rows[0]["Company_PanNo"].ToString();


            Session["pancardspell"] = ds.Tables[0].Rows[0]["Primary_ID_Num"].ToString();
            string sessionfrpan = Session["pancardspell"].ToString();
            if (sessionfrpan == "" || sessionfrpan == null)
            {
                PancardspellTextBox.Text = dsct.Tables[0].Rows[0]["Pan_Card"].ToString();
            }
            else
            {
                PancardspellTextBox.Text = ds.Tables[0].Rows[0]["Primary_ID_Num"].ToString();
            }


            Session["cogstinospell"] = ds.Tables[0].Rows[0]["Primary_ID_Num2"].ToString();
            string sessionfrgstin = Session["pancardspell"].ToString();
            if (sessionfrgstin == "" || sessionfrgstin == null)
            {
                gstinTextBox.Text = dsct.Tables[0].Rows[0]["Client_GSTIN"].ToString();
            }
            else
            {
                gstinTextBox.Text = ds.Tables[0].Rows[0]["Primary_ID_Num2"].ToString();
            }


            //load sor names etc
            SORAddltionalLoadVisibility();
            int existssor = Queries.ContractIDINSOR_Additional(ContractdetailsIDTextBox.Text);
            if (existssor == 1)
            {



            }
            else
            {
                //GridView2.Visible = false;
            }





            DataSet dsdepmethd = Queries.LoadDepositPaymentMethod(office);
            depositmethodaddDropDownList.DataSource = dsdepmethd;
            depositmethodaddDropDownList.DataTextField = "Deposit_pay_method_name";
            depositmethodaddDropDownList.DataValueField = "Deposit_pay_method_name";
            depositmethodaddDropDownList.AppendDataBoundItems = true;
            depositmethodaddDropDownList.Items.Insert(0, new ListItem("", ""));
            depositmethodaddDropDownList.DataBind();



            //loading venuecountry on load
            DataSet ds1 = Queries.LoadProfileVenueCountry(Session["ProfileID"].ToString());
            VenueCountryDropDownList.DataSource = ds1;
            VenueCountryDropDownList.DataTextField = "Venue_Country_Name";
            VenueCountryDropDownList.DataValueField = "Venue_Country_Name";
            VenueCountryDropDownList.AppendDataBoundItems = true;
            VenueCountryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Venue_Country"].ToString(), ""));
            VenueCountryDropDownList.DataBind();

            //loading venue on load
            DataSet ds2 = Queries.LoadProfileVenue(Session["ProfileID"].ToString(), VenueCountryDropDownList.SelectedItem.Text);
            VenueDropDownList.DataSource = ds2;
            VenueDropDownList.DataTextField = "Venue_Name";
            VenueDropDownList.DataValueField = "Venue_Name";
            VenueDropDownList.AppendDataBoundItems = true;
            VenueDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Venue"].ToString(), ""));
            VenueDropDownList.DataBind();

            // loading venuegroup on load
            DataSet ds3 = Queries.LoadProfileVenueGroup(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
            GroupVenueDropDownList.DataSource = ds3;
            GroupVenueDropDownList.DataTextField = "Venue_Group_Name";
            GroupVenueDropDownList.DataValueField = "Venue_Group_Name";
            GroupVenueDropDownList.AppendDataBoundItems = true;
            GroupVenueDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Group_Venue"].ToString(), ""));
            GroupVenueDropDownList.DataBind();

            ////loading marketing program on load
            //DataSet ds4 = Queries.LoadProfileMktg(ProfileID, VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
            //MarketingProgramDropDownList.DataSource = ds4;
            //MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
            //MarketingProgramDropDownList.DataValueField = "Marketing_Program_Name";
            //MarketingProgramDropDownList.AppendDataBoundItems = true;
            //MarketingProgramDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString(), ""));
            //MarketingProgramDropDownList.DataBind();

            if (GroupVenueDropDownList.SelectedItem.Text == "Coldline" || GroupVenueDropDownList.SelectedItem.Text == "COLDLINE")
            {

                DataSet ds4 = Queries.LoadProfileMktg(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                MarketingProgramDropDownList.DataSource = ds4;
                MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
                MarketingProgramDropDownList.DataValueField = "Marketing_Program_Name";
                MarketingProgramDropDownList.AppendDataBoundItems = true;
                MarketingProgramDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString(), ""));
                MarketingProgramDropDownList.DataBind();
            }
            else
            {
                if (ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString() == "")
                {
                    DataSet ds4445 = Queries.LoadMarktOnCode(ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                    MarketingProgramDropDownList.DataSource = ds4445;
                    MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
                    MarketingProgramDropDownList.DataValueField = "Marketing_Program_abbrv";
                    MarketingProgramDropDownList.AppendDataBoundItems = true;
                    MarketingProgramDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString(), ""));
                    MarketingProgramDropDownList.DataBind();

                }
                else
                {
                    if (ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString() == "MBRMKT" && ds.Tables[0].Rows[0]["Lead_Source"].ToString() == "")
                    {
                        DataSet ds4 = Queries.LoadProfileMktg1(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                        MarketingProgramDropDownList.DataSource = ds4;
                        MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
                        MarketingProgramDropDownList.DataValueField = "Marketing_Program_abbrv";
                        MarketingProgramDropDownList.AppendDataBoundItems = true;
                        MarketingProgramDropDownList.Items.Insert(0, new ListItem("CANCELLED MEMBER", ""));
                
                        MarketingProgramDropDownList.DataBind();
                    }
                    else if (ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString() == "MBRMKT" && ds.Tables[0].Rows[0]["Lead_Source"].ToString() == "MRG")
                    {
                        DataSet ds4 = Queries.LoadProfileMktg1(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                        MarketingProgramDropDownList.DataSource = ds4;
                        MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
                        MarketingProgramDropDownList.DataValueField = "Marketing_Program_abbrv";
                        MarketingProgramDropDownList.AppendDataBoundItems = true;
                        MarketingProgramDropDownList.Items.Insert(0, new ListItem("REVOKED MEMBER", ""));
                        MarketingProgramDropDownList.DataBind();
                    }
                    else if (ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString() == "MBRMKT" && ds.Tables[0].Rows[0]["Lead_Source"].ToString() == "WD")
                    {
                        DataSet ds4 = Queries.LoadProfileMktg1(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                        MarketingProgramDropDownList.DataSource = ds4;
                        MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
                        MarketingProgramDropDownList.DataValueField = "Marketing_Program_abbrv";
                        MarketingProgramDropDownList.AppendDataBoundItems = true;
                        MarketingProgramDropDownList.Items.Insert(0, new ListItem("EXPIRED WD", ""));
                        MarketingProgramDropDownList.DataBind();
                    }
                    else
                    {


                        DataSet ds444 = Queries.LoadMarktOnCode(ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                        DataSet ds4 = Queries.LoadProfileMktg1(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text);
                        MarketingProgramDropDownList.DataSource = ds4;
                        MarketingProgramDropDownList.DataTextField = "Marketing_Program_Name";
                        MarketingProgramDropDownList.DataValueField = "Marketing_Program_abbrv";
                        MarketingProgramDropDownList.AppendDataBoundItems = true;
                        MarketingProgramDropDownList.Items.Insert(0, new ListItem(ds444.Tables[0].Rows[0]["Marketing_Program_Name"].ToString(), ""));
                        MarketingProgramDropDownList.DataBind();
                    }
                }

            }
            // loading agents on load as per venue group
            if (GroupVenueDropDownList.SelectedItem.Text == "Coldline")
            {
                //     DataSet ds5 = Queries.LoadProfileAgent(ProfileID);
                DataSet ds5 = Queries.LoadProfileAgent1(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
                AgentDropDownList.DataSource = ds5;
                AgentDropDownList.DataTextField = "agentname";
                AgentDropDownList.DataValueField = "agentname";
                AgentDropDownList.AppendDataBoundItems = true;
                AgentDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Agent"].ToString(), ""));
                AgentDropDownList.DataBind();


            }
            else
            {
                DataSet ds5 = Queries.LoadProfileAgentNotColdline(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
                AgentDropDownList.DataSource = ds5;
                AgentDropDownList.DataTextField = "Sales_Rep_Name";
                AgentDropDownList.DataValueField = "Sales_Rep_Name";
                AgentDropDownList.AppendDataBoundItems = true;
                AgentDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Agent"].ToString(), ""));
                AgentDropDownList.DataBind();



            }

            // loading To name on load as per venue group
            if (GroupVenueDropDownList.SelectedItem.Text == "Coldline")
            {
                // load to11
                DataSet ds5aa = Queries.LoadTOOPCOnVenue11(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
                TONameDropDownList.DataSource = ds5aa;
                TONameDropDownList.DataTextField = "to_name";
                TONameDropDownList.DataValueField = "to_name";
                TONameDropDownList.AppendDataBoundItems = true;
                TONameDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Agent_Code"].ToString(), ""));
                TONameDropDownList.DataBind();


            }
            else
            {
                // load to12
                DataSet ds5aa = Queries.LoadTOOPCOnVenue12(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
                TONameDropDownList.DataSource = ds5aa;
                TONameDropDownList.DataTextField = "TO_Manager_Name";
                TONameDropDownList.DataValueField = "TO_Manager_Name";
                TONameDropDownList.AppendDataBoundItems = true;
                TONameDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Agent_Code"].ToString(), ""));
                TONameDropDownList.DataBind();



            }


            DataSet dsmg = Queries.LoadProfileManager(Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
            ManagerDropDownList.DataSource = dsmg;
            ManagerDropDownList.DataTextField = "Manager_Name";
            ManagerDropDownList.DataValueField = "Manager_Name";
            ManagerDropDownList.AppendDataBoundItems = true;
            ManagerDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["manager"].ToString(), ""));
            ManagerDropDownList.DataBind();



            if (MarketingProgramDropDownList.SelectedItem.Text == "T/S MEMBER" || MarketingProgramDropDownList.SelectedItem.Text == "T/S MEMBER RCI" || MarketingProgramDropDownList.SelectedItem.Text == "FRACTIONAL OWNER" || MarketingProgramDropDownList.SelectedItem.Text == "FRACTIONAL OWNER RCI" || MarketingProgramDropDownList.SelectedItem.Text == "Owner" || MarketingProgramDropDownList.SelectedItem.Text == "OWNER" || MarketingProgramDropDownList.SelectedItem.Text == "Member" || MarketingProgramDropDownList.SelectedItem.Text == "MEMBER")
            {
                // loadprofilememebertype
                DataSet dsmgs = Queries.LoadProfileMemberType(Session["ProfileID"].ToString());
                MemType1DropDownList.DataSource = dsmgs;
                MemType1DropDownList.DataTextField = "Member_Type_Name";
                MemType1DropDownList.DataValueField = "Member_Type_Name";
                MemType1DropDownList.AppendDataBoundItems = true;
                MemType1DropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Member_Type1"].ToString(), ""));
                MemType1DropDownList.DataBind();


                Memno1TextBox.Text = ds.Tables[0].Rows[0]["Profile_Member_Number1"].ToString();

                // load profiletype
                DataSet dsmgss = Queries.LoadProfileType(Session["ProfileID"].ToString());
                TypeDropDownList.DataSource = dsmgss;
                TypeDropDownList.DataTextField = "Type_Name";
                TypeDropDownList.DataValueField = "Type_Name";
                TypeDropDownList.AppendDataBoundItems = true;
                TypeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Member_Number1"].ToString(), ""));
                TypeDropDownList.DataBind();
            }
            else
            {


                // profilemembertype
                DataSet dsmgs = Queries.LoadProfileMemberType(Session["ProfileID"].ToString());
                MemType1DropDownList.DataSource = dsmgs;
                MemType1DropDownList.DataTextField = "Member_Type_Name";
                MemType1DropDownList.DataValueField = "Member_Type_Name";
                MemType1DropDownList.AppendDataBoundItems = true;
                MemType1DropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Member_Type1"].ToString(), ""));
                MemType1DropDownList.DataBind();
                // load profiletype
                DataSet dsmgss = Queries.LoadProfileType(Session["ProfileID"].ToString());
                TypeDropDownList.DataSource = dsmgss;
                TypeDropDownList.DataTextField = "Type_Name";
                TypeDropDownList.DataValueField = "Type_Name";
                TypeDropDownList.AppendDataBoundItems = true;
                TypeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Member_Number1"].ToString(), ""));
                TypeDropDownList.DataBind();


            }

            // new code added by gaurav //
            DataSet dsLead = Queries.onLoadLeadOffice(Session["ProfileID"].ToString());
            LeadOfficeDropDownList.DataSource = dsLead;
            LeadOfficeDropDownList.DataTextField = "Office";
            LeadOfficeDropDownList.DataValueField = "Office";
            LeadOfficeDropDownList.AppendDataBoundItems = true;

            LeadOfficeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["leadOffice"].ToString(), ""));
            LeadOfficeDropDownList.DataBind();
            //--//


            // new code added by gaurav //
            DataSet dsSubVenue = Queries.onLoadSubVenue(VenueDropDownList.SelectedItem.Text, GroupVenueDropDownList.SelectedItem.Text, Session["ProfileID"].ToString());
            SubVenueDropDownList.DataSource = dsSubVenue;
            SubVenueDropDownList.DataTextField = "SVenue_India_Name";
            SubVenueDropDownList.DataValueField = "SVenue_India_Name";
            SubVenueDropDownList.AppendDataBoundItems = true;
            SubVenueDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["SubVenue"].ToString(), ""));
            SubVenueDropDownList.DataBind();






            DataSet dsptitle = Queries.LoadPrimarySalutation(Session["ProfileID"].ToString(), office);
            PrimaryTitleDropDownList.DataSource = dsptitle;
            PrimaryTitleDropDownList.DataTextField = "Salutation";
            PrimaryTitleDropDownList.DataValueField = "Salutation";
            PrimaryTitleDropDownList.AppendDataBoundItems = true;
            PrimaryTitleDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Primary_Title"].ToString(), ""));
            PrimaryTitleDropDownList.DataBind();

            pfnameTextBox.Text = ds.Tables[0].Rows[0]["Profile_Primary_Fname"].ToString();
            plnameTextBox.Text = ds.Tables[0].Rows[0]["Profile_Primary_Lname"].ToString();
            primarydobdatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Primary_DOB"]);// Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Primary_DOB"].ToString()).ToString("dd-MM-yyyy");
            primaryAge.Text = ds.Tables[0].Rows[0]["Primary_Age"].ToString();
            pdesginationTextBox.Text = ds.Tables[0].Rows[0]["Primary_Designation"].ToString();


            DataSet dspnationality = Queries.LoadPrimaryNationality(Session["ProfileID"].ToString());
            PrimarynationalityDropDownList.DataSource = dspnationality;
            PrimarynationalityDropDownList.DataTextField = "Nationality_Name";
            PrimarynationalityDropDownList.DataValueField = "Nationality_Name";
            PrimarynationalityDropDownList.AppendDataBoundItems = true;
            PrimarynationalityDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Primary_Nationality"].ToString(), ""));
            PrimarynationalityDropDownList.DataBind();

            DataSet dspcountry = Queries.LoadCountryPrimary(Session["ProfileID"].ToString());
            primarycountryDropDownList.DataSource = dspcountry;
            primarycountryDropDownList.DataTextField = "country_name";
            primarycountryDropDownList.DataValueField = "country_name";
            primarycountryDropDownList.AppendDataBoundItems = true;
            primarycountryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Primary_Country"].ToString(), ""));
            primarycountryDropDownList.DataBind();



            pemailTextBox.Text = ds.Tables[0].Rows[0]["Primary_Email"].ToString();
            pemail2TextBox.Text = ds.Tables[0].Rows[0]["Primary_Email2"].ToString();

            DataSet dspm = Queries.LoadCountryWithCodePrimaryMobile(Session["ProfileID"].ToString());
            primarymobileDropDownList.DataSource = dspm;
            primarymobileDropDownList.DataTextField = "name";
            primarymobileDropDownList.DataValueField = "name";
            primarymobileDropDownList.AppendDataBoundItems = true;
            primarymobileDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Primary_CC"].ToString(), ""));
            primarymobileDropDownList.DataBind();

            pmobileTextBox.Text = ds.Tables[0].Rows[0]["Primary_Mobile"].ToString();

            DataSet dspalt = Queries.LoadCountryWithCodePrimaryAlt(ds.Tables[0].Rows[0]["Profile_Primary_Country"].ToString());// ProfileID);
            primaryalternateDropDownList.DataSource = dspalt;
            primaryalternateDropDownList.DataTextField = "name";
            primaryalternateDropDownList.DataValueField = "name";
            primaryalternateDropDownList.AppendDataBoundItems = true;
            primaryalternateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Primary_Alt_CC"].ToString(), ""));
            primaryalternateDropDownList.DataBind();
            palternateTextBox.Text = ds.Tables[0].Rows[0]["Primary_Alternate"].ToString();

            DataSet dspoff = Queries.LoadCountryWithCodePrimaryOffice(ds.Tables[0].Rows[0]["Profile_Primary_Country"].ToString());// ProfileID);
            pofficecodeDropDownList.DataSource = dspoff;
            pofficecodeDropDownList.DataTextField = "name";
            pofficecodeDropDownList.DataValueField = "name";
            pofficecodeDropDownList.AppendDataBoundItems = true;
            pofficecodeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Primary_office_cc"].ToString(), ""));
            pofficecodeDropDownList.DataBind();
            pofficenoTextBox.Text = ds.Tables[0].Rows[0]["Primary_office_num"].ToString();

            DataSet dsphome = Queries.LoadCountryWithCodePrimaryOffice(ds.Tables[0].Rows[0]["Profile_Primary_Country"].ToString());//(ProfileID);
            phomecodeDropDownList.DataSource = dsphome;
            phomecodeDropDownList.DataTextField = "name";
            phomecodeDropDownList.DataValueField = "name";
            phomecodeDropDownList.AppendDataBoundItems = true;
            phomecodeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Primary_home_cc"].ToString(), ""));
            phomecodeDropDownList.DataBind();
            phomenoTextBox.Text = ds.Tables[0].Rows[0]["Primary_home_num"].ToString();




            //secondary details
            DataSet dsstitle = Queries.LoadSecondarySalutation(Session["ProfileID"].ToString(), office);
            secondarytitleDropDownList.DataSource = dsstitle;
            secondarytitleDropDownList.DataTextField = "Salutation";
            secondarytitleDropDownList.DataValueField = "Salutation";
            secondarytitleDropDownList.AppendDataBoundItems = true;
            secondarytitleDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_secondary_Title"].ToString(), ""));
            secondarytitleDropDownList.DataBind();

            sfnameTextBox.Text = ds.Tables[0].Rows[0]["Profile_secondary_Fname"].ToString();
            slnameTextBox.Text = ds.Tables[0].Rows[0]["Profile_secondary_Lname"].ToString();
            secondarydobdatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_secondary_DOB"]);// Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_secondary_DOB"].ToString()).ToString("dd-MM-yyyy");
            secondaryAge.Text = ds.Tables[0].Rows[0]["Secondary_Age"].ToString();
            sdesignationTextBox.Text = ds.Tables[0].Rows[0]["Secondary_Designation"].ToString();

            DataSet dssnationality = Queries.LoadSecondaryNationality(Session["ProfileID"].ToString());
            secondarynationalityDropDownList.DataSource = dssnationality;
            secondarynationalityDropDownList.DataTextField = "Nationality_Name";
            secondarynationalityDropDownList.DataValueField = "Nationality_Name";
            secondarynationalityDropDownList.AppendDataBoundItems = true;
            secondarynationalityDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_secondary_Nationality"].ToString(), ""));
            secondarynationalityDropDownList.DataBind();

            DataSet dsscountry = Queries.LoadCountrySecondary(Session["ProfileID"].ToString());
            secondarycountryDropDownList.DataSource = dsscountry;
            secondarycountryDropDownList.DataTextField = "country_name";
            secondarycountryDropDownList.DataValueField = "country_name";
            secondarycountryDropDownList.AppendDataBoundItems = true;
            secondarycountryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_secondary_Country"].ToString(), ""));
            secondarycountryDropDownList.DataBind();



            semailTextBox.Text = ds.Tables[0].Rows[0]["secondary_Email"].ToString();
            semail2TextBox.Text = ds.Tables[0].Rows[0]["secondary_Email2"].ToString();

            DataSet dssm = Queries.LoadCountryWithCodeSecondaryMobile(ds.Tables[0].Rows[0]["Profile_secondary_Country"].ToString());// ProfileID);
            secondarymobileDropDownList.DataSource = dssm;
            secondarymobileDropDownList.DataTextField = "name";
            secondarymobileDropDownList.DataValueField = "name";
            secondarymobileDropDownList.AppendDataBoundItems = true;
            secondarymobileDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["secondary_CC"].ToString(), ""));
            secondarymobileDropDownList.DataBind();

            smobileTextBox.Text = ds.Tables[0].Rows[0]["secondary_Mobile"].ToString();

            DataSet dssalt = Queries.LoadCountryWithCodeSecondaryAlt(ds.Tables[0].Rows[0]["Profile_Secondary_Country"].ToString());// ProfileID);
            secondaryalternateDropDownList.DataSource = dssalt;
            secondaryalternateDropDownList.DataTextField = "name";
            secondaryalternateDropDownList.DataValueField = "name";
            secondaryalternateDropDownList.AppendDataBoundItems = true;
            secondaryalternateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["secondary_Alt_CC"].ToString(), ""));
            secondaryalternateDropDownList.DataBind();
            salternateTextBox.Text = ds.Tables[0].Rows[0]["secondary_Alternate"].ToString();


            DataSet dssoff = Queries.LoadCountryWithCodeSecondaryOffice(ds.Tables[0].Rows[0]["Profile_secondary_Country"].ToString());// ProfileID);
            sofficecodeDropDownList.DataSource = dssoff;
            sofficecodeDropDownList.DataTextField = "name";
            sofficecodeDropDownList.DataValueField = "name";
            sofficecodeDropDownList.AppendDataBoundItems = true;
            sofficecodeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Secondary_office_cc"].ToString(), ""));
            sofficecodeDropDownList.DataBind();
            sofficenoTextBox.Text = ds.Tables[0].Rows[0]["Secondary_office_num"].ToString();


            DataSet dsshome = Queries.LoadCountryWithCodeSecondaryAlt(ds.Tables[0].Rows[0]["Profile_secondary_Country"].ToString());//(ProfileID);
            shomecodeDropDownList.DataSource = dssoff;
            shomecodeDropDownList.DataTextField = "name";
            shomecodeDropDownList.DataValueField = "name";
            shomecodeDropDownList.AppendDataBoundItems = true;
            shomecodeDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Secondary_home_cc"].ToString(), ""));
            shomecodeDropDownList.DataBind();
            shomenoTextBox.Text = ds.Tables[0].Rows[0]["Secondary_home_num"].ToString();

            //address
            address1TextBox.Text = ds.Tables[0].Rows[0]["Profile_Address_Line1"].ToString();
            address2TextBox.Text = ds.Tables[0].Rows[0]["Profile_Address_Line2"].ToString();
            //stateTextBox.Text = ds.Tables[0].Rows[0]["Profile_Address_State"].ToString();
            cityTextBox.Text = ds.Tables[0].Rows[0]["Profile_Address_city"].ToString();
            pincodeTextBox.Text = ds.Tables[0].Rows[0]["Profile_Address_Postcode"].ToString();
            livingyrsTextBox.Text = ds.Tables[0].Rows[0]["Profile_NOY_Living_as_couple"].ToString();

            DataSet ds12 = Queries.LoadCountryName();
            AddCountryDropDownList.DataSource = ds12;
            AddCountryDropDownList.DataTextField = "country_name";
            AddCountryDropDownList.DataValueField = "country_name";
            AddCountryDropDownList.AppendDataBoundItems = true;
            AddCountryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Address_Country"].ToString(), ""));
            AddCountryDropDownList.DataBind();

            //state Name
            DataSet ds1222 = Queries.LoadStateName(Session["ProfileID"].ToString(), AddCountryDropDownList.SelectedItem.Text);
            StateDropDownList.DataSource = ds1222;
            StateDropDownList.DataTextField = "State_Name";
            StateDropDownList.DataValueField = "State_Name";
            StateDropDownList.AppendDataBoundItems = true;
            StateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Address_State"].ToString(), ""));
            StateDropDownList.DataBind();


            DataSet dsemploy = Queries.LoadEmploymentStatusNotInProfile(Session["ProfileID"].ToString());
            employmentstatusDropDownList.DataSource = dsemploy;
            employmentstatusDropDownList.DataTextField = "Name";
            employmentstatusDropDownList.DataValueField = "Name";
            employmentstatusDropDownList.AppendDataBoundItems = true;
            employmentstatusDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Employment_status"].ToString(), ""));
            employmentstatusDropDownList.DataBind();


            DataSet dsmart = Queries.LoadMaritalStatusNotInProfile(Session["ProfileID"].ToString());
            maritalstatusDropDownList.DataSource = dsmart;
            maritalstatusDropDownList.DataTextField = "MaritalStatus";
            maritalstatusDropDownList.DataValueField = "MaritalStatus";
            maritalstatusDropDownList.AppendDataBoundItems = true;
            maritalstatusDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Profile_Marital_status"].ToString(), ""));
            maritalstatusDropDownList.DataBind();

            
            DataSet dssp1title = Queries.LoadSub_Profile1Salutation(Session["ProfileID"].ToString(), office);
            sp1titleDropDownList.DataSource = dssp1title;
            sp1titleDropDownList.DataTextField = "Salutation";
            sp1titleDropDownList.DataValueField = "Salutation";
            sp1titleDropDownList.AppendDataBoundItems = true;
            sp1titleDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile1_Title"].ToString(), ""));
            sp1titleDropDownList.DataBind();

            sp1fnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile1_Fname"].ToString();
            sp1lnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile1_Lname"].ToString();
            //   sp1dobdatepicker.Text =Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile1_DOB"].ToString()).ToString("dd-MM-yyyy");
            sp1dobdatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile1_DOB"]);
            subProfile1Age.Text = ds.Tables[0].Rows[0]["Sub_Profile1_Age"].ToString();

            DataSet dssp1nationality = Queries.LoadSub_Profile1Nationality(Session["ProfileID"].ToString());
            sp1nationalityDropDownList.DataSource = dssp1nationality;
            sp1nationalityDropDownList.DataTextField = "Nationality_Name";
            sp1nationalityDropDownList.DataValueField = "Nationality_Name";
            sp1nationalityDropDownList.AppendDataBoundItems = true;
            sp1nationalityDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile1_Nationality"].ToString(), ""));
            sp1nationalityDropDownList.DataBind();

            DataSet dssp1country = Queries.LoadCountrySP1(Session["ProfileID"].ToString());
            sp1countryDropDownList.DataSource = dssp1country;
            sp1countryDropDownList.DataTextField = "country_name";
            sp1countryDropDownList.DataValueField = "country_name";
            sp1countryDropDownList.AppendDataBoundItems = true;
            sp1countryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile1_Country"].ToString(), ""));
            sp1countryDropDownList.DataBind();



            sp1pemailTextBox.Text = ds.Tables[0].Rows[0]["Subprofile1_Email"].ToString();
            sp1pemail2TextBox.Text = ds.Tables[0].Rows[0]["Subprofile1_Email2"].ToString();

            DataSet dssp1m = Queries.LoadCountryWithCodeSP1Mobile(ds.Tables[0].Rows[0]["Sub_Profile1_Country"].ToString());// ProfileID);
            sp1mobileDropDownList.DataSource = dssp1m;
            sp1mobileDropDownList.DataTextField = "name";
            sp1mobileDropDownList.DataValueField = "name";
            sp1mobileDropDownList.AppendDataBoundItems = true;
            sp1mobileDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile1_CC"].ToString(), ""));
            sp1mobileDropDownList.DataBind();

            sp1mobileTextBox.Text = ds.Tables[0].Rows[0]["Subprofile1_Mobile"].ToString();

            DataSet dssp1alt = Queries.LoadCountryWithCodeSP1Alt(ds.Tables[0].Rows[0]["Sub_Profile1_Country"].ToString());// ProfileID);
            sp1alternateDropDownList.DataSource = dssp1alt;
            sp1alternateDropDownList.DataTextField = "name";
            sp1alternateDropDownList.DataValueField = "name";
            sp1alternateDropDownList.AppendDataBoundItems = true;
            sp1alternateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile1_Alt_CC"].ToString(), ""));
            sp1alternateDropDownList.DataBind();
            sp1alternateTextBox.Text = ds.Tables[0].Rows[0]["Subprofile1_Alternate"].ToString();



            DataSet dssp2title = Queries.LoadSub_Profile2Salutation(Session["ProfileID"].ToString(), office);
            sp2titleDropDownList.DataSource = dssp2title;
            sp2titleDropDownList.DataTextField = "Salutation";
            sp2titleDropDownList.DataValueField = "Salutation";
            sp2titleDropDownList.AppendDataBoundItems = true;
            sp2titleDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile2_Title"].ToString(), ""));
            sp2titleDropDownList.DataBind();

            sp2fnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile2_Fname"].ToString();
            sp2lnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile2_Lname"].ToString();
            //   sp2dobdatepicker.Text = Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile2_DOB"].ToString()).ToString("dd-MM-yyyy");
            sp2dobdatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile2_DOB"]);
            subProfile2Age.Text = ds.Tables[0].Rows[0]["Sub_Profile2_Age"].ToString();

            DataSet dssp2nationality = Queries.LoadSub_Profile2Nationality(Session["ProfileID"].ToString());
            sp2nationalityDropDownList.DataSource = dssp2nationality;
            sp2nationalityDropDownList.DataTextField = "Nationality_Name";
            sp2nationalityDropDownList.DataValueField = "Nationality_Name";
            sp2nationalityDropDownList.AppendDataBoundItems = true;
            sp2nationalityDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile2_Nationality"].ToString(), ""));
            sp2nationalityDropDownList.DataBind();

            DataSet dssp2country = Queries.LoadCountrySP2(Session["ProfileID"].ToString());
            sp2countryDropDownList.DataSource = dssp2country;
            sp2countryDropDownList.DataTextField = "country_name";
            sp2countryDropDownList.DataValueField = "country_name";
            sp2countryDropDownList.AppendDataBoundItems = true;
            sp2countryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile2_Country"].ToString(), ""));
            sp2countryDropDownList.DataBind();
            sp2pemailTextBox.Text = ds.Tables[0].Rows[0]["Subprofile2_Email"].ToString();
            sp2pemail2TextBox.Text = ds.Tables[0].Rows[0]["Subprofile2_Email2"].ToString();

            DataSet dssp2m = Queries.LoadCountryWithCodeSP2Mobile(ds.Tables[0].Rows[0]["Sub_Profile2_Country"].ToString());// ProfileID);
            sp2mobileDropDownList.DataSource = dssp2m;
            sp2mobileDropDownList.DataTextField = "name";
            sp2mobileDropDownList.DataValueField = "name";
            sp2mobileDropDownList.AppendDataBoundItems = true;
            sp2mobileDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile2_CC"].ToString(), ""));
            sp2mobileDropDownList.DataBind();

            sp2mobileTextBox.Text = ds.Tables[0].Rows[0]["Subprofile2_Mobile"].ToString();

            DataSet dssp2alt = Queries.LoadCountryWithCodeSP2Alt(ds.Tables[0].Rows[0]["Sub_Profile2_Country"].ToString());// ProfileID);
            sp2alternateDropDownList.DataSource = dssp2alt;
            sp2alternateDropDownList.DataTextField = "name";
            sp2alternateDropDownList.DataValueField = "name";
            sp2alternateDropDownList.AppendDataBoundItems = true;
            sp2alternateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile2_Alt_CC"].ToString(), ""));
            sp2alternateDropDownList.DataBind();
            sp2alternateTextBox.Text = ds.Tables[0].Rows[0]["Subprofile2_Alternate"].ToString();


            //sub profile 3///
            DataSet dssp3title = Queries.LoadSub_Profile3Salutation(Session["ProfileID"].ToString(), office);
            sp3titleDropDownList.DataSource = dssp3title;
            sp3titleDropDownList.DataTextField = "Salutation";
            sp3titleDropDownList.DataValueField = "Salutation";
            sp3titleDropDownList.AppendDataBoundItems = true;
            sp3titleDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile3_Title"].ToString(), ""));
            sp3titleDropDownList.DataBind();

            sp3fnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile3_Fname"].ToString();
            sp3lnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile3_Lname"].ToString();

            //sp3dobdatepicker.Text = Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile3_DOB"].ToString()).ToString("dd-MM-yyyy");
            sp3dobdatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile3_DOB"]);


            subProfile3Age.Text = ds.Tables[0].Rows[0]["Sub_Profile3_Age"].ToString();

            DataSet dssp3nationality = Queries.LoadSub_Profile3Nationality(Session["ProfileID"].ToString());
            sp3nationalityDropDownList.DataSource = dssp3nationality;
            sp3nationalityDropDownList.DataTextField = "Nationality_Name";
            sp3nationalityDropDownList.DataValueField = "Nationality_Name";
            sp3nationalityDropDownList.AppendDataBoundItems = true;
            sp3nationalityDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile3_Nationality"].ToString(), ""));
            sp3nationalityDropDownList.DataBind();

            DataSet dssp3country = Queries.LoadCountrySP3(Session["ProfileID"].ToString());
            sp3countryDropDownList.DataSource = dssp3country;
            sp3countryDropDownList.DataTextField = "country_name";
            sp3countryDropDownList.DataValueField = "country_name";
            sp3countryDropDownList.AppendDataBoundItems = true;
            sp3countryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile3_Country"].ToString(), ""));
            sp3countryDropDownList.DataBind();
            sp3pemailTextBox.Text = ds.Tables[0].Rows[0]["Subprofile3_Email"].ToString();
            sp3pemail2TextBox.Text = ds.Tables[0].Rows[0]["Subprofile3_Email2"].ToString();

            DataSet dssp3m = Queries.LoadCountryWithCodeSP3Mobile(ds.Tables[0].Rows[0]["Sub_Profile3_Country"].ToString());// ProfileID);
            sp3mobileDropDownList.DataSource = dssp3m;
            sp3mobileDropDownList.DataTextField = "name";
            sp3mobileDropDownList.DataValueField = "name";
            sp3mobileDropDownList.AppendDataBoundItems = true;
            sp3mobileDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile3_CC"].ToString(), ""));
            sp3mobileDropDownList.DataBind();

            sp3mobileTextBox.Text = ds.Tables[0].Rows[0]["Subprofile3_Mobile"].ToString();

            DataSet dssp3alt = Queries.LoadCountryWithCodeSP3Alt(ds.Tables[0].Rows[0]["Sub_Profile3_Country"].ToString());// ProfileID);
            sp3alternateDropDownList.DataSource = dssp3alt;
            sp3alternateDropDownList.DataTextField = "name";
            sp3alternateDropDownList.DataValueField = "name";
            sp3alternateDropDownList.AppendDataBoundItems = true;
            sp3alternateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile3_Alt_CC"].ToString(), ""));
            sp3alternateDropDownList.DataBind();
            sp3alternateTextBox.Text = ds.Tables[0].Rows[0]["Subprofile3_Alternate"].ToString();
            // end//


            //// sub profile 4//
            DataSet dssp4title = Queries.LoadSub_Profile3Salutation(Session["ProfileID"].ToString(), office);
            sp4titleDropDownList.DataSource = dssp4title;
            sp4titleDropDownList.DataTextField = "Salutation";
            sp4titleDropDownList.DataValueField = "Salutation";
            sp4titleDropDownList.AppendDataBoundItems = true;
            sp4titleDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile4_Title"].ToString(), ""));
            sp4titleDropDownList.DataBind();

            sp4fnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile4_Fname"].ToString();
            sp4lnameTextBox.Text = ds.Tables[0].Rows[0]["Sub_Profile4_Lname"].ToString();

            //  sp4dobdatepicker.Text = Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile4_DOB"].ToString()).ToString("dd-MM-yyyy");
            sp4dobdatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile4_DOB"]);



            subProfile4Age.Text = ds.Tables[0].Rows[0]["Sub_Profile4_Age"].ToString();

            DataSet dssp4nationality = Queries.LoadSub_Profile3Nationality(Session["ProfileID"].ToString());
            sp4nationalityDropDownList.DataSource = dssp4nationality;
            sp4nationalityDropDownList.DataTextField = "Nationality_Name";
            sp4nationalityDropDownList.DataValueField = "Nationality_Name";
            sp4nationalityDropDownList.AppendDataBoundItems = true;
            sp4nationalityDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile4_Nationality"].ToString(), ""));
            sp4nationalityDropDownList.DataBind();

            DataSet dssp4country = Queries.LoadCountrySP3(Session["ProfileID"].ToString());
            sp4countryDropDownList.DataSource = dssp4country;
            sp4countryDropDownList.DataTextField = "country_name";
            sp4countryDropDownList.DataValueField = "country_name";
            sp4countryDropDownList.AppendDataBoundItems = true;
            sp4countryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Sub_Profile4_Country"].ToString(), ""));
            sp4countryDropDownList.DataBind();
            sp4pemailTextBox.Text = ds.Tables[0].Rows[0]["Subprofile4_Email"].ToString();
            sp4pemail2TextBox.Text = ds.Tables[0].Rows[0]["Subprofile4_Email2"].ToString();

            DataSet dssp4m = Queries.LoadCountryWithCodeSP3Mobile(ds.Tables[0].Rows[0]["Sub_Profile4_Country"].ToString());// ProfileID);
            sp4mobileDropDownList.DataSource = dssp4m;
            sp4mobileDropDownList.DataTextField = "name";
            sp4mobileDropDownList.DataValueField = "name";
            sp4mobileDropDownList.AppendDataBoundItems = true;
            sp4mobileDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile4_CC"].ToString(), ""));
            sp4mobileDropDownList.DataBind();

            sp4mobileTextBox.Text = ds.Tables[0].Rows[0]["Subprofile4_Mobile"].ToString();


            DataSet dssp4alt = Queries.LoadCountryWithCodeSP3Alt(ds.Tables[0].Rows[0]["Sub_Profile4_Country"].ToString());// ProfileID);
            sp4alternateDropDownList.DataSource = dssp4alt;
            sp4alternateDropDownList.DataTextField = "name";
            sp4alternateDropDownList.DataValueField = "name";
            sp4alternateDropDownList.AppendDataBoundItems = true;
            sp4alternateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Subprofile4_Alt_CC"].ToString(), ""));
            sp4alternateDropDownList.DataBind();
            sp4alternateTextBox.Text = ds.Tables[0].Rows[0]["Subprofile4_Alternate"].ToString();
            ////end//


            resortTextBox.Text = ds.Tables[0].Rows[0]["Profile_Stay_Resort_Name"].ToString();

            roomnoTextBox.Text = ds.Tables[0].Rows[0]["Profile_Stay_Resort_Room_Number"].ToString();
            arrivaldatedatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Stay_Arrival_Date"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Stay_Arrival_Date"]).ToString("dd-MM-yyyy");
            departuredatedatepicker.Text = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Stay_Departure_Date"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Stay_Departure_Date"]).ToString("dd-MM-yyyy");
            tourdatedatepicker.Text = String.Format("{0:yyyy-MM-dd}", ds.Tables[0].Rows[0]["Tour_Details_Tour_Date"]);// Convert.ToDateTime(ds.Tables[0].Rows[0]["Tour_Details_Tour_Date"]).ToShortDateString();
            timeinTextBox.Text = ds.Tables[0].Rows[0]["Tour_Details_Sales_Deck_Check_In"].ToString();
            timeoutTextBox.Text = ds.Tables[0].Rows[0]["Tour_Details_Sales_Deck_Check_Out"].ToString();
            inpriceTextBox.Text = ds.Tables[0].Rows[0]["Tour_Details_Taxi_In_Price"].ToString();
            inrefTextBox.Text = ds.Tables[0].Rows[0]["Tour_Details_Taxi_In_Ref"].ToString();
            outpriceTextBox.Text = ds.Tables[0].Rows[0]["Tour_Details_Taxi_Out_Price"].ToString();
            outrefTextBox.Text = ds.Tables[0].Rows[0]["Tour_Details_Taxi_Out_Ref"].ToString();

            cadd1TextBox.Text = ds.Tables[0].Rows[0]["Address_Line1"].ToString();
            cadd2TextBox.Text = ds.Tables[0].Rows[0]["Address_Line2"].ToString();
            DataSet dscor12 = Queries.LoadCountryName();
            ccountryDropDownList.DataSource = dscor12;
            ccountryDropDownList.DataTextField = "country_name";
            ccountryDropDownList.DataValueField = "country_name";
            ccountryDropDownList.AppendDataBoundItems = true;
            ccountryDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Address_Country"].ToString(), ""));
            ccountryDropDownList.DataBind();


            DataSet dscor1222 = Queries.LoadStateName(Session["ProfileID"].ToString(), ccountryDropDownList.SelectedItem.Text);
            cstateDropDownList.DataSource = dscor1222;
            cstateDropDownList.DataTextField = "State_Name";
            cstateDropDownList.DataValueField = "State_Name";
            cstateDropDownList.AppendDataBoundItems = true;
            cstateDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Address_State"].ToString(), ""));
            cstateDropDownList.DataBind();

            ccityTextBox.Text = ds.Tables[0].Rows[0]["Address_city"].ToString();
            cpincodeTextBox.Text = ds.Tables[0].Rows[0]["Address_Postcode"].ToString();

            DataSet dsqual = Queries.LoadGuestStatusInProfile(Session["ProfileID"].ToString());
            guestatusDropDownList.DataSource = dsqual;
            guestatusDropDownList.DataTextField = "Guest_Status_name";
            guestatusDropDownList.DataValueField = "Guest_Status_name";
            guestatusDropDownList.AppendDataBoundItems = true;
            guestatusDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Tour_Details_Guest_Status"].ToString(), ""));
            guestatusDropDownList.DataBind();

            DataSet dstour = Queries.LoadSalesRepsInProfile1(office, Session["ProfileID"].ToString(), VenueDropDownList.SelectedItem.Text);
            toursalesrepDropDownList.DataSource = dstour;
            toursalesrepDropDownList.DataTextField = "Sales_Rep_Name";
            toursalesrepDropDownList.DataValueField = "Sales_Rep_Name";
            toursalesrepDropDownList.AppendDataBoundItems = true;
            toursalesrepDropDownList.Items.Insert(0, new ListItem(ds.Tables[0].Rows[0]["Tour_Details_Guest_Sales_Rep"].ToString(), ""));
            toursalesrepDropDownList.DataBind();

            contsalesrepTextBox.Text = dsct.Tables[0].Rows[0]["Sales_Rep"].ToString();
            //   load TO based on office


            DataSet dsto = Queries.LoadTOManagerOnVenue(office, VenueDropDownList.SelectedItem.Text);
            TOManagerDropDownList.DataSource = dsto;
            TOManagerDropDownList.DataTextField = "TO_Manager_Name";
            TOManagerDropDownList.DataValueField = "TO_Manager_Name";
            TOManagerDropDownList.AppendDataBoundItems = true;
            TOManagerDropDownList.Items.Insert(0, new ListItem(dsct.Tables[0].Rows[0]["TO_Manager"].ToString(), ""));
            TOManagerDropDownList.DataBind();


            DataSet dsbu = Queries.LoadButtonUpOnVenue(office, VenueDropDownList.SelectedItem.Text);
            ButtonUpDropDownList.DataSource = dsbu;
            ButtonUpDropDownList.DataTextField = "ButtonUp_Name";
            ButtonUpDropDownList.DataValueField = "ButtonUp_Name";
            ButtonUpDropDownList.AppendDataBoundItems = true;
            ButtonUpDropDownList.Items.Insert(0, new ListItem(dsct.Tables[0].Rows[0]["ButtonUp_Officer"].ToString(), ""));
            // ButtonUpDropDownList.Items.Insert(0, new ListItem("", ""));
            ButtonUpDropDownList.DataBind();



            DataSet dsdstatus = Queries.contractdealstatus(sContractdetailsID);       
            dealstatusDropDownList.DataSource = dsdstatus;
            dealstatusDropDownList.DataTextField = "Status_Type";
            dealstatusDropDownList.DataValueField = "Status_Type";
            dealstatusDropDownList.AppendDataBoundItems = true;
            dealstatusDropDownList.Items.Insert(0, new ListItem(dsct.Tables[0].Rows[0]["DealStatus"].ToString(), ""));
            dealstatusDropDownList.DataBind();

            int schange = Queries.Status_ChangeDetailsExists(sContractdetailsID);
            if (schange == 1)
            {
                DataSet dsstatchange = Queries.LoadStatus_ChangeDetails(sContractdetailsID);
                DataSet dscantype = Queries.LoadCancelTypeother(sContractdetailsID);
                canceltypeDropDownList.DataSource = dscantype;
                canceltypeDropDownList.DataTextField = "CT_Type";
                canceltypeDropDownList.DataValueField = "CT_Type";
                canceltypeDropDownList.AppendDataBoundItems = true;
                canceltypeDropDownList.Items.Insert(0, new ListItem(dsstatchange.Tables[0].Rows[0]["SC_Cancel_Type"].ToString(), ""));
                canceltypeDropDownList.DataBind();

                canvgDropDownList.Items.Add(dsstatchange.Tables[0].Rows[0]["SC_Cancel_Group_Venue"].ToString());
                canvgDropDownList.Items.Add("Odyssey");
                canvgDropDownList.Items.Add("Member Relations");
                canvgDropDownList.Items.Add(VenueDropDownList.SelectedItem.Text);

                DataSet dscanreason = Queries.LoadCancel_reasonother(sContractdetailsID);
                canreasonDropDownList.DataSource = dscanreason;
                canreasonDropDownList.DataTextField = "CR_Reasons";
                canreasonDropDownList.DataValueField = "CR_Reasons";
                canreasonDropDownList.AppendDataBoundItems = true;
                canreasonDropDownList.Items.Insert(0, new ListItem(dsstatchange.Tables[0].Rows[0]["SC_Cancel_Reason"].ToString(), ""));
                canreasonDropDownList.DataBind();
                cancommentTextBox.Text = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Comment"].ToString();



            }
            else
            {


                DataSet dsstatchange = Queries.LoadStatus_ChangeDetails(sContractdetailsID);
                DataSet dscantype = Queries.LoadCancel_Type();
                canceltypeDropDownList.DataSource = dscantype;
                canceltypeDropDownList.DataTextField = "CT_Type";
                canceltypeDropDownList.DataValueField = "CT_Type";
                canceltypeDropDownList.AppendDataBoundItems = true;
                canceltypeDropDownList.Items.Insert(0, new ListItem("", ""));
                canceltypeDropDownList.DataBind();

                canvgDropDownList.Items.Add(" ");
                canvgDropDownList.Items.Add("Odyssey");
                canvgDropDownList.Items.Add("Member Relations");
                canvgDropDownList.Items.Add(VenueDropDownList.SelectedItem.Text);

                DataSet dscanreason = Queries.LoadCancel_reason();
                canreasonDropDownList.DataSource = dscanreason;
                canreasonDropDownList.DataTextField = "CR_Reasons";
                canreasonDropDownList.DataValueField = "CR_Reasons";
                canreasonDropDownList.AppendDataBoundItems = true;
                canreasonDropDownList.Items.Insert(0, new ListItem("", ""));
                canreasonDropDownList.DataBind();
                cancommentTextBox.Text = "";

            }

            if (dsct.Tables[0].Rows[0]["Contract_group"].ToString() == "")
            {
                DataSet dscontgrp = Queries.LoadContractGroup();
                contractgroupDropDownList.DataSource = dscontgrp;
                contractgroupDropDownList.DataTextField = "Contract_Group_Name";
                contractgroupDropDownList.DataValueField = "Contract_Group_Name";
                contractgroupDropDownList.AppendDataBoundItems = true;
                contractgroupDropDownList.Items.Insert(0, new ListItem("", ""));
                contractgroupDropDownList.DataBind();
            }
            else
            {
                DataSet dscontgrp = Queries.LoadContractGroupOnID(sContractdetailsID);
                contractgroupDropDownList.DataSource = dscontgrp;
                contractgroupDropDownList.DataTextField = "Contract_Group_Name";
                contractgroupDropDownList.DataValueField = "Contract_Group_Name";
                contractgroupDropDownList.AppendDataBoundItems = true;
                contractgroupDropDownList.Items.Insert(0, new ListItem(dsct.Tables[0].Rows[0]["Contract_group"].ToString(), ""));
                contractgroupDropDownList.DataBind();
            }
            DataSet dscontvn = Queries.LoadContractVenueOnID(dsct.Tables[0].Rows[0]["Contract_group"].ToString(),VenueDropDownList.SelectedItem.Text, sContractdetailsID);
            contractvenueDropDownList.DataSource = dscontvn;
            contractvenueDropDownList.DataTextField = "Contract_Venue_Name";
            contractvenueDropDownList.DataValueField = "Contract_Venue_Name";
            contractvenueDropDownList.AppendDataBoundItems = true;
            contractvenueDropDownList.Items.Insert(0, new ListItem(dsct.Tables[0].Rows[0]["Contract_Venue"].ToString(), ""));
            contractvenueDropDownList.DataBind();


         
            DataSet dslbu = Queries.LoadLoanBUOnVenue(office, VenueDropDownList.SelectedItem.Text);// LoadButtonUp(office);
            LoanBUDropDownList.DataSource = dslbu;
            LoanBUDropDownList.DataTextField = "ButtonUp_Name";
            LoanBUDropDownList.DataValueField = "ButtonUp_Name";
            LoanBUDropDownList.AppendDataBoundItems = true;
            LoanBUDropDownList.Items.Insert(0, new ListItem(dsct.Tables[0].Rows[0]["Loan_BU_officer"].ToString(), ""));
            LoanBUDropDownList.DataBind();



            dealdateTextBox.Text = String.Format("{0:dd-MM-yyyy}", dsct.Tables[0].Rows[0]["DealRegistered_Date"]);

            ReturnHomeDateTextBox.Text  = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Returnhomedate"]);
           

            //Contract tab
            //load contract type
            contracttypeTextBox.Text = dsct.Tables[0].Rows[0]["ContractType"].ToString();
            CanxContractNoTextBox.Text = dsct.Tables[0].Rows[0]["CanxContractNo"].ToString();
            string conttypevalue = dsct.Tables[0].Rows[0]["ContractType"].ToString();
            string Finance_Details = dsct.Tables[0].Rows[0]["Finance_Details"].ToString();
         //   LoanBUOfficerTextBox.Text = dsct.Tables[0].Rows[0]["Loan_BU_officer"].ToString();

            contractcommentTextBox.Text = dsct.Tables[0].Rows[0]["Contract_comment"].ToString();


            if (dsct.Tables[0].Rows[0]["MCWaiver"].ToString() == "No" || dsct.Tables[0].Rows[0]["MCWaiver"].ToString() == "NO")
            {
                mcRadioButtonList.Checked = false;
            }
            else if (dsct.Tables[0].Rows[0]["MCWaiver"].ToString() == "Yes" || dsct.Tables[0].Rows[0]["MCWaiver"].ToString() == "YES")

            {
                mcRadioButtonList.Checked = true;
            }
            MCFeesTextBox.Text = dsct.Tables[0].Rows[0]["MC_Charges"].ToString();
            MCdateTextBox.Text = String.Format("{0:dd-MM-yyyy}", dsct.Tables[0].Rows[0]["First_MC_Payable_Date"]);//.ToString();
            memberfeeTextBox.Text = dsct.Tables[0].Rows[0]["MemberFee"].ToString();
            memcgstTextBox.Text = dsct.Tables[0].Rows[0]["MemberCGST"].ToString();
            memsgstTextBox.Text = dsct.Tables[0].Rows[0]["MembersGST"].ToString();
            adharcardTextBox.Text = dsct.Tables[0].Rows[0]["Adhar_Card"].ToString();
            pancardnoTextBox.Text = dsct.Tables[0].Rows[0]["Pan_Card"].ToString();
            companypanoTextBox.Text = dsct.Tables[0].Rows[0]["Company_PanNo"].ToString();
            gstinTextBox.Text = dsct.Tables[0].Rows[0]["Client_GSTIN"].ToString();
            contractremarkTextBox.Text = dsct.Tables[0].Rows[0]["Contract_Remark"].ToString();

            string actbu = dsct.Tables[0].Rows[0]["bu_A6"].ToString();

            if (actbu == "" || actbu == null)
            {
                BUCheckBox.Checked = false;

            }
            else if (actbu == "Yes")
            {
                BUCheckBox.Checked = true;

            }

            else if (actbu == "No")
            {
                BUCheckBox.Checked = false;

            }
            string actup = dsct.Tables[0].Rows[0]["Updowngrade"].ToString();
            if (actup == "" || actup == null)
            {
                upCheckBox.Checked = false;
                downCheckBox.Checked = false;
            }
            else if (actup == "Upgrade")
            {
                upCheckBox.Checked = true;
                downCheckBox.Checked = false;
            }
            else if (actup == "Downgrade")
            {
                upCheckBox.Checked = false;
                downCheckBox.Checked = true;
            }

            //load contractteam details
            DataSet dscteam = Queries.LoadContractTeamDetails(sContractdetailsID);
            if (dscteam.Tables[0].Rows.Count == 0)
            {

            }
            else
            {
                Session["Rep_report"] = dscteam.Tables[0].Rows[0]["Rep_report"].ToString();
                Session["To_report"] = dscteam.Tables[0].Rows[0]["To_report"].ToString();
                Session["SMS_Update"] = dscteam.Tables[0].Rows[0]["SMS_Update"].ToString();
            }

            if (Session["Rep_report"].ToString() == "" || Session["Rep_report"].ToString() == null)
            {
                repreportCheckBox.Checked = false;

            }
            else if (Session["Rep_report"].ToString() == "Yes")
            {
                repreportCheckBox.Checked = true;

            }
            else if (Session["Rep_report"].ToString() == "No")
            {
                repreportCheckBox.Checked = false;

            }

            if (Session["To_report"].ToString() == "" || Session["To_report"].ToString() == null)
            {
                toreportCheckBox.Checked = false;

            }
            else if (Session["To_report"].ToString() == "Yes")
            {
                toreportCheckBox.Checked = true;

            }
            else if (Session["To_report"].ToString() == "No")
            {
                toreportCheckBox.Checked = false;

            }

            if (Session["SMS_Update"].ToString() == "" || Session["SMS_Update"].ToString() == null)
            {
                smsCheckBox.Checked = false;

            }
            else if (Session["SMS_Update"].ToString() == "Yes")
            {
                smsCheckBox.Checked = true;

            }
            else if (Session["SMS_Update"].ToString() == "No")
            {
                smsCheckBox.Checked = false;

            }

            
            //load finance details


            DataSet dsptsf = Queries.LoadFinanceContractDetails(sContractdetailsID);// ContractdetailsIDTextBox.Text);// contractno);
            if (dsptsf.Tables[0].Rows.Count == 0)
            {
                financeradiobuttonlist.SelectedIndex = -1;
              /*  DataSet dscur = Queries.LoadFinanceOffice(office);// officeTextBox.Text);
                currencyDropDownList.DataSource = dscur;
                currencyDropDownList.DataTextField = "Finance_Currency_Name";
                currencyDropDownList.DataValueField = "Finance_Currency_Name";
                currencyDropDownList.AppendDataBoundItems = true;
                currencyDropDownList.Items.Insert(0, new ListItem("", ""));
                currencyDropDownList.DataBind();*/


                DataSet dscur = Queries.LoadCurrencyByCountry(VenueCountryDropDownList.SelectedItem.Text);// officeTextBox.Text);
                currencyDropDownList.DataSource = dscur;
                currencyDropDownList.DataTextField = "Currency_Value";
                currencyDropDownList.DataValueField = "Currency_Value";
                currencyDropDownList.AppendDataBoundItems = true;
                currencyDropDownList.Items.Insert(0, new ListItem("", ""));
                currencyDropDownList.DataBind();


                totalfinpriceIntaxTextBox.Text = "";
                intialdeppercentTextBox.Text = "";
                balinitialdepamtTextBox.Text = "";
                baldepamtTextBox.Text = "";
                regcollectiontermTextBox.Text = "";
                regcollamtTextBox.Text = "";
                baladepamtdateTextBox.Text = "";
              //  oldLoanAgreementTextBox.Text = "";
                woldLoanAgreementTextBox.Text = "";
                PayMethodDropDownList.SelectedIndex = 0;
                AffiliationvalueTextBox.Text = "";
                NoinstallmentTextBox.Text = "";
                installmentamtTextBox.Text = "";
                balamtpayableTextBox.Text = "";
                financemethodDropDownList.SelectedIndex = 0;
                FinancenoTextBox.Text = "";
                finmonthTextBox.Text = "";
                noemiTextBox.Text = "";
                emiamtTextBox.Text = "";
                findocfeeTextBox.Text = "";
                isgtrateTextBox.Text = "";
                igstamtTextBox.Text = "";
                interestrateTextBox.Text = "";
                foldloanamountTextBox.Text = "";
                eurorateTextBox.Text = "";
                loanamtINEuroTextBox.Text = "";
                monthlyPremiumprotectionplanTextBox.Text = "";
                openLoanAgreementTextBox.Text = "";

            }
            else
            {
                financeradiobuttonlist.SelectedValue = dsptsf.Tables[0].Rows[0]["Finance_Method"].ToString();
                /*  DataSet dscur = Queries.currencyfinancedetails(sContractdetailsID, office);// ContractdetailsIDTextBox.Text, officeTextBox.Text);
                  currencyDropDownList.DataSource = dscur;
                  currencyDropDownList.DataTextField = "Finance_Currency_Name";
                  currencyDropDownList.DataValueField = "Finance_Currency_Name";
                  currencyDropDownList.AppendDataBoundItems = true;
                  currencyDropDownList.Items.Insert(0, new ListItem(dsptsf.Tables[0].Rows[0]["currency"].ToString(), ""));
                  currencyDropDownList.DataBind();*/


                DataSet dscur = Queries.currencyfinancedetailsbycountry(sContractdetailsID, VenueCountryDropDownList.SelectedItem.Text);

                currencyDropDownList.DataSource = dscur;
                currencyDropDownList.DataTextField = "Currency_Value";
                currencyDropDownList.DataValueField = "Currency_Value";
                currencyDropDownList.AppendDataBoundItems = true;
                currencyDropDownList.Items.Insert(0, new ListItem(dsptsf.Tables[0].Rows[0]["currency"].ToString(), ""));
                currencyDropDownList.DataBind();

                totalfinpriceIntaxTextBox.Text = dsptsf.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                intialdeppercentTextBox.Text = dsptsf.Tables[0].Rows[0]["Initial_Deposit_Percent"].ToString();
                balinitialdepamtTextBox.Text = dsptsf.Tables[0].Rows[0]["Initial_Deposit_Balance"].ToString();
                baldepamtTextBox.Text = dsptsf.Tables[0].Rows[0]["Balance_Payable"].ToString();
                regcollectiontermTextBox.Text = dsptsf.Tables[0].Rows[0]["Registry_Collection_Term"].ToString();
                regcollamtTextBox.Text = dsptsf.Tables[0].Rows[0]["Registry_Collection_Amt"].ToString();
                baladepamtdateTextBox.Text = String.Format("{0:dd-MM-yyyy}", dsptsf.Tables[0].Rows[0]["BalanceDeposit_Date"]);             
                    woldLoanAgreementTextBox.Text = dsptsf.Tables[0].Rows[0]["Old_Loan_AgreementNo"].ToString();
             
                DataSet dspym = Queries.paymethodfinancedetails(sContractdetailsID, office);
                PayMethodDropDownList.DataSource = dspym;
                PayMethodDropDownList.DataTextField = "pay_method_name";
                PayMethodDropDownList.DataValueField = "pay_method_name";
                PayMethodDropDownList.AppendDataBoundItems = true;
                PayMethodDropDownList.Items.Insert(0, new ListItem(dsptsf.Tables[0].Rows[0]["Payment_Method"].ToString(), ""));
                PayMethodDropDownList.DataBind();
                AffiliationvalueTextBox.Text = dsptsf.Tables[0].Rows[0]["Affiliate_Type"].ToString();
                NoinstallmentTextBox.Text = dsptsf.Tables[0].Rows[0]["No_Installments"].ToString();
                installmentamtTextBox.Text = dsptsf.Tables[0].Rows[0]["Installment_Amount"].ToString();
                balamtpayableTextBox.Text = dsptsf.Tables[0].Rows[0]["Bal_Amount_Payable"].ToString();
                DataSet dsfin = Queries.financemethodfinancedetails(sContractdetailsID, office);
                financemethodDropDownList.DataSource = dsfin;
                financemethodDropDownList.DataTextField = "Finance_Name";
                financemethodDropDownList.DataValueField = "Finance_Name";
                financemethodDropDownList.AppendDataBoundItems = true;
                financemethodDropDownList.Items.Insert(0, new ListItem(dsptsf.Tables[0].Rows[0]["Finance_Type"].ToString(), ""));
                financemethodDropDownList.DataBind();
                FinancenoTextBox.Text = dsptsf.Tables[0].Rows[0]["Finance_No"].ToString();
                finmonthTextBox.Text = dsptsf.Tables[0].Rows[0]["financeMonth"].ToString();
                noemiTextBox.Text = dsptsf.Tables[0].Rows[0]["No_Emi"].ToString();
                emiamtTextBox.Text = dsptsf.Tables[0].Rows[0]["Emi_Installment"].ToString();
                findocfeeTextBox.Text = dsptsf.Tables[0].Rows[0]["documentationfee"].ToString();
                isgtrateTextBox.Text = dsptsf.Tables[0].Rows[0]["IGSTrate"].ToString();
                igstamtTextBox.Text = dsptsf.Tables[0].Rows[0]["IGST_Amount"].ToString();
                interestrateTextBox.Text = dsptsf.Tables[0].Rows[0]["Interestrate"].ToString();
                foldloanamountTextBox.Text = dsptsf.Tables[0].Rows[0]["Old_Loan_Amount"].ToString();
                eurorateTextBox.Text = dsptsf.Tables[0].Rows[0]["eurorate"].ToString();
                loanamtINEuroTextBox.Text = dsptsf.Tables[0].Rows[0]["loanamtINEuro"].ToString();
                monthlyPremiumprotectionplanTextBox.Text = dsptsf.Tables[0].Rows[0]["monthlyPremiumprotectionplan"].ToString();
                openLoanAgreementTextBox.Text= dsptsf.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();
              


            }


            //load installments
            DataSet dsin = Queries.contractInstallment(sContractdetailsID);// ContractdetailsIDTextBox.Text);// contractnoTextBox.Text);
            if (dsin.Tables[0].Rows.Count == 0)
            {
                GridView1.Visible = false;

            }
            else
            {
                GridView1.Visible = true;
                GridView1.DataSource = dsin;
                GridView1.DataBind();
            }
           

            DataSet dscrm = Queries.LoadCRM_details(sContractdetailsID);// ContractdetailsIDTextBox.Text);
            if (dscrm.Tables[0].Rows.Count == 0)
            {
                PrgmsrcTextBox.Text = "";
                RefByTextBox.Text = "";
            }
            else
            {
                PrgmsrcTextBox.Text = dscrm.Tables[0].Rows[0]["program_source"].ToString();
                RefByTextBox.Text = dscrm.Tables[0].Rows[0]["Referred_By"].ToString();


            }
    

            if (dsct.Tables[0].Rows[0]["ContractType"].ToString() == "Points") // (conttypevalue == "Points")
            {

                visibilityPointstrue();

                DataSet dspts = Queries.LoadNewPointsDetails(sContractdetailsID);// ContractdetailsIDTextBox.Text);
                if (dspts.Tables[0].Rows.Count == 0)
                {
                    clubTextBox.Text = "";
                    newpointsrightTextBox.Text = "";
                    EntitlementPoinDropDownList.Text = "";
                    totalptrightsTextBox.Text = "";
                    firstyrTextBox.Text = "";
                    tenureTextBox.Text = "";
                    lastyrTextBox.Text = "";
                        DataSet dsen = Queries.LoadMembershipEntitlement();
                        EntitlementPoinDropDownList.DataSource = dsen;
                        EntitlementPoinDropDownList.DataTextField = "Entitlement_Name";
                        EntitlementPoinDropDownList.DataValueField = "Entitlement_Name";
                        EntitlementPoinDropDownList.AppendDataBoundItems = true;
                        EntitlementPoinDropDownList.Items.Insert(0, new ListItem("", ""));
                        EntitlementPoinDropDownList.DataBind();

                    }
                    else
                {


                    //clubTextBox.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(dspts.Tables[0].Rows[0]["club"].ToString());
                    string first = dspts.Tables[0].Rows[0]["club"].ToString().ToLower();
                   // string lowerfirst = first.ToLower();
                    clubTextBox.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(first);

                    newpointsrightTextBox.Text = dspts.Tables[0].Rows[0]["New_points_rights"].ToString();
                    DataSet dspten = Queries.pointsentitlement(sContractdetailsID);// contractnoTextBox.Text);
                    EntitlementPoinDropDownList.Items.Add(dspts.Tables[0].Rows[0]["Type_membership"].ToString());
                    EntitlementPoinDropDownList.Items.Add(dspten.Tables[0].Rows[0]["Entitlement_Name"].ToString());
                    totalptrightsTextBox.Text = dspts.Tables[0].Rows[0]["Total_points_rights"].ToString();
                    firstyrTextBox.Text = dspts.Tables[0].Rows[0]["First_year_occupancy"].ToString();
                    tenureTextBox.Text = dspts.Tables[0].Rows[0]["Tenure"].ToString();
                    lastyrTextBox.Text = dspts.Tables[0].Rows[0]["Last_year_occupancy"].ToString();
                    NoPersonsTextBox.Text = dspts.Tables[0].Rows[0]["NoPersons"].ToString();



                }
                //load PA details
                DataSet dspa = Queries.contractPA(sContractdetailsID);
                if (dspa.Tables[0].Rows.Count == 0)
                {
                    newpointsTextBox.Text = "";
                    conversionfeeTextBox.Text = "";
                    adminfeeTextBox.Text = "";
                    testadminfeeTextBox.Text = "";
                    totpurchpriceTextBox.Text = "";
                    cgstTextBox.Text = "";
                    sgstTextBox.Text = "";
                    totalpriceInTaxTextBox.Text = "";
                    depositTextBox.Text = "";
                    balanceTextBox.Text = "";
                    balancedueTextBox.Text = "";
                    remarksTextBox.Text = "";
                    TotalTaxTextBox.Text = "";
                }
                else
                {

                    newpointsTextBox.Text = dspa.Tables[0].Rows[0]["New_Points_Price"].ToString();
                    conversionfeeTextBox.Text = dspa.Tables[0].Rows[0]["Conversion_Fee"].ToString();
                    adminfeeTextBox.Text = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    testadminfeeTextBox.Text = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    totpurchpriceTextBox.Text = dspa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                    cgstTextBox.Text = dspa.Tables[0].Rows[0]["Cgst"].ToString();
                    sgstTextBox.Text = dspa.Tables[0].Rows[0]["Sgst"].ToString();
                    totalpriceInTaxTextBox.Text = dspa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                    depositTextBox.Text = dspa.Tables[0].Rows[0]["Deposit"].ToString();
                    balanceTextBox.Text = dspa.Tables[0].Rows[0]["Balance"].ToString();
                    balancedueTextBox.Text = dspa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                    remarksTextBox.Text = dspa.Tables[0].Rows[0]["Remarks"].ToString();
                    TotalTaxTextBox.Text = dspa.Tables[0].Rows[0]["total_tax"].ToString();


                }


                LoadDocuments(ContractdetailsIDTextBox.Text, office, financeradiobuttonlist.SelectedItem.Text, contracttypeTextBox.Text, AffiliationvalueTextBox.Text, dsct.Tables[0].Rows[0]["MCWaiver"].ToString(), CanxContractNoTextBox.Text, companynameTextBox.Text, StateDropDownList.SelectedItem.Text);


            }
            else if (dsct.Tables[0].Rows[0]["ContractType"].ToString() == "Trade-In-Points")
            {
                visibilitytradeinPointstrue();
                DataSet dstip = Queries.LoadTradeinPointsDetails(sContractdetailsID);
                if (dstip.Tables[0].Rows.Count == 0)
                {
                    tnmresortTextBox.Text = "";
                    tipnopointsTextBox.Text = "";
                    nmcontrcinoTextBox.Text = "";
                    tipptsvalueTextBox.Text = "";
                    clubTextBox.Text = "";
                    newpointsrightTextBox.Text = "";
                    EntitlementPoinDropDownList.SelectedIndex = 0;
                    totalptrightsTextBox.Text = "";
                    firstyrTextBox.Text = "";
                    tenureTextBox.Text = "";
                    lastyrTextBox.Text = "";
                    tipactualptsvalueTextBox.Text = "";
                    twoldmtypeTextBox.Text = "";
                        DataSet dsen = Queries.LoadMembershipEntitlement();
                        EntitlementPoinDropDownList.DataSource = dsen;
                        EntitlementPoinDropDownList.DataTextField = "Entitlement_Name";
                        EntitlementPoinDropDownList.DataValueField = "Entitlement_Name";
                        EntitlementPoinDropDownList.AppendDataBoundItems = true;
                        EntitlementPoinDropDownList.Items.Insert(0, new ListItem("", ""));
                        EntitlementPoinDropDownList.DataBind();

                    }
                    else
                {
                    tnmresortTextBox.Text = dstip.Tables[0].Rows[0]["Trade_In_Details_club_resort"].ToString();
                    tipnopointsTextBox.Text = dstip.Tables[0].Rows[0]["Trade_In_Details_No_rights"].ToString();
                    nmcontrcinoTextBox.Text = dstip.Tables[0].Rows[0]["Trade_In_Details_ContNo_RCINo"].ToString();
                    tipptsvalueTextBox.Text = dstip.Tables[0].Rows[0]["Trade_In_Details_Points_value"].ToString();
                    tipactualptsvalueTextBox.Text = dstip.Tables[0].Rows[0]["Actualpoints_value"].ToString();

                    //  clubTextBox.Text = dstip.Tables[0].Rows[0]["New_Club"].ToString();
                    string first = dstip.Tables[0].Rows[0]["New_Club"].ToString().ToLower();
                    // string lowerfirst = first.ToLower();
                    clubTextBox.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(first);
                    newpointsrightTextBox.Text = dstip.Tables[0].Rows[0]["New_Club_Points_Rights"].ToString();
                    NoPersonsTextBox.Text = dstip.Tables[0].Rows[0]["NoPersons"].ToString();


                    DataSet dstipen = Queries.tradeinpointsentitlement(sContractdetailsID);
                    EntitlementPoinDropDownList.Items.Add(dstip.Tables[0].Rows[0]["New_MemebrshipType"].ToString());
                    EntitlementPoinDropDownList.Items.Add(dstipen.Tables[0].Rows[0]["Entitlement_Name"].ToString());

                    totalptrightsTextBox.Text = dstip.Tables[0].Rows[0]["New_TotalPointsRights"].ToString();
                    firstyrTextBox.Text = dstip.Tables[0].Rows[0]["New_First_year_occupancy"].ToString();
                    tenureTextBox.Text = dstip.Tables[0].Rows[0]["New_Tenure"].ToString();
                    lastyrTextBox.Text = dstip.Tables[0].Rows[0]["New_Last_year_occupancy"].ToString();
                    twoldmtypeTextBox.Text = dstip.Tables[0].Rows[0]["OldMemtype"].ToString();


                }
                //load PA details
                DataSet dspa = Queries.contractPA(sContractdetailsID);
                if (dspa.Tables[0].Rows.Count == 0)
                {
                    newpointsTextBox.Text = "";
                    conversionfeeTextBox.Text = "";
                    adminfeeTextBox.Text = "";
                    testadminfeeTextBox.Text = "";
                    totpurchpriceTextBox.Text = "";
                    cgstTextBox.Text = "";
                    sgstTextBox.Text = "";
                    totalpriceInTaxTextBox.Text = "";
                    depositTextBox.Text = "";
                    balanceTextBox.Text = "";
                    balancedueTextBox.Text = "";
                    remarksTextBox.Text = "";
                    TotalTaxTextBox.Text = "";
                }
                else
                {
                    newpointsTextBox.Text = dspa.Tables[0].Rows[0]["New_Points_Price"].ToString();
                    conversionfeeTextBox.Text = dspa.Tables[0].Rows[0]["Conversion_Fee"].ToString();
                    adminfeeTextBox.Text = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    testadminfeeTextBox.Text = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    totpurchpriceTextBox.Text = dspa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                    cgstTextBox.Text = dspa.Tables[0].Rows[0]["Cgst"].ToString();
                    sgstTextBox.Text = dspa.Tables[0].Rows[0]["Sgst"].ToString();
                    totalpriceInTaxTextBox.Text = dspa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                    depositTextBox.Text = dspa.Tables[0].Rows[0]["Deposit"].ToString();
                    balanceTextBox.Text = dspa.Tables[0].Rows[0]["Balance"].ToString();
                    balancedueTextBox.Text = dspa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                    remarksTextBox.Text = dspa.Tables[0].Rows[0]["Remarks"].ToString();
                    TotalTaxTextBox.Text = dspa.Tables[0].Rows[0]["total_tax"].ToString();

                }


                LoadDocuments(ContractdetailsIDTextBox.Text, office, financeradiobuttonlist.SelectedItem.Text, contracttypeTextBox.Text, AffiliationvalueTextBox.Text, dsct.Tables[0].Rows[0]["MCWaiver"].ToString(), CanxContractNoTextBox.Text, companynameTextBox.Text, StateDropDownList.SelectedItem.Text);


            }
            else if (dsct.Tables[0].Rows[0]["ContractType"].ToString() == "Trade-In-Weeks")
            {

                visibilitytradeinweekstrue();

                DataSet dstiw = Queries.LoadTradeinWeeksDetails(sContractdetailsID);
                if (dstiw.Tables[0].Rows.Count == 0)
                {
                    tnmresortTextBox.Text = "";
                    tnmapttypeTextBox.Text = "";
                    tnmseasonDropDownList.SelectedIndex = 0;
                    nmnowksTextBox.Text = "";
                    nmcontrcinoTextBox.Text = "";
                    tipnopointsTextBox.Text = "";
                    tipptsvalueTextBox.Text = "";
                    tipactualptsvalueTextBox.Text = "";
                    clubTextBox.Text = "";
                    newpointsrightTextBox.Text = "";
                    EntitlementPoinDropDownList.SelectedIndex = 0;
                    totalptrightsTextBox.Text = "";
                    firstyrTextBox.Text = "";
                    tenureTextBox.Text = "";
                    lastyrTextBox.Text = "";
                    twoldmtypeTextBox.Text = "";
                    DataSet dsen = Queries.LoadMembershipEntitlement();
                        EntitlementPoinDropDownList.DataSource = dsen;
                        EntitlementPoinDropDownList.DataTextField = "Entitlement_Name";
                        EntitlementPoinDropDownList.DataValueField = "Entitlement_Name";
                        EntitlementPoinDropDownList.AppendDataBoundItems = true;
                        EntitlementPoinDropDownList.Items.Insert(0, new ListItem("", ""));
                        EntitlementPoinDropDownList.DataBind();


                    DataSet dsseason = Queries.LoadSeason();
                    tnmseasonDropDownList.DataSource = dsseason;
                    tnmseasonDropDownList.DataTextField = "season_name";
                    tnmseasonDropDownList.DataValueField = "season_name";
                    tnmseasonDropDownList.AppendDataBoundItems = true;
                    tnmseasonDropDownList.Items.Insert(0, new ListItem("", ""));
                    tnmseasonDropDownList.DataBind();


                }
                else
                {

                    tnmresortTextBox.Text = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_resort"].ToString();
                    tnmapttypeTextBox.Text = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_Apt"].ToString();

                    DataSet dstiwk = Queries.tradeinwksseason(sContractdetailsID);
                    tnmseasonDropDownList.DataSource = dstiwk;
                    tnmseasonDropDownList.DataTextField = "Season_Name";
                    tnmseasonDropDownList.DataValueField = "Season_Name";
                    tnmseasonDropDownList.AppendDataBoundItems = true;
                    tnmseasonDropDownList.Items.Insert(0, new ListItem(dstiw.Tables[0].Rows[0]["Trade_In_Weeks_Season"].ToString(), ""));
                    tnmseasonDropDownList.DataBind();

                    nmnowksTextBox.Text = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_NoWks"].ToString();
                    nmcontrcinoTextBox.Text = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_ContNo_RCINo"].ToString();
                    tipptsvalueTextBox.Text = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_Points_value"].ToString();

                //    clubTextBox.Text = dstiw.Tables[0].Rows[0]["NewPointsW_Club"].ToString();
                    string first = dstiw.Tables[0].Rows[0]["NewPointsW_Club"].ToString().ToLower();
                    // string lowerfirst = first.ToLower();
                    clubTextBox.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(first);
                    newpointsrightTextBox.Text = dstiw.Tables[0].Rows[0]["NewPointsW_Club_Points_Rights"].ToString();

                    DataSet dstiwen = Queries.tradeinwksentitlement(sContractdetailsID);
                    EntitlementPoinDropDownList.Items.Add(dstiw.Tables[0].Rows[0]["NewPointsW_MemebrshipType"].ToString());
                    EntitlementPoinDropDownList.Items.Add(dstiwen.Tables[0].Rows[0]["Entitlement_Name"].ToString());

                    totalptrightsTextBox.Text = dstiw.Tables[0].Rows[0]["NewPointsW_Total_Points_rights"].ToString();
                    firstyrTextBox.Text = dstiw.Tables[0].Rows[0]["NewPointsW_First_year_occupancy"].ToString();
                    tenureTextBox.Text = dstiw.Tables[0].Rows[0]["NewPointsW_Tenure"].ToString();
                    lastyrTextBox.Text = dstiw.Tables[0].Rows[0]["NewPointsW_Last_year_occupancy"].ToString();
                    NoPersonsTextBox.Text = dstiw.Tables[0].Rows[0]["NoPersons"].ToString();
                    twoldmtypeTextBox.Text = dstiw.Tables[0].Rows[0]["OldMemtype"].ToString();
                    tipactualptsvalueTextBox.Text = dstiw.Tables[0].Rows[0]["Actualpoints_value"].ToString();
                }

                //load PA details
                DataSet dspa = Queries.contractPA(sContractdetailsID);
                if (dspa.Tables[0].Rows.Count == 0)
                {
                    newpointsTextBox.Text = "";
                    conversionfeeTextBox.Text = "";
                    adminfeeTextBox.Text = "";
                    testadminfeeTextBox.Text = "";
                    totpurchpriceTextBox.Text = "";
                    cgstTextBox.Text = "";
                    sgstTextBox.Text = "";
                    totalpriceInTaxTextBox.Text = "";
                    depositTextBox.Text = "";
                    balanceTextBox.Text = "";
                    balancedueTextBox.Text = "";
                    remarksTextBox.Text = "";
                    TotalTaxTextBox.Text = "";
                }
                else
                {
                    newpointsTextBox.Text = dspa.Tables[0].Rows[0]["New_Points_Price"].ToString();
                    conversionfeeTextBox.Text = dspa.Tables[0].Rows[0]["Conversion_Fee"].ToString();
                    adminfeeTextBox.Text = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    testadminfeeTextBox.Text = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    totpurchpriceTextBox.Text = dspa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                    cgstTextBox.Text = dspa.Tables[0].Rows[0]["Cgst"].ToString();
                    sgstTextBox.Text = dspa.Tables[0].Rows[0]["Sgst"].ToString();
                    totalpriceInTaxTextBox.Text = dspa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                    depositTextBox.Text = dspa.Tables[0].Rows[0]["Deposit"].ToString();
                    balanceTextBox.Text = dspa.Tables[0].Rows[0]["Balance"].ToString();
                    balancedueTextBox.Text = dspa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                    remarksTextBox.Text = dspa.Tables[0].Rows[0]["Remarks"].ToString();
                    TotalTaxTextBox.Text = dspa.Tables[0].Rows[0]["total_tax"].ToString();


                }


                LoadDocuments(ContractdetailsIDTextBox.Text, office, financeradiobuttonlist.SelectedItem.Text, contracttypeTextBox.Text, AffiliationvalueTextBox.Text, dsct.Tables[0].Rows[0]["MCWaiver"].ToString(), CanxContractNoTextBox.Text, companynameTextBox.Text, StateDropDownList.SelectedItem.Text);

            }//           Trade - In - Weeks
            else if (dsct.Tables[0].Rows[0]["ContractType"].ToString() == "Fractional")
            {

                visibilityfractionaltrue();
                 
                DataSet dstif = Queries.loadtradeinfractional(sContractdetailsID);
                if (dstif.Tables[0].Rows.Count == 0)
                {
                        DataSet dsen = Queries.LoadMembershipEntitlement();
                        fwentitlementDropDownList.DataSource = dsen;
                        fwentitlementDropDownList.DataTextField = "Entitlement_Name";
                        fwentitlementDropDownList.DataValueField = "Entitlement_Name";
                        fwentitlementDropDownList.AppendDataBoundItems = true;
                        fwentitlementDropDownList.Items.Insert(0, new ListItem("", ""));
                        fwentitlementDropDownList.DataBind();



                    }
                    else
                {
                    DataSet dsold = Queries.LoadOldContractType(sContractdetailsID);
                    oldcontracttypeDropDownList.DataSource = dsold;
                    oldcontracttypeDropDownList.DataTextField = "ContractType";
                    oldcontracttypeDropDownList.DataValueField = "ContractType";
                    oldcontracttypeDropDownList.AppendDataBoundItems = true;
                    oldcontracttypeDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["Oldcontracttype"].ToString(), ""));
                    oldcontracttypeDropDownList.DataBind();

                    DataSet dsfres = Queries.loadtradeinfractionalResort(sContractdetailsID, office);
                    if (dsfres.Tables[0].Rows.Count == 0)
                    {
                        fwresortDropDownList.Items.Add(dstif.Tables[0].Rows[0]["resort"].ToString());
                    }
                    else
                    {
                        fwresortDropDownList.DataSource = dsfres;
                        fwresortDropDownList.DataTextField = "Contract_Resort_Name";
                        fwresortDropDownList.DataValueField = "Contract_Resort_Name";
                        fwresortDropDownList.AppendDataBoundItems = true;
                        fwresortDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["resort"].ToString(), ""));
                        fwresortDropDownList.DataBind();
                    }

                    DataSet dsfresidenceno = Queries.loadtradeinfractionalResidence(sContractdetailsID);
                    if (dsfresidenceno.Tables[0].Rows.Count == 0)
                    {
                        fwresidencenoDropDownList.Items.Add(dstif.Tables[0].Rows[0]["residence_no"].ToString());
                    }
                    else
                    {
                        fwresidencenoDropDownList.DataSource = dsfresidenceno;
                        fwresidencenoDropDownList.DataTextField = "Contract_Residence_Name";
                        fwresidencenoDropDownList.DataValueField = "Contract_Residence_Name";
                        fwresidencenoDropDownList.AppendDataBoundItems = true;
                        fwresidencenoDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["residence_no"].ToString(), ""));
                        fwresidencenoDropDownList.DataBind();

                    }
                    DataSet dsftype = Queries.loadtradeinfractionalResidencetype(sContractdetailsID);// ContractdetailsIDTextBox.Text);
                    if (dsftype.Tables[0].Rows.Count == 0)
                    {
                        fwresidencetypeDropDownList.Items.Add(dstif.Tables[0].Rows[0]["residence_type"].ToString());
                    }
                    else
                    {
                        fwresidencetypeDropDownList.DataSource = dsftype;
                        fwresidencetypeDropDownList.DataTextField = "Contract_Resi_Type_Name";
                        fwresidencetypeDropDownList.DataValueField = "Contract_Resi_Type_Name";
                        fwresidencetypeDropDownList.AppendDataBoundItems = true;
                        fwresidencetypeDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["residence_type"].ToString(), ""));
                        fwresidencetypeDropDownList.DataBind();

                    }

                    DataSet dsfint = Queries.loadtradeinfractionalFractionalInt(sContractdetailsID);
                    if (dsfint.Tables[0].Rows.Count == 0)
                    {
                        fwfractIntDropDownList.Items.Add(dstif.Tables[0].Rows[0]["fractional_interest"].ToString());
                    }
                    else
                    {
                        fwfractIntDropDownList.DataSource = dsfint;
                        fwfractIntDropDownList.DataTextField = "Contract_Fractional_Int_Name";
                        fwfractIntDropDownList.DataValueField = "Contract_Fractional_Int_Name";
                        fwfractIntDropDownList.AppendDataBoundItems = true;
                        fwfractIntDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["fractional_interest"].ToString(), ""));
                        fwfractIntDropDownList.DataBind();

                    }

                    DataSet dstifen = Queries.tradeinfractionalentitlement(sContractdetailsID);
                    fwentitlementDropDownList.Items.Add(dstif.Tables[0].Rows[0]["entitlement"].ToString());
                    fwentitlementDropDownList.Items.Add(dstifen.Tables[0].Rows[0]["Entitlement_Name"].ToString());
                    fwfirstyrTextBox.Text = dstif.Tables[0].Rows[0]["firstyear_Occupancy"].ToString();
                    fwtenureTextBox.Text = dstif.Tables[0].Rows[0]["tenure"].ToString();
                    fwlastyrTextBox.Text = dstif.Tables[0].Rows[0]["lastyear_Occupancy"].ToString();

                }

                //load fractional pa
                DataSet dsfpa = Queries.LoadfractionalPA(sContractdetailsID);
                if (dsfpa.Tables[0].Rows.Count == 0)
                {
                    ftradeinvalueTextBox.Text = "";
                    tradeinamtTextBox.Text = "";
                    ftotalvalueTextBox.Text = "";
                    adminfeeTextBox.Text = "";
                    AdministrationFeesTextBox.Text = "";
                    testadminfeeTextBox.Text = "";
                    totpurchpriceTextBox.Text = "";
                    cgstTextBox.Text = "";
                    sgstTextBox.Text = "";
                    totalpriceInTaxTextBox.Text = "";
                    depositTextBox.Text = "";
                    balanceTextBox.Text = "";
                    balancedueTextBox.Text = "";
                    remarksTextBox.Text = "";
                    TotalTaxTextBox.Text = "";
                }
                else
                {

                    ftradeinvalueTextBox.Text = dsfpa.Tables[0].Rows[0]["TradeIn_value"].ToString();
                    tradeinamtTextBox.Text = dsfpa.Tables[0].Rows[0]["TradeIn_value"].ToString();
                    ftotalvalueTextBox.Text = dsfpa.Tables[0].Rows[0]["Total_value"].ToString();
                    adminfeeTextBox.Text = dsfpa.Tables[0].Rows[0]["Admission_fees"].ToString();
                    AdministrationFeesTextBox.Text = dsfpa.Tables[0].Rows[0]["administration_fees"].ToString();
                    testadminfeeTextBox.Text = dsfpa.Tables[0].Rows[0]["administration_fees"].ToString();
                    totpurchpriceTextBox.Text = dsfpa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                    cgstTextBox.Text = dsfpa.Tables[0].Rows[0]["Cgst"].ToString();
                    sgstTextBox.Text = dsfpa.Tables[0].Rows[0]["Sgst"].ToString();
                    totalpriceInTaxTextBox.Text = dsfpa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                    depositTextBox.Text = dsfpa.Tables[0].Rows[0]["Deposit"].ToString();
                    balanceTextBox.Text = dsfpa.Tables[0].Rows[0]["Balance"].ToString();
                    balancedueTextBox.Text = dsfpa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                    remarksTextBox.Text = dsfpa.Tables[0].Rows[0]["Remarks"].ToString();
                    TotalTaxTextBox.Text = dsfpa.Tables[0].Rows[0]["total_tax"].ToString();
                }



                LoadDocuments(ContractdetailsIDTextBox.Text, office, financeradiobuttonlist.SelectedItem.Text, contracttypeTextBox.Text, "", dsct.Tables[0].Rows[0]["MCWaiver"].ToString(), CanxContractNoTextBox.Text, companynameTextBox.Text, StateDropDownList.SelectedItem.Text);

            }//Fractionals
            else if (dsct.Tables[0].Rows[0]["ContractType"].ToString() == "Trade-In-Fractionals")
            {

                visibilityfractionaltrue();
                //load finance details
                DataSet dstif = Queries.loadtradeinfractional(sContractdetailsID);
                if (dstif.Tables[0].Rows.Count == 0)
                {
                        DataSet dsen = Queries.LoadMembershipEntitlement();
                        fwentitlementDropDownList.DataSource = dsen;
                        fwentitlementDropDownList.DataTextField = "Entitlement_Name";
                        fwentitlementDropDownList.DataValueField = "Entitlement_Name";
                        fwentitlementDropDownList.AppendDataBoundItems = true;
                        fwentitlementDropDownList.Items.Insert(0, new ListItem("", ""));
                        fwentitlementDropDownList.DataBind();
                    }
                else
                {
                    DataSet dsold = Queries.LoadOldContractType(sContractdetailsID);
                    oldcontracttypeDropDownList.DataSource = dsold;
                    oldcontracttypeDropDownList.DataTextField = "ContractType";
                    oldcontracttypeDropDownList.DataValueField = "ContractType";
                    oldcontracttypeDropDownList.AppendDataBoundItems = true;
                    oldcontracttypeDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["Oldcontracttype"].ToString(), ""));
                    oldcontracttypeDropDownList.DataBind();

                    DataSet dsfres = Queries.loadtradeinfractionalResort(sContractdetailsID, office);
                    if (dsfres.Tables[0].Rows.Count == 0)
                    {
                        fwresortDropDownList.Items.Add(dstif.Tables[0].Rows[0]["resort"].ToString());
                    }
                    else
                    {
                        fwresortDropDownList.DataSource = dsfres;
                        fwresortDropDownList.DataTextField = "Contract_Resort_Name";
                        fwresortDropDownList.DataValueField = "Contract_Resort_Name";
                        fwresortDropDownList.AppendDataBoundItems = true;
                        fwresortDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["resort"].ToString(), ""));
                        fwresortDropDownList.DataBind();
                    }

                    DataSet dsfresidenceno = Queries.loadtradeinfractionalResidence(sContractdetailsID);
                    if (dsfresidenceno.Tables[0].Rows.Count == 0)
                    {
                        fwresidencenoDropDownList.Items.Add(dstif.Tables[0].Rows[0]["residence_no"].ToString());
                    }
                    else
                    {
                        fwresidencenoDropDownList.DataSource = dsfresidenceno;
                        fwresidencenoDropDownList.DataTextField = "Contract_Residence_Name";
                        fwresidencenoDropDownList.DataValueField = "Contract_Residence_Name";
                        fwresidencenoDropDownList.AppendDataBoundItems = true;
                        fwresidencenoDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["residence_no"].ToString(), ""));
                        fwresidencenoDropDownList.DataBind();

                    }
                    DataSet dsftype = Queries.loadtradeinfractionalResidencetype(sContractdetailsID);
                    if (dsftype.Tables[0].Rows.Count == 0)
                    {
                        fwresidencetypeDropDownList.Items.Add(dstif.Tables[0].Rows[0]["residence_type"].ToString());
                    }
                    else
                    {
                        fwresidencetypeDropDownList.DataSource = dsftype;
                        fwresidencetypeDropDownList.DataTextField = "Contract_Resi_Type_Name";
                        fwresidencetypeDropDownList.DataValueField = "Contract_Resi_Type_Name";
                        fwresidencetypeDropDownList.AppendDataBoundItems = true;
                        fwresidencetypeDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["residence_type"].ToString(), ""));
                        fwresidencetypeDropDownList.DataBind();

                    }

                    DataSet dsfint = Queries.loadtradeinfractionalFractionalInt(sContractdetailsID);
                    if (dsfint.Tables[0].Rows.Count == 0)
                    {
                        fwfractIntDropDownList.Items.Add(dstif.Tables[0].Rows[0]["fractional_interest"].ToString());
                    }
                    else
                    {
                        fwfractIntDropDownList.DataSource = dsfint;
                        fwfractIntDropDownList.DataTextField = "Contract_Fractional_Int_Name";
                        fwfractIntDropDownList.DataValueField = "Contract_Fractional_Int_Name";
                        fwfractIntDropDownList.AppendDataBoundItems = true;
                        fwfractIntDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["fractional_interest"].ToString(), ""));
                        fwfractIntDropDownList.DataBind();

                    }

                    DataSet dstifen = Queries.tradeinfractionalentitlement(sContractdetailsID);
                    fwentitlementDropDownList.Items.Add(dstif.Tables[0].Rows[0]["entitlement"].ToString());
                    fwentitlementDropDownList.Items.Add(dstifen.Tables[0].Rows[0]["Entitlement_Name"].ToString());
                    fwfirstyrTextBox.Text = dstif.Tables[0].Rows[0]["firstyear_Occupancy"].ToString();
                    fwtenureTextBox.Text = dstif.Tables[0].Rows[0]["tenure"].ToString();
                    fwlastyrTextBox.Text = dstif.Tables[0].Rows[0]["lastyear_Occupancy"].ToString();

                    if (dstif.Tables[0].Rows[0]["Oldcontracttype"].ToString() == "Points")
                    {

                        tnmresortTextBox.Text = dstif.Tables[0].Rows[0]["tradeinresort"].ToString();
                        tipnopointsTextBox.Text = dstif.Tables[0].Rows[0]["NO_POINTS"].ToString();
                        nmcontrcinoTextBox.Text = dstif.Tables[0].Rows[0]["oldContract_No"].ToString();
                        tipptsvalueTextBox.Text = dstif.Tables[0].Rows[0]["POINTS_VALUE"].ToString();
                        twoldmtypeTextBox.Text = dstif.Tables[0].Rows[0]["OldMemtype"].ToString();


                    }
                    else if (dstif.Tables[0].Rows[0]["Oldcontracttype"].ToString() == "Weeks")
                    {
                        twoldmtypeTextBox.Text = dstif.Tables[0].Rows[0]["OldMemtype"].ToString();
                        tnmresortTextBox.Text = dstif.Tables[0].Rows[0]["RESORT"].ToString();
                        tnmapttypeTextBox.Text = dstif.Tables[0].Rows[0]["APT_TYPE"].ToString();
                        DataSet dsfseason = Queries.tradeinfractionalseason(sContractdetailsID);

                        tnmseasonDropDownList.DataSource = dsfseason;
                        tnmseasonDropDownList.DataTextField = "Season_Name";
                        tnmseasonDropDownList.DataValueField = "Season_Name";
                        tnmseasonDropDownList.AppendDataBoundItems = true;
                        tnmseasonDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["SEASON"].ToString(), ""));
                        tnmseasonDropDownList.DataBind();



                        nmnowksTextBox.Text = dstif.Tables[0].Rows[0]["NO_WEEKS"].ToString();
                        tipnopointsTextBox.Text = dstif.Tables[0].Rows[0]["NO_POINTS"].ToString();
                        nmcontrcinoTextBox.Text = dstif.Tables[0].Rows[0]["oldContract_No"].ToString();
                        tipptsvalueTextBox.Text = dstif.Tables[0].Rows[0]["POINTS_VALUE"].ToString();


                    }
                    else if (dstif.Tables[0].Rows[0]["Oldcontracttype"].ToString() == "Fractionals")
                    {
                        twoldmtypeTextBox.Text = dstif.Tables[0].Rows[0]["OldMemtype"].ToString();
                        tnmresortTextBox.Text = dstif.Tables[0].Rows[0]["RESORT"].ToString();
                        tnmapttypeTextBox.Text = dstif.Tables[0].Rows[0]["APT_TYPE"].ToString();
                        nmcontrcinoTextBox.Text = dstif.Tables[0].Rows[0]["oldContract_No"].ToString();
                        nmnowksTextBox.Text = dstif.Tables[0].Rows[0]["NO_WEEKS"].ToString();
                        DataSet dsfseason = Queries.tradeinfractionalseason(sContractdetailsID);

                        tnmseasonDropDownList.DataSource = dsfseason;
                        tnmseasonDropDownList.DataTextField = "Season_Name";
                        tnmseasonDropDownList.DataValueField = "Season_Name";
                        tnmseasonDropDownList.AppendDataBoundItems = true;
                        tnmseasonDropDownList.Items.Insert(0, new ListItem(dstif.Tables[0].Rows[0]["SEASON"].ToString(), ""));
                        tnmseasonDropDownList.DataBind();

                    }

                }

                //load fractional pa
                DataSet dsfpa = Queries.LoadfractionalPA(sContractdetailsID);

                if (dsfpa.Tables[0].Rows.Count == 0)
                {
                    ftradeinvalueTextBox.Text = "";
                    tradeinamtTextBox.Text = "";
                    ftotalvalueTextBox.Text = "";
                    adminfeeTextBox.Text = "";
                    AdministrationFeesTextBox.Text = "";
                    testadminfeeTextBox.Text = "";
                    totpurchpriceTextBox.Text = "";
                    cgstTextBox.Text = "";
                    sgstTextBox.Text = "";
                    totalpriceInTaxTextBox.Text = "";
                    depositTextBox.Text = "";
                    balanceTextBox.Text = "";
                    balancedueTextBox.Text = "";
                    remarksTextBox.Text = "";
                    TotalTaxTextBox.Text = "";
                }
                else
                {

                    ftradeinvalueTextBox.Text = dsfpa.Tables[0].Rows[0]["TradeIn_value"].ToString();
                    tradeinamtTextBox.Text = dsfpa.Tables[0].Rows[0]["TradeIn_value"].ToString();
                    ftotalvalueTextBox.Text = dsfpa.Tables[0].Rows[0]["Total_value"].ToString();
                    adminfeeTextBox.Text = dsfpa.Tables[0].Rows[0]["Admission_fees"].ToString();
                    testadminfeeTextBox.Text = dsfpa.Tables[0].Rows[0]["administration_fees"].ToString();
                    AdministrationFeesTextBox.Text = dsfpa.Tables[0].Rows[0]["administration_fees"].ToString();
                    totpurchpriceTextBox.Text = dsfpa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                    cgstTextBox.Text = dsfpa.Tables[0].Rows[0]["Cgst"].ToString();
                    sgstTextBox.Text = dsfpa.Tables[0].Rows[0]["Sgst"].ToString();
                    totalpriceInTaxTextBox.Text = dsfpa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                    depositTextBox.Text = dsfpa.Tables[0].Rows[0]["Deposit"].ToString();
                    balanceTextBox.Text = dsfpa.Tables[0].Rows[0]["Balance"].ToString();
                    balancedueTextBox.Text = dsfpa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                    remarksTextBox.Text = dsfpa.Tables[0].Rows[0]["Remarks"].ToString();
                    TotalTaxTextBox.Text = dsfpa.Tables[0].Rows[0]["total_tax"].ToString();
                }




                LoadDocuments(ContractdetailsIDTextBox.Text, office, financeradiobuttonlist.SelectedItem.Text, contracttypeTextBox.Text, AffiliationvalueTextBox.Text, dsct.Tables[0].Rows[0]["MCWaiver"].ToString(), CanxContractNoTextBox.Text, companynameTextBox.Text, StateDropDownList.SelectedItem.Text);

            }//Trade-In-Fractionals
        //}//if block of rowesist
        //else
        //{
        //    string msg = "Contract doesnot exist";
        //    this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Warning", "pele('" + msg + "')", true);

        //}
    }//postback
    }








    //update details

    public void CreateButton_Click(object sender, EventArgs e)
    {
        Session["contractno"] = ""; Session["ocsalesrep"] = ""; Session["ocTomgr"] = ""; Session["obuttonup"] = ""; Session["odealdate"] = ""; Session["odealstatus"] = "";
        Session["Contract_CreatedDate"] = ""; Session["oContractUpdatedDate"] = ""; Session["omcwv"] = ""; Session["ofinancedetails"] = ""; Session["ocontract_Remark"] = "";
        Session["ContractType"] = ""; Session["ofinancedetails"] = "";
        Session["ocontract_Remark"] = ""; Session["opan"] = ""; Session["oadhar"] = "";
        Session["omcfees"] = ""; Session["omcdate"] = ""; Session["omemberfee"] = ""; Session["omemebercgst"] = ""; Session["omembersgst"] = "";
        Session["ocanxcontno"] = ""; Session["ocanxdate"] = ""; Session["oloanbuofficer"] = ""; Session["ocogstin"] = ""; Session["ocompanypano"] = "";
        Session["odealweekno"] = ""; Session["odeckdetails"] = ""; Session["odeckremark"] = ""; Session["ocontractcomment"] = ""; Session["Contract_createdUser"] = ""; Session["obu6"] = "";
        Session["oupdowngrade"] = ""; Session["oExpirydate"] = ""; Session["oCommence_date"] = ""; Session["oContract_group"] = ""; Session["oContract_Venue"] = "";
        Session["oReturnhomedate"] = "";

        Session["TeamDetailsID"] = ""; Session["Approval_Comments"] = ""; Session["Rep_report"] = "";
        Session["To_report"] = ""; Session["SMS_Update"] = ""; Session["Created_Date"] = ""; Session["CreatedBy"] = "";
        Session["Updated_Date"] = ""; Session["UpdatedBy"] = "";

        Session["Finance_Details_Id"] = ""; Session["ofinancemethod"] = "";
        Session["ocurrency"] = ""; Session["oaffiliate"] = ""; Session["ototalintax"] = ""; Session["odepamt"] = ""; Session["Initial_Deposit_Amount"] = "";
        Session["obalpayable"] = ""; Session["odepbal"] = "";
        Session["ototalbalance"] = ""; Session["opaymethod"] = ""; Session["onoinstallment"] = ""; Session["oinstallment"] = ""; Session["ofinance"] = "";
        Session["oFinanceno"] = ""; Session["oisgtrate"] = ""; Session["ointerestrate"] = ""; Session["ofindocfee"] = ""; Session["oigstamt"] = ""; Session["onoemi"] = "";
        Session["oemiamt"] = ""; Session["ofinmonth"] = ""; Session["ooldLoanAgreement"] = ""; Session["oregcollectionterm"] = ""; Session["oregcollamt"] = "";
        Session["obaladepamtdate"] = ""; Session["ooldloanamt"] = "";
        Session["eurorate"] = ""; Session["loanamtINEuro"] = ""; Session["monthlyPremiumprotectionplan"] = "";

        Session["Deposit_Receipt_Id"] = ""; Session["oReceipt_No"] = ""; Session["oReceipt_Date"] = "";
        Session["place_supply"] = ""; Session["state"] = ""; Session["state_code"] = ""; Session["Product_Name"] = ""; Session["SAC"] = "";
        Session["oAmount"] = ""; Session["otaxable_value"] = "";
        Session["ocgstrate"] = ""; Session["ocgstamt"] = ""; Session["osgstrate"] = ""; Session["osgstamt"] = ""; Session["ototalamt"] = ""; Session["oPayment_Mode"] = "";
        Session["oactual_currency"] = ""; Session["oconverted_currency"] = ""; Session["oConverted_rate"] = ""; Session["oExchangedValue_date"] = ""; Session["oActual_Amt"] = "";
        Session["Receipt_Status"] = ""; Session["receipttype"] = ""; Session["payment_date"] = "";        Session["Total_deposit"] = "";
        Session["USDTotal_deposit"] = "";        Session["Previous_DepositAmt"] = ""; Session["floodcess"] = "";


        Session["CRM_ID"] = "";
        Session["program_source"] = ""; Session["Referred_By"] = ""; Session["comment1"] = ""; Session["created_date"] = "";
        Session["updated_date"] = ""; Session["createdby"] = ""; Session["updatedby"] = ""; Session["status"] = "";

        Session["Installment_ID"] = ""; Session["iProfileID"] = ""; Session["ContractNo"] = ""; Session["Installment_no"] = "";
        Session["Installment_Amount"] = ""; Session["Installment_Date"] = ""; Session["Installment_Invoice_No"] = ""; Session["Paymentmode"] = "";

        Session["Contract_PA_Id"] = "";
        Session["onewpoints"] = ""; Session["oconversionfee"] = ""; Session["oadminfee"] = ""; Session["ototpurchprice"] = ""; Session["ocgst"] = ""; Session["osgst"] = ""; Session["ototalpriceInTax"] = "";
        Session["odeposit"] = ""; Session["obalance"] = ""; Session["obalancedue"] = ""; Session["oremarks"] = "";
        Session["ooldVolume"] = ""; Session["ooldadminfee"] = ""; Session["ooldTotalTax"] = ""; Session["ooldDeposit"] = ""; Session["ousdoldvolume"] = ""; Session["ousdoldadminfee"] = ""; Session["ousdoldtax"] = ""; Session["ousdolddeposit"] = "";
        Session["oUSDConvertedVolume"] = ""; Session["oUSDConvertedAdminfee"] = ""; Session["oUSDConvertedTax"] = ""; Session["oUSDConverteddeposit"] = ""; Session["totaltax"] = "";
        Session["oUSDConvertedTotalVolume"] = ""; Session["oexchangerate"] = "";

        Session["ContractPoints_ID"] = ""; Session["opts_club"] = ""; Session["opts_newpts"] = ""; Session["opts_entitlement"] = "";
        Session["opts_totalpts"] = ""; Session["opts_firstyr"] = ""; Session["opts_Tenure"] = ""; Session["opts_lastyr"] = ""; Session["opts_nopersons"] = "";

        Session["ContractTradeInPoint_ID"] = "";
        Session["otip_Trade_In_Details_club_resort"] = ""; Session["otip_Trade_In_Details_No_rights"] = ""; Session["otip_Trade_In_Details_ContNo_RCINo"] = ""; Session["otip_Trade_In_Details_Points_value"] = ""; Session["Actualpoints_value"] = ""; Session["otip_New_Club"] = ""; Session["otip_New_Club_Points_Rights"] = ""; Session["otip_New_MemebrshipType"] = "";
        Session["otip_New_TotalPointsRights"] = ""; Session["otip_New_First_year_occupancy"] = ""; Session["otip_New_Tenure"] = ""; Session["otip_New_Last_year_occupancy"] = ""; Session["otip_nopersons"] = "";
        Session["oldtipmemtype"] = "";

        Session["ContractTradeInWeeks_ID"] = "";
        Session["otiw_Trade_In_Weeks_resort"] = ""; Session["otiw_Trade_In_Weeks_Apt"] = ""; Session["otiw_Trade_In_Weeks_Season"] = ""; Session["otiw_Trade_In_Weeks_NoWks"] = ""; Session["otiw_Trade_In_Weeks_ContNo_RCINo"] = ""; Session["otiw_Trade_In_Weeks_Points_value"] = ""; Session["otiw_NewPointsW_Club"] = "";
        Session["otiw_NewPointsW_Club_Points_Rights"] = ""; Session["otiw_NewPointsW_MemebrshipType"] = ""; Session["otiw_NewPointsW_Total_Points_rights"] = ""; Session["otiw_NewPointsW_First_year_occupancy"] = ""; Session["otiw_NewPointsW_Tenure"] = ""; Session["otiw_NewPointsW_Last_year_occupancy"] = ""; Session["otiw_nopersons"] = "";
        Session["oldtiwmemtype"] = ""; Session["wActualpoints_value"] = "";

        Session["ContractFractionalIndian_ID"] = "";
        Session["otiresort"] = ""; Session["otifresidence_no"] = ""; Session["otifresidence_type"] = ""; Session["otiffractional_interest"] = ""; Session["otifentitlement"] = "";
        Session["otiffirstyear_Occupancy"] = ""; Session["otiftenure"] = ""; Session["otiflastyear_Occupancy"] = ""; Session["otifleaseback"] = ""; Session["otifMc_Charges"] = "";

        Session["Contract_Fractional_PA_Id"] = "";
        Session["ofctAdmission_fees"] = ""; Session["ofctadministration_fees"] = ""; Session["ofctCgst"] = ""; Session["ofctSgst"] = ""; Session["ofctTotal_Purchase_Price"] = ""; Session["ofctTotal_Price_Including_Tax"] = "";
        Session["ofctDeposit"] = ""; Session["ofctBalance"] = ""; Session["ofctBalance_Due_Dates"] = ""; Session["ofctRemarks"] = ""; Session["otradeinvalue"] = ""; Session["ototalvalue"] = "";
        Session["oFoldVolume"] = ""; Session["oFoldadminfee"] = ""; Session["oFoldTotalTax"] = ""; Session["oFoldDeposit"] = ""; Session["oFusdoldvolume"] = ""; Session["oFusdoldadminfee"] = ""; Session["oFusdoldtax"] = ""; Session["oFusdolddeposit"] = "";
        Session["oUSDConvertedFVolume"] = ""; Session["oUSDConvertedFAdminfee"] = ""; Session["oUSDConvertedFTax"] = ""; Session["oUSDConvertedFdeposit"] = ""; Session["Ftotaltax"] = "";


        Session["ContractTrade_InFractional_ID"] = "";
        Session["otifOldcontracttype"] = ""; Session["otifRESORT"] = ""; Session["otifAPT_TYPE"] = ""; Session["otifSEASON"] = ""; Session["otifNO_WEEKS"] = ""; Session["otifNO_POINTS"] = ""; Session["otifPOINTS_VALUE"] = ""; Session["otifoldContract_No"] = "";
        Session["oldtifmemtype"] = "";

        Session["otherNamesID"] = "";
        Session["Type"] = ""; Session["Name"] = ""; Session["Address"] = ""; Session["State"] = ""; Session["Country"] = "";
        Session["Postcode"] = ""; Session["Status"] = ""; Session["Document_name"] = ""; Session["Added_Date"] = "";

        Session["oSC_Previous_Status"] = "";
        Session["oSC_Updated_Status"] = "";
        Session["oSC_Cancel_Group_Venue"] = "";
        Session["oSC_Cancel_Reason"] = "";
        Session["oSC_Cancel_Date"] = "";
        Session["oSC_Profile_ID"] = "";
        Session["oSC_User"] = "";
        Session["oContract_Finance_ID"] = "";
        Session["oSC_Update_Date"] = "";
        Session["oContract_num_new"] = "";
        Session["oSC_Cancel_Type"] = ""; Session["oSC_Cancel_Comment"] = "";
        Session["oSC_Withdraw_Date"] = "";



        string sContractdetailsID = (string)Session["ContractdetailsID"];
        string sprofile = (string)Session["ProfileID"];
        string user = (string)Session["username"];
        office = Queries.GetOfficeFromCountry(Session["ProfileID"].ToString());// profileidTextBox.Text);
        DataSet dsct = Queries.LoadContractDetails_ID(sContractdetailsID);

        Session["contractno"] = dsct.Tables[0].Rows[0]["contractno"].ToString();
        Session["ocsalesrep"] = dsct.Tables[0].Rows[0]["Sales_Rep"].ToString();
        Session["ocTomgr"] = dsct.Tables[0].Rows[0]["TO_Manager"].ToString();
        Session["obuttonup"] = dsct.Tables[0].Rows[0]["ButtonUp_Officer"].ToString();
        Session["odealdate"] = String.Format("{0:dd-MM-yyyy}", dsct.Tables[0].Rows[0]["DealRegistered_Date"]);
        Session["odealstatus"] = dsct.Tables[0].Rows[0]["DealStatus"].ToString();
        Session["Contract_CreatedDate"] = dsct.Tables[0].Rows[0]["Contract_CreatedDate"].ToString();
        Session["oContractUpdatedDate"] = String.Format("{0:dd-MM-yyyy}", dsct.Tables[0].Rows[0]["Contract_UpdatedDate"]);
        Session["omcwv"] = dsct.Tables[0].Rows[0]["MCWaiver"].ToString();
        Session["ofinancedetails"] = dsct.Tables[0].Rows[0]["Finance_Details"].ToString();
        Session["ocontract_Remark"] = dsct.Tables[0].Rows[0]["Contract_Remark"].ToString();
        Session["opan"] = dsct.Tables[0].Rows[0]["Pan_Card"].ToString();
        Session["oadhar"] = dsct.Tables[0].Rows[0]["Adhar_Card"].ToString();
        Session["omcfees"] = dsct.Tables[0].Rows[0]["MC_Charges"].ToString();
        Session["omcdate"] = String.Format("{0:dd-MM-yyyy}", dsct.Tables[0].Rows[0]["First_MC_Payable_Date"]);
        Session["omemberfee"] = dsct.Tables[0].Rows[0]["MemberFee"].ToString();
        Session["omemebercgst"] = dsct.Tables[0].Rows[0]["MemberCGST"].ToString();
        Session["omembersgst"] = dsct.Tables[0].Rows[0]["MembersGST"].ToString();
        Session["ocanxcontno"] = dsct.Tables[0].Rows[0]["CanxContractNo"].ToString();
        Session["ocanxdate"] = String.Format("{0:dd-MM-yyyy}", dsct.Tables[0].Rows[0]["Contract_Canx_date"]);
        Session["oloanbuofficer"] = dsct.Tables[0].Rows[0]["Loan_BU_officer"].ToString();
        Session["ocogstin"] = dsct.Tables[0].Rows[0]["Client_GSTIN"].ToString();
        Session["ocompanypano"] = dsct.Tables[0].Rows[0]["Company_PanNo"].ToString();
        Session["odealweekno"] = Convert.ToInt32(dsct.Tables[0].Rows[0]["dealweekno"]);
        Session["odeckdetails"] = dsct.Tables[0].Rows[0]["deckdetails"].ToString();
        Session["odeckremark"] = dsct.Tables[0].Rows[0]["deckremark"].ToString();
        Session["ocontractcomment"] = dsct.Tables[0].Rows[0]["Contract_comment"].ToString();
        Session["Contract_createdUser"] = dsct.Tables[0].Rows[0]["Contract_createdUser"].ToString();
        Session["obu6"] = dsct.Tables[0].Rows[0]["BU_A6"].ToString();
        Session["oupdowngrade"] = dsct.Tables[0].Rows[0]["Updowngrade"].ToString();
        Session["oExpirydate"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Expirydate"]);
        Session["oCommence_date"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Commence_date"]);
        Session["oContract_group"] = dsct.Tables[0].Rows[0]["Contract_group"].ToString();
        Session["oContract_Venue"] = dsct.Tables[0].Rows[0]["Contract_Venue"].ToString();
        Session["oReturnhomedate"] =dsct.Tables[0].Rows[0]["Returnhomedate"].ToString();// String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Returnhomedate"]);

        DataSet dsptsf = Queries.LoadFinanceContractDetails(sContractdetailsID);
        Session["Finance_Details_Id"] = dsptsf.Tables[0].Rows[0]["Finance_Details_Id"].ToString();
        Session["ofinancemethod"] = dsptsf.Tables[0].Rows[0]["Finance_Method"].ToString();
        Session["ocurrency"] = dsptsf.Tables[0].Rows[0]["currency"].ToString();
        Session["oaffiliate"] = dsptsf.Tables[0].Rows[0]["Affiliate_Type"].ToString();
        Session["ototalintax"] = dsptsf.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
        Session["odepamt"] = dsptsf.Tables[0].Rows[0]["Initial_Deposit_Percent"].ToString();
        Session["Initial_Deposit_Amount"] = dsptsf.Tables[0].Rows[0]["Initial_Deposit_Amount"].ToString();
        Session["obalpayable"] = dsptsf.Tables[0].Rows[0]["Balance_Payable"].ToString();
        Session["odepbal"] = dsptsf.Tables[0].Rows[0]["Initial_Deposit_Balance"].ToString();
        Session["ototalbalance"] = dsptsf.Tables[0].Rows[0]["Bal_Amount_Payable"].ToString();
        Session["opaymethod"] = dsptsf.Tables[0].Rows[0]["Payment_Method"].ToString();
        Session["onoinstallment"] = dsptsf.Tables[0].Rows[0]["No_Installments"].ToString();
        Session["oinstallment"] = dsptsf.Tables[0].Rows[0]["Installment_Amount"].ToString();
        Session["ofinance"] = dsptsf.Tables[0].Rows[0]["Finance_Type"].ToString();
        Session["oFinanceno"] = dsptsf.Tables[0].Rows[0]["Finance_No"].ToString();
        Session["oisgtrate"] = dsptsf.Tables[0].Rows[0]["IGSTrate"].ToString();
        Session["ointerestrate"] = dsptsf.Tables[0].Rows[0]["Interestrate"].ToString();
        Session["ofindocfee"] = dsptsf.Tables[0].Rows[0]["documentationfee"].ToString();
        Session["oigstamt"] = dsptsf.Tables[0].Rows[0]["IGST_Amount"].ToString();
        Session["onoemi"] = dsptsf.Tables[0].Rows[0]["No_Emi"].ToString();
        Session["oemiamt"] = dsptsf.Tables[0].Rows[0]["Emi_Installment"].ToString();
        Session["ofinmonth"] = dsptsf.Tables[0].Rows[0]["financeMonth"].ToString();
        Session["ooldLoanAgreement"] = dsptsf.Tables[0].Rows[0]["Old_Loan_AgreementNo"].ToString();
        Session["oregcollectionterm"] = dsptsf.Tables[0].Rows[0]["Registry_Collection_Term"].ToString();
        Session["oregcollamt"] = dsptsf.Tables[0].Rows[0]["Registry_Collection_Amt"].ToString();
        Session["obaladepamtdate"] = String.Format("{0:dd-MM-yyyy}", dsptsf.Tables[0].Rows[0]["BalanceDeposit_Date"]);
        Session["ooldloanamt"] = dsptsf.Tables[0].Rows[0]["Old_Loan_Amount"].ToString();
        Session["eurorate"] = dsptsf.Tables[0].Rows[0]["eurorate"].ToString();
        Session["loanamtINEuro"] = dsptsf.Tables[0].Rows[0]["loanamtINEuro"].ToString();
        Session["monthlyPremiumprotectionplan"] = dsptsf.Tables[0].Rows[0]["monthlyPremiumprotectionplan"].ToString();
        Session["Open_Loan_AgreementNo"] = dsptsf.Tables[0].Rows[0]["Open_Loan_AgreementNo"].ToString();

        DataSet dscrm = Queries.LoadCRM_details(sContractdetailsID);
        if (dscrm.Tables[0].Rows.Count == 0)
        {

        }
        else
        {
            Session["program_source"] = dscrm.Tables[0].Rows[0]["program_source"].ToString();
            Session["Referred_By"] = dscrm.Tables[0].Rows[0]["Referred_By"].ToString();
            Session["comment1"] = dscrm.Tables[0].Rows[0]["Referred_By"].ToString();
            Session["created_date"] = dscrm.Tables[0].Rows[0]["created_date"].ToString();
            Session["updated_date"] = dscrm.Tables[0].Rows[0]["updated_date"].ToString();
            Session["createdby"] = dscrm.Tables[0].Rows[0]["createdby"].ToString();
            Session["updatedby"] = dscrm.Tables[0].Rows[0]["updatedby"].ToString();
            Session["status"] = dscrm.Tables[0].Rows[0]["status"].ToString();



        }
        DataSet dscteam = Queries.LoadContractTeamDetails(sContractdetailsID);
        if (dscteam.Tables[0].Rows.Count == 0)
        {

        }
        else
        {
            Session["Rep_report"] = dscteam.Tables[0].Rows[0]["Rep_report"].ToString();
            Session["To_report"] = dscteam.Tables[0].Rows[0]["To_report"].ToString();
            Session["SMS_Update"] = dscteam.Tables[0].Rows[0]["SMS_Update"].ToString();
            Session["Approval_Comments"] = dscteam.Tables[0].Rows[0]["Approval_Comments"].ToString();
            Session["Updated_Date"] = dscteam.Tables[0].Rows[0]["Updated_Date"].ToString();
            Session["UpdatedBy"] = dscteam.Tables[0].Rows[0]["UpdatedBy"].ToString();
        }
        string repreport, toreport, sms;
        if (repreportCheckBox.Checked )
        {

            repreport = "Yes";
        }
        else
        {
            repreport = "No";
        }

        if (toreportCheckBox.Checked)
        {
            toreport = "Yes";
        }
        else
        {
            toreport = "No";
        }
        if (smsCheckBox.Checked)
        {
            sms = "Yes";
        }
        else
        {
            sms = "No";
        }
        DataSet dsstatchange = Queries.LoadStatus_ChangeDetails(sContractdetailsID);
        if (dsstatchange.Tables[0].Rows.Count == 0)
        {


        }
        else
        {
            Session["oSC_Previous_Status"] = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Comment"].ToString();
            Session["oSC_Updated_Status"] = dsstatchange.Tables[0].Rows[0]["SC_Updated_Status"].ToString();
            Session["oSC_Cancel_Group_Venue"] = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Group_Venue"].ToString();
            Session["oSC_Cancel_Reason"] = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Reason"].ToString();
            Session["oSC_Cancel_Date"] = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Date"].ToString();
            Session["oSC_Profile_ID"] = dsstatchange.Tables[0].Rows[0]["Profile_ID"].ToString();
            Session["oSC_User"] = dsstatchange.Tables[0].Rows[0]["SC_User"].ToString();
            Session["oContract_Finance_ID"] = dsstatchange.Tables[0].Rows[0]["Contract_Finance_ID"].ToString();
            Session["oSC_Update_Date"] = dsstatchange.Tables[0].Rows[0]["SC_Update_Date"].ToString();
            Session["oContract_num_new"] = dsstatchange.Tables[0].Rows[0]["Contract_num_new"].ToString();
            Session["oSC_Cancel_Type"] = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Type"].ToString();
            Session["oSC_Cancel_Comment"] = dsstatchange.Tables[0].Rows[0]["SC_Cancel_Comment"].ToString();
            Session["oSC_Withdraw_Date"] = dsstatchange.Tables[0].Rows[0]["SC_Withdraw_Date"].ToString();

        }


        string finance = financeradiobuttonlist.SelectedItem.Text;
        string mcfees = MCFeesTextBox.Text;
        string mcdate = String.Format("{0:dd-MM-yyyy}", MCdateTextBox.Text);
        string memberfee = memberfeeTextBox.Text;
        string memebercgst = memcgstTextBox.Text;
        string membersgst = memsgstTextBox.Text;
        string adhar = adharcardTextBox.Text.ToUpper();
        string pancrd = pancardnoTextBox.Text.ToUpper();
        string currency = currencyDropDownList.SelectedItem.Text;// Request.Form[currencyDropDownList.UniqueID];
        string affiliate = AffiliationvalueTextBox.Text;
        string totalintax = totalfinpriceIntaxTextBox.Text;
        string depamt = intialdeppercentTextBox.Text;
        string balpayable = baldepamtTextBox.Text;
        string depbal = balinitialdepamtTextBox.Text;
        string noinstallment = NoinstallmentTextBox.Text;
        string installment = installmentamtTextBox.Text;
        string totalbalance = balamtpayableTextBox.Text;
        string paymethod = PayMethodDropDownList.SelectedItem.Text;
        string baldepdate = String.Format("{0:dd-MM-yyyy}", baladepamtdateTextBox.Text);
       
        string regcollectionterm = regcollectiontermTextBox.Text;
        string regcollamt = regcollamtTextBox.Text;
        string oldloanagreementno;
        string contractgroup = contractgroupDropDownList.SelectedItem.Text;
        string contractvenue = contractvenueDropDownList.SelectedItem.Text; //Request.Form[contractvenueDropDownList.UniqueID];
        string returnhomedate=String.Format("{0:MM-dd-yyyy}", ReturnHomeDateTextBox.Text);// ReturnHomeDateTextBox.Text;
        string loanamt="0";
        string openLANo;
        if (woldLoanAgreementTextBox.Text==""|| woldLoanAgreementTextBox.Text==null|| woldLoanAgreementTextBox.Text=="0")
        {
            oldloanagreementno = "N/A";
        }
       else
        {
            oldloanagreementno = woldLoanAgreementTextBox.Text;
        }
     
        if (foldloanamountTextBox.Text == "" || foldloanamountTextBox.Text == null || foldloanamountTextBox.Text == "0")
        {
            loanamt = "0";
        }
        else
        {
              loanamt = foldloanamountTextBox.Text;

        }
        if (openLoanAgreementTextBox.Text == "" || openLoanAgreementTextBox.Text == null || openLoanAgreementTextBox.Text == "0")
        {
            openLANo = "";
        }
        else
        {
            openLANo = openLoanAgreementTextBox.Text;
        }
        
        string ncontractcomment = contractcommentTextBox.Text.Replace("'", "''");

        string contractremark = contractremarkTextBox.Text.Replace("'", "''");
        string prgmsrc = PrgmsrcTextBox.Text;
        string refby = RefByTextBox.Text;


        

        string d = dealdateTextBox.Text;
        DateTime dt = DateTime.ParseExact(d, "dd-MM-yyyy", CultureInfo.InvariantCulture);
        // for both "1/1/2000" or "25/1/2000" formats
        string newString = dt.ToString("MM/dd/yyyy");
        //  int dealwkno = Queries.GetWkNumber(Convert.ToDateTime(newString));
        int dealwkno = Queries.GetWkNumber(dt);
        string bu6;
        if (BUCheckBox.Checked)
        {
            bu6 = "Yes";
        }
        else
        {
            bu6 = "No";
        }
        string updown = null;

        if (upCheckBox.Checked)
        {
            updown = "Upgrade";
        }
        else if (downCheckBox.Checked)
        {
            updown = "Downgrade";
        }
        else
        {
            updown = "";
        }

        string financemethod = "", Financeno = "", finmonth = "", noemi = "", emiamt = "", findocfee = "", isgtrate = "", igstamt = "", interestrate = "", eurorate = "", loanamtINEuro = "", monthlyPremiumprotectionplan = "";
        if (finance == "Finance")
        {
            financemethod = financemethodDropDownList.SelectedItem.Text;//actually pashurance fiannce i.e finance type
            if(financemethod=="Pashuram Finance")
            {
                Financeno = FinancenoTextBox.Text;
                finmonth = finmonthTextBox.Text;
                noemi = noemiTextBox.Text;
                emiamt = emiamtTextBox.Text;
                findocfee = findocfeeTextBox.Text;
                isgtrate = isgtrateTextBox.Text;
                igstamt = igstamtTextBox.Text;
                interestrate = interestrateTextBox.Text;
                eurorate = "0";
                loanamtINEuro = "0";
                monthlyPremiumprotectionplan = "0";

            }
            else if (financemethod == "Crown Finance")
            {
                Financeno = FinancenoTextBox.Text;
                finmonth = finmonthTextBox.Text;
                noemi = noemiTextBox.Text;
                emiamt = emiamtTextBox.Text;
                findocfee = findocfeeTextBox.Text;
                isgtrate = "0";
                igstamt = "0";
                interestrate = interestrateTextBox.Text;
                eurorate = eurorateTextBox.Text;
                loanamtINEuro = loanamtINEuroTextBox.Text;
                monthlyPremiumprotectionplan = monthlyPremiumprotectionplanTextBox.Text;

            }
           

        }
        else
        {
            financemethod = "";
            Financeno = "0";
            finmonth = "";
            noemi = "0";
            emiamt = "0";
            findocfee = "0";
            isgtrate = "0";
            igstamt = "0";
            interestrate = "0";
            eurorate = "0";
            loanamtINEuro = "0";
            monthlyPremiumprotectionplan = "0";
        }
        string mcwaiver;
        if (mcRadioButtonList.Checked == true)
        {
            mcwaiver = "Yes";
        }
        else
        {
            mcwaiver = "No";

        }
        string contract = contracttypeTextBox.Text;
        string contractno = contractnoTextBox.Text.ToUpper().TrimEnd();
        int i;
        string inst = "Installment No";
        string iamt, idate, ia, idt;

        string loanbuofficer = LoanBUDropDownList.SelectedItem.Text;// LoanBUOfficerTextBox.Text.ToUpper();
        string canxcontno = CanxContractNoTextBox.Text.ToUpper();
        string csalesrep = contsalesrepTextBox.Text.ToUpper();// contsalesrepDropDownList.SelectedItem.Text;
        string cTomgr = TOManagerDropDownList.SelectedItem.Text;

        string buttonup = ButtonUpDropDownList.SelectedItem.Text;


        string dealdate = dealdateTextBox.Text;
        string dealstatus, canxdate;

        string ncompanyname = companynameTextBox.Text.ToUpper().Replace("'", "''");
        string ngstin = gstinTextBox.Text.ToUpper();
        string ncompanypanno = companypanoTextBox.Text.ToUpper();

        if (dealstatusDropDownList.SelectedItem.Text == "CANCELLED" || dealstatusDropDownList.SelectedItem.Text == "CANCELLED & REFUNDED")
        {
            dealstatus = dealstatusDropDownList.SelectedItem.Text;
            canxdate = DateTime.Now.ToString();
            string canceltype = canceltypeDropDownList.SelectedItem.Text;
            string cancelvg = canvgDropDownList.SelectedItem.Text;
            string canreason = canreasonDropDownList.SelectedItem.Text;
            string cancomment = cancommentTextBox.Text;
            string oldcontnumb = nmcontrcinoTextBox.Text;
            string oldstatus = Session["odealstatus"].ToString();
            int statuschangeexists = Queries.Status_ChangeDetailsExists(sContractdetailsID);
            if (statuschangeexists == 1)
            {
                int updatech = Queries.Updatestatus_change(cancelvg, canreason, canceltype, cancomment, canxdate, sContractdetailsID);

                if (String.Compare(Session["oSC_Cancel_Group_Venue"].ToString(), cancelvg) != 0)
                {
                    string act = "Cancel Venue Group changed from:" + Session["oSC_Cancel_Group_Venue"].ToString() + "To:" + cancelvg;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Cancel Venue Group Updated", Session["oSC_Cancel_Group_Venue"].ToString(), cancelvg);

                }
                else { }
                if (String.Compare(Session["oSC_Cancel_Reason"].ToString(), canreason) != 0)
                {
                    string act = "Cancel Reason changed from:" + Session["oSC_Cancel_Reason"].ToString() + "To:" + canreason;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Cancel Reason Updated", Session["oSC_Cancel_Reason"].ToString(), canreason);

                }
                else { }

                if (String.Compare(Session["oSC_Cancel_Type"].ToString(), canceltype) != 0)
                {
                    string act = "Cancel Reason changed from:" + Session["oSC_Cancel_Type"].ToString() + "To:" + canceltype;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Cancel Reason Updated", Session["oSC_Cancel_Type"].ToString(), canceltype);

                }
                else { }

                if (String.Compare(Session["oSC_Cancel_Comment"].ToString(), cancomment) != 0)
                {
                    string act = "Cancel Comment changed from:" + Session["oSC_Cancel_Comment"].ToString() + "To:" + cancomment;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Cancel Comment Updated", Session["oSC_Cancel_Comment"].ToString(), cancomment);

                }
                else { }
                if (String.Compare(Session["oSC_Update_Date"].ToString(), canxdate) != 0)
                {
                    string act = "Update Date changed from:" + Session["oSC_Update_Date"].ToString() + "To:" + canxdate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Update date Updated", Session["oSC_Update_Date"].ToString(), canxdate);

                }
                else { }
            }
            else
            {


                string scid = Queries2.GetStatusChangeID();
                int insertstatuschange = Queries2.InsertStatusChange(scid, oldstatus, dealstatus, cancelvg, canreason, DateTime.Now.ToShortDateString(), user, Session["ProfileID"].ToString(), sContractdetailsID, canxdate,
                contractnoTextBox.Text, canceltype, cancomment, "");
                string logstatcanx = "Status Change Details:" + " SC ID:" + scid + "," + "Previous Status :" + oldstatus + "," + "Updated Status:" + dealstatus + "," +
                     "Cancel Group Venue:" + cancelvg + "," + "Cancel Reason:" + canreason + "," + "Cancel Date:" + DateTime.Now.ToShortDateString() + "," + "User:" + user + "," +
                    "Profile ID:" + Session["ProfileID"].ToString() + "ContractdetailsID:" + sContractdetailsID + "," + "," + "Contractno:" + contractno + "," +
                    "Cancel Type:" + canceltype + "," + "Cancel Comment:" + cancomment + "," + "Withdraw_Date:" + "";
                int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, logstatcanx, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Status Change Details Added", "", logstatcanx);

            }

        }

        else if(dealstatusDropDownList.SelectedItem.Text=="Registered"|| dealstatusDropDownList.SelectedItem.Text == "REGISTERED")
        {
            dealstatus = dealstatusDropDownList.SelectedItem.Text;
            canxdate = Session["ocanxdate"].ToString();
            int auditexists = Queries2.Contract_Audit1Exists(contractnoTextBox.Text);
            if (auditexists == 1)
            {

            }
            else
            {
                int contractaudit = Queries2.InsertIntoContractAudit(profileidTextBox.Text, contractnoTextBox.Text, pfnameTextBox.Text, plnameTextBox.Text, DateTime.Now.ToString("yyyy-MM-dd"), "");
            }
        }
        else   
        {
            dealstatus = dealstatusDropDownList.SelectedItem.Text;
            canxdate = Session["ocanxdate"].ToString();
        }
        //deleting contracts
        //when contract is deleetd
        //********************************************************************************
        if (dealstatus == "DELETED" || dealstatus == "Deleted")
        {

            string act = "Contract No:" + contractno + "with contract details ID:" + sContractdetailsID + "Deleted from system";

            int rowexists2 = Queries.ContractDetailsIDInFinance_Details_IndianExists(sContractdetailsID);
            if (rowexists2 == 1)
            {
                //insert
                int delrow2 = Queries.ContractDetailsIDInDeleted_Finance_Details_IndianExists(sContractdetailsID);
                if (delrow2 == 1)
                { }
                else
                {
                    int insertdelfinancedetails = Queries.InsertDeletedFinance_Details_Indian(Session["Finance_Details_Id"].ToString(), Session["ProfileID"].ToString(), contractnoTextBox.Text, finance, currency, affiliate, totalintax, depamt, "", "", balpayable, depbal, totalbalance, paymethod, noinstallment,
                   installment, financemethod, Financeno, isgtrate, interestrate, findocfee, igstamt, noemi, emiamt, Session["ofinmonth"].ToString(), oldloanagreementno, regcollectionterm, regcollamt, sContractdetailsID, baladepamtdateTextBox.Text, loanamt, Session["eurorate"].ToString(), Session["loanamtINEuro"].ToString(), Session["monthlyPremiumprotectionplan"].ToString(), Session["Open_Loan_AgreementNo"].ToString());
                }
            }
            else { }

            int rowexists3 = Queries.ContractDetailsIDInContract_PA_IndianExists(sContractdetailsID);
            if (rowexists3 == 1)
            {

                int delrow3 = Queries.ContractDetailsIDInDeleted_Contract_PA_IndianExists(sContractdetailsID);
                if (delrow3 == 1) { }
                else
                {
                    DataSet dspa = Queries.contractPA(sContractdetailsID);
                    Session["Contract_PA_Id"] = dspa.Tables[0].Rows[0]["Contract_PA_Id"].ToString();
                    Session["ooldVolume"] = dspa.Tables[0].Rows[0]["oldVolume"].ToString();
                    Session["ooldadminfee"] = dspa.Tables[0].Rows[0]["oldadminfee"].ToString();
                    Session["ooldTotalTax"] = dspa.Tables[0].Rows[0]["oldTotalTax"].ToString();
                    Session["ooldDeposit"] = dspa.Tables[0].Rows[0]["oldDeposit"].ToString();
                    Session["ousdoldvolume"] = dspa.Tables[0].Rows[0]["usdoldvolume"].ToString();
                    Session["ousdoldadminfee"] = dspa.Tables[0].Rows[0]["usdoldadminfee"].ToString();
                    Session["ousdoldtax"] = dspa.Tables[0].Rows[0]["usdoldtax"].ToString();
                    Session["ousdolddeposit"] = dspa.Tables[0].Rows[0]["usdolddeposit"].ToString();
                    Session["oUSDConvertedVolume"] = dspa.Tables[0].Rows[0]["USDConvertedVolume"].ToString();
                    Session["oUSDConvertedAdminfee"] = dspa.Tables[0].Rows[0]["USDConvertedAdminfee"].ToString();
                    Session["oUSDConvertedTax"] = dspa.Tables[0].Rows[0]["USDConvertedTax"].ToString();
                    Session["oUSDConverteddeposit"] = dspa.Tables[0].Rows[0]["USDConverteddeposit"].ToString();
                    Session["oUSDConvertedTotalVolume"] = dspa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                   Session["oexchangerate"] = dspa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();

                    int insertdelpointsPA = Queries.InsertDeletedContract_PA_Indian(Session["Contract_PA_Id"].ToString(), Session["ProfileID"].ToString(), contractnoTextBox.Text,
                newpointsTextBox.Text, conversionfeeTextBox.Text, adminfeeTextBox.Text, totpurchpriceTextBox.Text, cgstTextBox.Text, sgstTextBox.Text, totalpriceInTaxTextBox.Text, depositTextBox.Text, balanceTextBox.Text, balancedueTextBox.Text, remarksTextBox.Text, sContractdetailsID,
                Session["ooldVolume"].ToString(), Session["ooldadminfee"].ToString(),Session["ooldTotalTax"].ToString(),
                 Session["ooldDeposit"].ToString(), Session["ousdoldvolume"].ToString(), Session["ousdoldadminfee"].ToString(), Session["ousdoldtax"].ToString(),
                 Session["ousdolddeposit"].ToString(), Session["oUSDConvertedVolume"].ToString(),Session["oUSDConvertedAdminfee"].ToString(), Session["oUSDConvertedTax"].ToString(),
                 Session["oUSDConverteddeposit"].ToString(), TotalTaxTextBox.Text, Session["oUSDConvertedTotalVolume"].ToString(), Session["oexchangerate"].ToString());
                }

            }
            else { }

            int rowexists4 = Queries.ContractDetailsIDInContract_Points_IndianExists(sContractdetailsID);
            if (rowexists4 == 1)
            {
                int delrow4 = Queries.ContractDetailsIDInDeleted_Contract_Points_IndianExists(sContractdetailsID);
                if (delrow4 == 1) { }
                else
                {
                    DataSet dspts = Queries.LoadNewPointsDetails(sContractdetailsID);
                    Session["ContractPoints_ID"] = dspts.Tables[0].Rows[0]["ContractPoints_ID"].ToString();

                    int insertpoints = Queries.InsertDeletedContract_Points_Indian(Session["ContractPoints_ID"].ToString(), Session["ProfileID"].ToString(), contractnoTextBox.Text, clubTextBox.Text, newpointsrightTextBox.Text, EntitlementPoinDropDownList.SelectedItem.Text, totalptrightsTextBox.Text, firstyrTextBox.Text, tenureTextBox.Text, lastyrTextBox.Text, NoPersonsTextBox.Text, sContractdetailsID);
                }
            }
            else { }
            int rowexists5 = Queries.ContractDetailsIDInContract_Trade_In_Points_IndianExists(sContractdetailsID);
            if (rowexists5 == 1)
            {
                int delrow5 = Queries.ContractDetailsIDInDeleted_Contract_Trade_In_Points_IndianExists(sContractdetailsID);
                if (delrow5 == 1)
                {

                }
                else
                {
                    DataSet dstip = Queries.LoadTradeinPointsDetails(sContractdetailsID);
                    Session["ContractTradeInPoint_ID"] = dstip.Tables[0].Rows[0]["ContractTradeInPoint_ID"].ToString();
                    int insertpoints = Queries.InsertDeletedContract_Trade_In_Points_Indian(Session["ContractTradeInPoint_ID"].ToString(), Session["ProfileID"].ToString(), contractnoTextBox.Text, tnmresortTextBox.Text, tipnopointsTextBox.Text, nmcontrcinoTextBox.Text, tipptsvalueTextBox.Text, clubTextBox.Text, newpointsrightTextBox.Text, EntitlementPoinDropDownList.SelectedItem.Text, totalptrightsTextBox.Text, firstyrTextBox.Text, tenureTextBox.Text, lastyrTextBox.Text, NoPersonsTextBox.Text, sContractdetailsID, tipactualptsvalueTextBox.Text, twoldmtypeTextBox.Text);
                }
            }
            else { }
            int rowexists6 = Queries.ContractDetailsIDInContract_Trade_In_Weeks_IndianExists(sContractdetailsID);
            if (rowexists6 == 1)
            {
                int delrow6 = Queries.ContractDetailsIDInDeleted_Contract_Trade_In_Weeks_IndianExists(sContractdetailsID);
                if (delrow6 == 1)
                { }
                else
                {
                    DataSet dstip = Queries.LoadTradeinWeeksDetails(sContractdetailsID);
                    Session["ContractTradeInWeeks_ID"] = dstip.Tables[0].Rows[0]["ContractTradeInWeeks_ID"].ToString();
                    int insertpoints = Queries.InsertDeletedContract_Trade_In_Weeks_Indian(Session["ContractTradeInWeeks_ID"].ToString(), Session["ProfileID"].ToString(), contractnoTextBox.Text, tnmresortTextBox.Text, tnmapttypeTextBox.Text, tnmseasonDropDownList.SelectedItem.Text, nmnowksTextBox.Text, nmcontrcinoTextBox.Text, tipptsvalueTextBox.Text, clubTextBox.Text, newpointsrightTextBox.Text, EntitlementPoinDropDownList.SelectedItem.Text, totalptrightsTextBox.Text, firstyrTextBox.Text, tenureTextBox.Text, lastyrTextBox.Text, NoPersonsTextBox.Text, sContractdetailsID, twoldmtypeTextBox.Text,tipactualptsvalueTextBox.Text);
                }
            }
            else { }
            int rowexists7 = Queries.ContractDetailsIDInContract_Indian_Deposit_ReceiptExists(sContractdetailsID);
            int ik;
            if (rowexists7 == 1)
            {
                int delrow7 = Queries.ContractDetailsIDInDeleted_Contract_Indian_Deposit_ReceiptExists(sContractdetailsID);
                if (delrow7 == 1) { }
                else
                {
                    DataSet dsrec = Queries.LoadContract_Indian_Deposit_Receipt(sContractdetailsID);
                    for (ik = 0; ik < dsrec.Tables[0].Rows.Count; ik++)
                    {

                        Session["Deposit_Receipt_Id"] = dsrec.Tables[0].Rows[ik]["Deposit_Receipt_Id"].ToString();
                        Session["oReceipt_No"] = dsrec.Tables[0].Rows[ik]["Receipt_No"].ToString();
                        Session["oReceipt_Date"] = dsrec.Tables[0].Rows[ik]["Receipt_Date"].ToString();
                        Session["place_supply"] = dsrec.Tables[0].Rows[ik]["place_supply"].ToString();
                        Session["state"] = dsrec.Tables[0].Rows[ik]["state"].ToString();
                        Session["state_code"] = dsrec.Tables[0].Rows[ik]["state_code"].ToString();
                        Session["Product_Name"] = dsrec.Tables[0].Rows[ik]["Product_Name"].ToString();
                        Session["SAC"] = dsrec.Tables[0].Rows[ik]["SAC"].ToString();
                        Session["oAmount"] = dsrec.Tables[0].Rows[ik]["Amount"].ToString();
                        Session["otaxable_value"] = dsrec.Tables[0].Rows[ik]["taxable_value"].ToString();
                        Session["ocgstrate"] = dsrec.Tables[0].Rows[ik]["cgstrate"].ToString();
                        Session["ocgstamt"] = dsrec.Tables[0].Rows[ik]["cgstamt"].ToString();
                        Session["osgstrate"] = dsrec.Tables[0].Rows[ik]["sgstrate"].ToString();
                        Session["osgstamt"] = dsrec.Tables[0].Rows[ik]["sgstamt"].ToString();
                        Session["ototalamt"] = dsrec.Tables[0].Rows[ik]["totalamt"].ToString();
                        Session["oPayment_Mode"] = dsrec.Tables[0].Rows[ik]["Payment_Mode"].ToString();
                        Session["oactual_currency"] = dsrec.Tables[0].Rows[ik]["actual_currency"].ToString();
                        Session["oconverted_currency"] = dsrec.Tables[0].Rows[ik]["converted_currency"].ToString();
                        Session["oConverted_rate"] = dsrec.Tables[0].Rows[ik]["Converted_rate"].ToString();
                        Session["oExchangedValue_date"] = dsrec.Tables[0].Rows[ik]["ExchangedValue_date"].ToString();
                        Session["oActual_Amt"] = dsrec.Tables[0].Rows[ik]["Actual_Amt"].ToString();
                        Session["Receipt_Status"] = dsrec.Tables[0].Rows[ik]["Receipt_Status"].ToString();
                        Session["receipttype"] = dsrec.Tables[0].Rows[ik]["receipttype"].ToString();
                        Session["payment_date"] = dsrec.Tables[0].Rows[ik]["payment_date"].ToString();
                        Session["Total_deposit"] = dsrec.Tables[0].Rows[ik]["Total_deposit"].ToString();
                        Session["USDTotal_deposit"] = dsrec.Tables[0].Rows[ik]["USDTotal_deposit"].ToString();
                        Session["Previous_DepositAmt"] = dsrec.Tables[0].Rows[ik]["Previous_DepositAmt"].ToString();
                        Session["floodcess"] = dsrec.Tables[0].Rows[ik]["floodcess"].ToString();

                        int insertdelreceipt = Queries.InsertDeletedContract_Indian_Deposit_Receipt(
                       Session["Deposit_Receipt_Id"].ToString(), sContractdetailsID, contractnoTextBox.Text, Session["oReceipt_No"].ToString(), Session["oReceipt_Date"].ToString(),
                        Session["place_supply"].ToString(), Session["state"].ToString(), Session["state_code"].ToString(), Session["Product_Name"].ToString(), Session["SAC"].ToString(), Session["oAmount"].ToString(), Session["otaxable_value"].ToString(), Session["ocgstrate"].ToString(), Session["ocgstamt"].ToString(), Session["osgstrate"].ToString(),
                        Session["osgstamt"].ToString(), Session["ototalamt"].ToString(),
                        Session["oPayment_Mode"].ToString(), Session["oactual_currency"].ToString(), Session["oconverted_currency"].ToString(),
                        Session["oConverted_rate"].ToString(), Session["oExchangedValue_date"].ToString(), Session["oActual_Amt"].ToString(),
                        Session["Receipt_Status"].ToString(), Session["receipttype"].ToString(), Session["payment_date"].ToString(),
                       Session["Total_deposit"].ToString(),
                        Session["USDTotal_deposit"].ToString(),
                        Session["Previous_DepositAmt"].ToString(), Session["floodcess"].ToString());
                    }
                }

            }
            else { }
            int rowexists7d = Queries.ContractDetailsIDInContract_Indian_Deposit_Receipt_DeletedExists(sContractdetailsID);
            int k;
            if (rowexists7d == 1)
            {
                int delrow7 = Queries.ContractDetailsIDInDeleted_Contract_Indian_Deposit_ReceiptExists(sContractdetailsID);
                if (delrow7 == 1) { }
                else
                {
                    DataSet dsrec = Queries.LoadContract_Indian_Deposit_Receipt_Deleted(sContractdetailsID);
                    for (k = 0; k < dsrec.Tables[0].Rows.Count; k++)
                    {

                        Session["Deposit_Receipt_Id"] = dsrec.Tables[0].Rows[k]["Deposit_Receipt_Id"].ToString();
                        Session["oReceipt_No"] = dsrec.Tables[0].Rows[k]["Receipt_No"].ToString();
                        Session["oReceipt_Date"] = dsrec.Tables[0].Rows[k]["Receipt_Date"].ToString();
                        Session["place_supply"] = dsrec.Tables[0].Rows[k]["place_supply"].ToString();
                        Session["state"] = dsrec.Tables[0].Rows[k]["state"].ToString();
                        Session["state_code"] = dsrec.Tables[0].Rows[k]["state_code"].ToString();
                        Session["Product_Name"] = dsrec.Tables[0].Rows[k]["Product_Name"].ToString();
                        Session["SAC"] = dsrec.Tables[0].Rows[k]["SAC"].ToString();
                        Session["oAmount"] = dsrec.Tables[0].Rows[k]["Amount"].ToString();
                        Session["otaxable_value"] = dsrec.Tables[0].Rows[k]["taxable_value"].ToString();
                        Session["ocgstrate"] = dsrec.Tables[0].Rows[k]["cgstrate"].ToString();
                        Session["ocgstamt"] = dsrec.Tables[0].Rows[k]["cgstamt"].ToString();
                        Session["osgstrate"] = dsrec.Tables[0].Rows[k]["sgstrate"].ToString();
                        Session["osgstamt"] = dsrec.Tables[0].Rows[k]["sgstamt"].ToString();
                        Session["ototalamt"] = dsrec.Tables[0].Rows[k]["totalamt"].ToString();
                        Session["oPayment_Mode"] = dsrec.Tables[0].Rows[k]["Payment_Mode"].ToString();
                        Session["oactual_currency"] = dsrec.Tables[0].Rows[k]["actual_currency"].ToString();
                        Session["oconverted_currency"] = dsrec.Tables[0].Rows[k]["converted_currency"].ToString();
                        Session["oConverted_rate"] = dsrec.Tables[0].Rows[k]["Converted_rate"].ToString();
                        Session["oExchangedValue_date"] = dsrec.Tables[0].Rows[k]["ExchangedValue_date"].ToString();
                        Session["oActual_Amt"] = dsrec.Tables[0].Rows[k]["Actual_Amt"].ToString();
                        Session["Receipt_Status"] = dsrec.Tables[0].Rows[k]["Receipt_Status"].ToString();
                        Session["receipttype"] = dsrec.Tables[0].Rows[k]["receipttype"].ToString();
                        Session["payment_date"] = dsrec.Tables[0].Rows[k]["payment_date"].ToString();
                        Session["Total_deposit"] = dsrec.Tables[0].Rows[k]["Total_deposit"].ToString();
                        Session["USDTotal_deposit"] = dsrec.Tables[0].Rows[k]["USDTotal_deposit"].ToString();
                        Session["Previous_DepositAmt"] = dsrec.Tables[0].Rows[k]["Previous_DepositAmt"].ToString();
                        Session["floodcess"] = dsrec.Tables[0].Rows[k]["floodcess"].ToString();
                        int insertdelreceipt = Queries.InsertDeletedContract_Indian_Deposit_Receipt(
                      Session["Deposit_Receipt_Id"].ToString(), sContractdetailsID, contractnoTextBox.Text, Session["oReceipt_No"].ToString(), Session["oReceipt_Date"].ToString(),
                        Session["place_supply"].ToString(), Session["state"].ToString(), Session["state_code"].ToString(), Session["Product_Name"].ToString(), Session["SAC"].ToString(), Session["oAmount"].ToString(), Session["otaxable_value"].ToString(), Session["ocgstrate"].ToString(), Session["ocgstamt"].ToString(), Session["osgstrate"].ToString(),
                        Session["osgstamt"].ToString(), Session["ototalamt"].ToString(),
                        Session["oPayment_Mode"].ToString(), Session["oactual_currency"].ToString(), Session["oconverted_currency"].ToString(),
                        Session["oConverted_rate"].ToString(), Session["oExchangedValue_date"].ToString(), Session["oActual_Amt"].ToString(), Session["Receipt_Status"].ToString(), Session["receipttype"].ToString(), Session["payment_date"].ToString(),
                         Session["Total_deposit"].ToString(),
                        Session["USDTotal_deposit"].ToString(),
                        Session["Previous_DepositAmt"].ToString(), Session["floodcess"].ToString());

                    }
                }

            }
            else { }


            int rowexists8 = Queries.ContractDetailsIDInContract_Fractional_IndianExists(sContractdetailsID);
            if (rowexists8 == 1)
            {
                int delrow8 = Queries.ContractDetailsIDInDeleted_Contract_Fractional_IndianExists(sContractdetailsID);
                if (delrow8 == 1)
                { }
                else
                {
                    DataSet dsfract = Queries.LoadFractionalIndianDetails(sContractdetailsID);
                    Session["ContractFractionalIndian_ID"] = dsfract.Tables[0].Rows[0]["ContractFractionalIndian_ID"].ToString();
                    Session["otifleaseback"] = dsfract.Tables[0].Rows[0]["leaseback"].ToString();
                    Session["otifMc_Charges"] = dsfract.Tables[0].Rows[0]["Mc_Charges"].ToString();
                    int insertrow = Queries.InsertDeletedContract_Fractional_Indian(Session["ContractFractionalIndian_ID"].ToString(), Session["ProfileID"].ToString(),
                       contractnoTextBox.Text, fwresortDropDownList.SelectedItem.Text, fwresidencenoDropDownList.SelectedItem.Text,
                    fwresidencetypeDropDownList.SelectedItem.Text, fwfractIntDropDownList.SelectedItem.Text, fwentitlementDropDownList.SelectedItem.Text,
                    fwfirstyrTextBox.Text, fwtenureTextBox.Text, fwlastyrTextBox.Text, Session["otifleaseback"].ToString(), Session["otifMc_Charges"].ToString(), sContractdetailsID);
                }

            }
            else { }

            int rowexists9 = Queries.ContractDetailsIDIContract_Trade_In_Fractional_IndianExists(sContractdetailsID);
            if (rowexists9 == 1)
            {
                int delrow9 = Queries.ContractDetailsIDInDeleted_Contract_Trade_In_Fractional_IndianExists(sContractdetailsID);
                if (delrow9 == 1)
                { }
                else
                {
                    DataSet dsfract = Queries.LoadFractionalIndianTradeInDetails(sContractdetailsID);
                    Session["ContractTrade_InFractional_ID"] = dsfract.Tables[0].Rows[0]["ContractTrade_InFractional_ID"].ToString();
                    string season = Request.Form[tnmseasonDropDownList.UniqueID];
                    if (season == null || season == "")
                    {
                        season = "";
                    }
                    else
                    {
                        season = Request.Form[tnmseasonDropDownList.UniqueID];
                    }
                    int insertrow = Queries.InsertDeletedContract_Trade_In_Fractional_Indian(
                         Session["ContractTrade_InFractional_ID"].ToString(), Session["ProfileID"].ToString(), contractnoTextBox.Text,
                          oldcontracttypeDropDownList.SelectedItem.Text, tnmresortTextBox.Text, tnmapttypeTextBox.Text, season, nmnowksTextBox.Text, tipnopointsTextBox.Text, tipptsvalueTextBox.Text, nmcontrcinoTextBox.Text, sContractdetailsID, twoldmtypeTextBox.Text);
                }
            }
            else { }

            int rowexists10 = Queries.ContractDetailsIDInContract_Fractional_PA_IndianExists(sContractdetailsID);
            if (rowexists10 == 1)
            {
                int delrow10 = Queries.ContractDetailsIDInDeleted_Contract_Fractional_PA_IndianExists(sContractdetailsID);
                if (delrow10 == 1)
                { }
                else
                {
                    DataSet dsfpa = Queries.LoadfractionalPA(sContractdetailsID);
                    Session["Contract_Fractional_PA_Id"] = dsfpa.Tables[0].Rows[0]["Contract_Fractional_PA_Id"].ToString();
                    Session["oFoldVolume"] = dsfpa.Tables[0].Rows[0]["FoldVolume"].ToString();
                    Session["oFoldadminfee"] = dsfpa.Tables[0].Rows[0]["Foldadminfee"].ToString();
                    Session["oFoldTotalTax"] = dsfpa.Tables[0].Rows[0]["FoldTotalTax"].ToString();
                    Session["oFoldDeposit"] = dsfpa.Tables[0].Rows[0]["FoldDeposit"].ToString();
                    Session["oFusdoldvolume"] = dsfpa.Tables[0].Rows[0]["Fusdoldvolume"].ToString();
                    Session["oFusdoldadminfee"] = dsfpa.Tables[0].Rows[0]["Fusdoldadminfee"].ToString();
                    Session["oFusdoldtax"] = dsfpa.Tables[0].Rows[0]["Fusdoldtax"].ToString();
                    Session["oFusdolddeposit"] = dsfpa.Tables[0].Rows[0]["Fusdolddeposit"].ToString();
                    Session["oUSDConvertedFVolume"] = dsfpa.Tables[0].Rows[0]["USDConvertedFVolume"].ToString();
                    Session["oUSDConvertedFAdminfee"] = dsfpa.Tables[0].Rows[0]["USDConvertedFAdminfee"].ToString();
                    Session["oUSDConvertedFTax"] = dsfpa.Tables[0].Rows[0]["USDConvertedFTax"].ToString();
                    Session["oUSDConvertedFdeposit"] = dsfpa.Tables[0].Rows[0]["USDConvertedFdeposit"].ToString();
                    Session["oUSDConvertedTotalVolume"] = dsfpa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                    Session["oexchangerate"] = dsfpa.Tables[0].Rows[0]["exchangerate"].ToString();

                    int insertrow = Queries.InsertDeletedContract_Fractional_PA_Indian(Session["Contract_Fractional_PA_Id"].ToString(), Session["ProfileID"].ToString(),
                       contractnoTextBox.Text, adminfeeTextBox.Text, AdministrationFeesTextBox.Text, cgstTextBox.Text, sgstTextBox.Text, totpurchpriceTextBox.Text,
                        totalpriceInTaxTextBox.Text, depositTextBox.Text, balanceTextBox.Text, balancedueTextBox.Text, remarksTextBox.Text, ftradeinvalueTextBox.Text, ftotalvalueTextBox.Text, sContractdetailsID,
                         Session["oFoldVolume"].ToString(), Session["oFoldadminfee"].ToString(), Session["oFoldTotalTax"].ToString(),
                         Session["oFoldDeposit"].ToString(), Session["oFusdoldvolume"].ToString(), Session["oFusdoldadminfee"].ToString(),
                         Session["oFusdoldtax"].ToString(), Session["oFusdolddeposit"].ToString(), Session["oUSDConvertedFVolume"].ToString(),
                         Session["oUSDConvertedFAdminfee"].ToString(), Session["oUSDConvertedFTax"].ToString(), Session["oUSDConvertedFdeposit"].ToString(),
                         TotalTaxTextBox.Text, Session["oUSDConvertedTotalVolume"].ToString(), Session["oexchangerate"].ToString());
                }


            }
            else { }
            int rowexists11 = Queries.ContractDetailsIDContractNo_OthernamesExists(sContractdetailsID);
            if (rowexists11 == 1)
            {
                int delrow11 = Queries.ContractDetailsIDDeleted_ContractNo_OthernamesExists(sContractdetailsID);
                if (delrow11 == 1) { }
                else
                {
                    DataSet dssor = Queries.LoadSORnAddtionalNames(sContractdetailsID);
                    int a;
                        for (a = 0; a < dssor.Tables[0].Rows.Count; a++)
                        {
                            Session["otherNamesID"] = dssor.Tables[0].Rows[a]["otherNamesID"].ToString();
                            Session["Type"] = dssor.Tables[0].Rows[a]["Type"].ToString();
                            Session["Name"] = dssor.Tables[0].Rows[a]["Name"].ToString();
                            Session["Address"] = dssor.Tables[0].Rows[a]["Address"].ToString();
                            Session["State"] = dssor.Tables[0].Rows[a]["State"].ToString();
                            Session["Country"] = dssor.Tables[0].Rows[a]["Country"].ToString();
                            Session["Postcode"] = dssor.Tables[0].Rows[a]["Postcode"].ToString();
                            Session["Status"] = dssor.Tables[0].Rows[a]["Status"].ToString();
                            Session["Document_name"] = dssor.Tables[0].Rows[a]["Document_name"].ToString();
                            Session["Added_Date"] = dssor.Tables[0].Rows[a]["Added_Date"].ToString();

                            int insert = Queries.InsertDeletedContractNo_Othernames(
                            Session["otherNamesID"].ToString(), contractnoTextBox.Text, sContractdetailsID,
                            Session["Type"].ToString(),
                            Session["Name"].ToString(),
                            Session["Address"].ToString(),
                            Session["State"].ToString(),
                            Session["Country"].ToString(),
                            Session["Postcode"].ToString(),
                            Session["Status"].ToString(),
                            Session["Document_name"].ToString(),
                            Session["Added_Date"].ToString());

                        }
                    
                }

            }
            else { }

            int rowexists13 = Queries.ContractDetailsIDCRM_detailsExists(sContractdetailsID);
            if (rowexists13 == 1)
            {
                int delrow13 = Queries.ContractDetailsIDDeleted_CRM_detailsExists(sContractdetailsID);
                if (delrow13 == 1) { }
                else
                {
                    DataSet dscrmd = Queries.LoadCRM_details(sContractdetailsID);
                    Session["CRM_ID"] = dscrmd.Tables[0].Rows[0]["CRM_ID"].ToString();
                    Session["program_source"] = dscrmd.Tables[0].Rows[0]["program_source"].ToString();
                    Session["Referred_By"] = dscrmd.Tables[0].Rows[0]["Referred_By"].ToString();
                    Session["updated_date"] = dscrmd.Tables[0].Rows[0]["updated_date"].ToString();
                    Session["updatedby"] = dscrmd.Tables[0].Rows[0]["updatedby"].ToString();
                    Session["comment1"] = dscrmd.Tables[0].Rows[0]["updatedby"].ToString();
                    Session["created_date"] = dscrmd.Tables[0].Rows[0]["created_date"].ToString();
                    Session["createdby"] = dscrmd.Tables[0].Rows[0]["createdby"].ToString();
                    Session["status"] = dscrmd.Tables[0].Rows[0]["status"].ToString();
                    int insertrow = Queries.InsertDeletedCRM_details(Session["CRM_ID"].ToString(), Session["ProfileID"].ToString(), sContractdetailsID,
                    Session["program_source"].ToString(),
                    Session["Referred_By"].ToString(),
                    Session["updated_date"].ToString(),
                    Session["updatedby"].ToString(),
                    Session["comment1"].ToString(),
                    Session["created_date"].ToString(),
                    Session["createdby"].ToString(),
                    Session["status"].ToString());
                }



            }
            else { }
            int rowexists14 = Queries.ContractDetailsIDContractTeamDetailsExists(sContractdetailsID);
            if (rowexists14 == 1)
            {
                int delrow14 = Queries.ContractDetailsIDDeleted_ContractTeamDetailsExists(sContractdetailsID);
                if (delrow14 == 1) { }
                else
                {
                    DataSet dsctd = Queries.LoadContractTeamDetails(sContractdetailsID);
                    Session["TeamDetailsID"] = dsctd.Tables[0].Rows[0]["TeamDetailsID"].ToString();
                    Session["Approval_Comments"] = dsctd.Tables[0].Rows[0]["Approval_Comments"].ToString();
                    Session["Rep_report"] = dsctd.Tables[0].Rows[0]["Rep_report"].ToString();
                    Session["To_report"] = dsctd.Tables[0].Rows[0]["To_report"].ToString();
                    Session["SMS_Update"] = dsctd.Tables[0].Rows[0]["SMS_Update"].ToString();
                    Session["Created_Date"] = dsctd.Tables[0].Rows[0]["Created_Date"].ToString();
                    Session["CreatedBy"] = dsctd.Tables[0].Rows[0]["CreatedBy"].ToString();
                    Session["Updated_Date"] = dsctd.Tables[0].Rows[0]["Updated_Date"].ToString();
                    Session["UpdatedBy"] = dsctd.Tables[0].Rows[0]["UpdatedBy"].ToString();

                    int insertrow = Queries.InsertDeletedContractTeamDetails(Session["TeamDetailsID"].ToString(), sContractdetailsID,
                         Session["Approval_Comments"].ToString(), Session["Rep_report"].ToString(), Session["To_report"].ToString(), Session["SMS_Update"].ToString(),
                          Session["Created_Date"].ToString(), Session["CreatedBy"].ToString(), Session["Updated_Date"].ToString(), Session["UpdatedBy"].ToString());

                }

            }
            else { }



            int rowexists16 = Queries.ContractDetailsIDContract_Installments_IndianExists(sContractdetailsID);
            if (rowexists16 == 1)
            {
                int delrow16 = Queries.ContractDetailsIDDeleted_Contract_Installments_IndianExists(sContractdetailsID);
                if (delrow16 == 1) { }
                else
                {
                    DataSet dsin = Queries.LoadcontractInstallment(sContractdetailsID);//.Text);
                    for (int j = 0; j < dsin.Tables[0].Rows.Count; j++)
                    {
                        string Installment_IDo = dsin.Tables[0].Rows[j]["Installment_ID"].ToString();


                        string Installment_noo = dsin.Tables[0].Rows[j]["Installment_no"].ToString();
                        string Installment_Amounto = dsin.Tables[0].Rows[j]["Installment_Amount"].ToString();
                        string Installment_Dateo = dsin.Tables[0].Rows[j]["Installment_Date"].ToString();
                        string Installment_Invoice_Noo = dsin.Tables[0].Rows[j]["Installment_Invoice_No"].ToString();
                        string installment_mode = dsin.Tables[0].Rows[j]["Paymentmode"].ToString();
                        int insertdel = Queries.InsertDeletedContract_Installments_Indian(Installment_IDo, Session["ProfileID"].ToString(), contractnoTextBox.Text,
                           Installment_noo, Installment_Amounto, Installment_Dateo, Installment_Invoice_Noo, sContractdetailsID, installment_mode);
                    }
                }

            }
            else { }

            int rowexists1 = Queries.ContractDetailsIDIContractDetailsExists(sContractdetailsID);
            if (rowexists1 == 1)
            {
                int delrow1 = Queries.ContractDetailsIDDeleted_ContractDetails_IndianExists(sContractdetailsID);
                if (delrow1 == 1) { }
                else
                {
                    int insertdelcontractdetails = Queries.InsertDeletedContractDetails_Indian(contractnoTextBox.Text, Session["ProfileID"].ToString(), contsalesrepTextBox.Text,
                  TOManagerDropDownList.SelectedItem.Text, ButtonUpDropDownList.SelectedItem.Text, dealdateTextBox.Text,
                  dealstatusDropDownList.SelectedItem.Text, Session["Contract_CreatedDate"].ToString(), Session["oContractUpdatedDate"].ToString(),
                   contracttypeTextBox.Text, mcwaiver, financeradiobuttonlist.SelectedItem.Text,
                  contractremarkTextBox.Text, pancardnoTextBox.Text.ToUpper(), adharcardTextBox.Text.ToUpper(), memberfee, Session["omcdate"].ToString(),
                  memberfee, memebercgst, membersgst, CanxContractNoTextBox.Text, sContractdetailsID, Session["ocanxdate"].ToString(),
                  LoanBUDropDownList.SelectedItem.Text, gstinTextBox.Text.ToUpper(), companypanoTextBox.Text.ToUpper(), dealwkno.ToString(), "", "",
                  contractcommentTextBox.Text, Session["Contract_createdUser"].ToString(), bu6, updown, Session["oExpirydate"].ToString(), Session["oCommence_date"].ToString(), Session["oContract_group"].ToString(), Session["oContract_Venue"].ToString(), Session["oReturnhomedate"].ToString());
                }

            }
            else { }
            int rowexists2d = Queries.ContractDetailsIDInFinance_Details_IndianExists(sContractdetailsID);
            if (rowexists2d == 1)
            {
                //delete
                int rows2 = Queries.DeleteFinance_Details_Indian(sContractdetailsID);

            }
            else { }

            int rowexists3d = Queries.ContractDetailsIDInContract_PA_IndianExists(sContractdetailsID);
            if (rowexists3d == 1)
            {

                int rows3 = Queries.DeleteContract_PA_Indian(sContractdetailsID);

            }
            else { }

            int rowexists4d = Queries.ContractDetailsIDInContract_Points_IndianExists(sContractdetailsID);
            if (rowexists4d == 1)
            {

                int rows4 = Queries.DeleteContract_Points_Indian(sContractdetailsID);
            }
            else { }
            int rowexists5d = Queries.ContractDetailsIDInContract_Trade_In_Points_IndianExists(sContractdetailsID);
            if (rowexists5d == 1)
            {

                int rows5 = Queries.DeleteContract_Trade_In_Points_Indian(sContractdetailsID);
            }
            else { }
            int rowexists6d = Queries.ContractDetailsIDInContract_Trade_In_Weeks_IndianExists(sContractdetailsID);
            if (rowexists6d == 1)
            {

                int rows6 = Queries.DeleteContract_Trade_In_Weeks_Indian(sContractdetailsID);
            }
            else { }
            int rowexists7dr = Queries.ContractDetailsIDInContract_Indian_Deposit_ReceiptExists(sContractdetailsID);
          
            if (rowexists7dr == 1)
            {


                int rows7 = Queries.DeleteContract_Indian_Deposit_Receipt(sContractdetailsID);
            }
            else { }
            int rowexists7dd = Queries.ContractDetailsIDInContract_Indian_Deposit_Receipt_DeletedExists(sContractdetailsID);
           
            if (rowexists7dd == 1)
            {
                int rows7d = Queries.DeleteContract_Indian_Deposit_ReceiptDeleted(sContractdetailsID);
            }
            else { }


            int rowexists8d = Queries.ContractDetailsIDInContract_Fractional_IndianExists(sContractdetailsID);
            if (rowexists8d == 1)
            {

                int rows8 = Queries.DeleteContract_Fractional_Indian(sContractdetailsID);
            }
            else { }

            int rowexists9d = Queries.ContractDetailsIDIContract_Trade_In_Fractional_IndianExists(sContractdetailsID);
            if (rowexists9d == 1)
            {

                int rows9 = Queries.DeleteContract_Trade_In_Fractional_Indian(sContractdetailsID);
            }
            else { }

            int rowexists10d = Queries.ContractDetailsIDInContract_Fractional_PA_IndianExists(sContractdetailsID);
            if (rowexists10d == 1)
            {


                int rows10 = Queries.DeleteContract_Fractional_PA_Indian(sContractdetailsID);
            }
            else { }
            int rowexists11d = Queries.ContractDetailsIDContractNo_OthernamesExists(sContractdetailsID);
            if (rowexists11d == 1)
            {
                int rows13 = Queries.DeleteContractNo_Othernamestablerows(sContractdetailsID);
            }
            else { }
            int rowexists12d = Queries.ContractDetailsIDFinancebreakupExists(sContractdetailsID);
            if (rowexists12d == 1)
            {

                int rows18 = Queries.DeleteFinance_Breakup(sContractdetailsID);
            }
            else { }
            int rowexists13d = Queries.ContractDetailsIDCRM_detailsExists(sContractdetailsID);
            if (rowexists13d == 1)
            {
                int rows17 = Queries.DeleteCRM_details(sContractdetailsID);
            }
            else { }
            int rowexists14d = Queries.ContractDetailsIDContractTeamDetailsExists(sContractdetailsID);
            if (rowexists14d == 1)
            {
                int rows16 = Queries.DeleteContractTeamDetails(sContractdetailsID);
            }
            else { }

            int rowexists15d = Queries.ContractDetailsIDContract_Installments_Indian_DeletedExists(sContractdetailsID);
            if (rowexists15d == 1)
            {
                int rows14 = Queries.DeleteContract_Installments_Indian_Deleted(sContractdetailsID);
            }
            else { }

            int rowexists16d = Queries.ContractDetailsIDContract_Installments_IndianExists(sContractdetailsID);
            if (rowexists16d == 1)
            {
                int rows14 = Queries.DeleteContract_Installments_IndianRows(sContractdetailsID);
            }
            else { }
            
            int rowexists1d = Queries.ContractDetailsIDIContractDetailsExists(sContractdetailsID);
            if (rowexists1d == 1)
            {


                int rows1 = Queries.DeleteContractDetails_Indian(sContractdetailsID);
            }
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Deleted", "Contract No:" + contractno + " with contractdetailsid:" + sContractdetailsID, "");

            Response.Redirect("~/Contractsite/ContractSearch.aspx?name=EditContract");


        }
        else { }
        //*********************************************************************************************

        //if (String.Compare(Session["contractno"].ToString(), contractno) != 0)
        //{
        //int contractnoindb = Queries.ContractNoExistsBeforeUpdate(contractno);
        //if (contractnoindb == 1)
        //{
        //string msg = "Contract exist";
        //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Warning", "pele('" + msg + "')", true);
        //contractnoTextBox.Text = Session["contractno"].ToString();
        //no changes to contractno other details can be updated



        //  }//if block -contractnoindb

        //else
        //{

        //get distinct deposit mode
        string dmode = Queries.GetDistinctReceiptMode(sContractdetailsID);
        string installmentmode;
        if(dmode==null||dmode=="")
        {
            installmentmode = "";
        }
        else
        {
            installmentmode = dmode;
        }


        if (String.Compare(Session["contractno"].ToString(), contractno) != 0)
        {
            //check if contractno exists
            int contractnoindb = Queries.ContractNoExistsBeforeUpdate(contractno);
            if (contractnoindb == 1)
            {

            }//if block -contractnoindb
            else
            {

                if (Queries.ContractDetailsIDIContractDetailsExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContractDetails_IndianContractNoOnly(contractno, sContractdetailsID);

                }
                else { }
                if (Queries.ContractDetailsIDInFinance_Details_IndianExists(sContractdetailsID) == 1)
                {

                }
                else { }
                if (Queries.ContractDetailsIDInContract_PA_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_PA_IndianContractNoOnly(contractno, sContractdetailsID);

                }
                else { }

                if (Queries.ContractDetailsIDInContract_Points_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_Points_IndianContractNoOnly(contractno, sContractdetailsID);
                }
                else { }

                if (Queries.ContractDetailsIDInContract_Trade_In_Points_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_Trade_In_Points_IndianContractNoOnly(contractno, sContractdetailsID);
                }
                else { }

                if (Queries.ContractDetailsIDInContract_Trade_In_Weeks_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_Trade_In_Weeks_IndianContractNoOnly(contractno, sContractdetailsID);
                }
                else { }


                if (Queries.ContractDetailsIDInContract_Fractional_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_Fractional_IndianContractNoOnly(contractno, sContractdetailsID);
                }
                else { }

                if (Queries.ContractDetailsIDIContract_Trade_In_Fractional_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_Trade_In_Fractional_IndianContractNoOnly(contractno, sContractdetailsID);
                }
                else { }


                if (Queries.ContractDetailsIDInContract_Fractional_PA_IndianExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateContract_FractionalPA_IndianContractNoOnly(contractno, sContractdetailsID);
                }
                else { }

                //update in installment table
                if (Queries.CheckContract_Installments_Indian_ContractNoExists(sContractdetailsID) == 1)
                {
                    int updaterow = Queries.UpdateInstallmentdetails_Indian(contractno, sContractdetailsID);
                }
                else { }
                if (Queries.CheckFinanceBreakup_ContractNoExists(sContractdetailsID) == 1)
                {
                    int updatebkrup = Queries.UpdateFinanceBreakup_ContractNo(contractno, sContractdetailsID);
                }
                else { }
                if (Queries.CheckContractNo_Othernames_ContractNoExists(sContractdetailsID) == 1)
                {
                    int updatebkrup = Queries.UpdateContractNo_Othernames_ContractNo(contractno, sContractdetailsID);
                }
                else { }
                if (Queries.CheckContract_Indian_Deposit_Receipt_ContractNoExists(sContractdetailsID) == 1)
                {
                    int updatebkrup = Queries.UpdateContract_Indian_Deposit_Receipt_ContractNo(contractno, sContractdetailsID);
                }
                else { }


                string act = "Contract No changed from:" + Session["contractno"].ToString() + "To:" + contractno;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract No Updated", Session["contractno"].ToString(), contractno);

            }//contract no is different
        }
        else
        {
        }
        if (String.Compare(Session["ocontractcomment"].ToString(), ncontractcomment) != 0)
        {
            int update = Queries.UpdateContractDetails_IndianComment(ContractdetailsIDTextBox.Text, ncontractcomment.ToUpper());
            string act = "contract comment(for DSR) changed from:" + Session["ocontractcomment"].ToString() + "To:" + ncontractcomment;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Comment(For DSR) Updated", Session["ocontractcomment"].ToString(), ncontractcomment);
        }
        else { }


        if (String.Compare(Session["oContractUpdatedDate"].ToString(), DateTime.Now.ToString()) != 0)
        {
            string act = "contract updated date changed from:" + Session["oContractUpdatedDate"].ToString() + "To:" + DateTime.Now.ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Updated Date Updated", Session["oContractUpdatedDate"].ToString(), DateTime.Now.ToString());
        }
        else { }
        if (String.Compare(Session["ocontract_Remark"].ToString(), contractremark) != 0)
        {
            int update = Queries.UpdateContractDetails_IndianContract_Remark(ContractdetailsIDTextBox.Text, contractremark.ToUpper());
            string act = "contract remark changed from:" + Session["ocontract_Remark"].ToString() + "To:" + contractremark;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Remark Updated", Session["ocontract_Remark"].ToString(), contractremark);
        }
        else { }

        if (String.Compare(Session["ocsalesrep"].ToString(), csalesrep) != 0)
        {
            string act = "sales rep changed from:" + Session["ocsalesrep"].ToString() + "To:" + csalesrep;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Sales Rep Updated", Session["ocsalesrep"].ToString(), csalesrep);
        }
        else { }

        if (String.Compare(Session["ocTomgr"].ToString(), cTomgr) != 0)
        {
            string act = "TO manager changed from:" + Session["ocTomgr"].ToString() + "To:" + cTomgr;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract TO Manager Updated", Session["ocTomgr"].ToString(), cTomgr);
        }
        else { }

        if (String.Compare(Session["obuttonup"].ToString(), buttonup) != 0)
        {
            string act = "button up changed from:" + Session["obuttonup"].ToString() + "To:" + buttonup;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Button Up Officer Updated", Session["obuttonup"].ToString(), buttonup);
        }
        else { }
        if (String.Compare(Session["odealdate"].ToString(), dealdate) != 0)
        {
            string act = "deal date changed from:" + Session["odealdate"].ToString() + "To:" + dealdate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Deal Date Updated", Session["odealdate"].ToString(), dealdate);
        }
        else { }
        if (String.Compare(Session["odealweekno"].ToString(), dealwkno.ToString()) != 0)
        {
            string act = "deal wk no changed from:" + Session["odealweekno"].ToString() + "To:" + dealwkno.ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Deal Week No. Updated", Session["odealweekno"].ToString(), dealwkno.ToString());
        }
        else { }
        if (String.Compare(Session["odealstatus"].ToString(), dealstatus) != 0)
        {
            string act = "deal status changed from:" + Session["odealstatus"].ToString() + "To:" + dealstatus;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Deal Status Updated", Session["odealstatus"].ToString(), dealstatus);
        }
        else { }
        if (String.Compare(Session["oloanbuofficer"].ToString(), loanbuofficer) != 0)
        {
            string act = "Loan BU Officer changed from:" + Session["oloanbuofficer"].ToString() + "To:" + loanbuofficer;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Loan BU Officer Updated", Session["oloanbuofficer"].ToString(), loanbuofficer);
        }
        else { }
        if (String.Compare(Session["ocanxcontno"].ToString(), canxcontno) != 0)
        {
            string act = "Cancelled Canx No changed from:" + Session["ocanxcontno"].ToString() + "To:" + canxcontno;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Canx. Contract No. Updated", Session["ocanxcontno"].ToString(), canxcontno);
        }
        else { }
        if (String.Compare(Session["ocanxdate"].ToString(), canxdate) != 0)
        {
            string act = "deal cancelled date changed from:" + Session["ocanxdate"].ToString() + "To:" + canxdate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Canx Date Updated", Session["ocanxdate"].ToString(), canxdate);
        }
        else { }
        if (String.Compare(Session["omcwv"].ToString(), mcwaiver) != 0)
        {
            string act = "MC waiver changed from:" + Session["omcwv"].ToString() + "To:" + mcwaiver;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "MC Waiver Updated", Session["omcwv"].ToString(), mcwaiver);
        }
        else { }

        if (String.Compare(Session["omcfees"].ToString(), mcfees) != 0)
        {
            string act = "MC fees changed from:" + Session["omcfees"].ToString() + "To:" + mcfees;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "MC Fees Updated", Session["omcfees"].ToString(), mcfees);
        }
        else { }
        if (String.Compare(Session["omcdate"].ToString(), mcdate) != 0)
        {
            string act = "MC Date changed from:" + Session["omcdate"].ToString() + "To:" + mcdate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "MC Date Updated", Session["omcdate"].ToString(), mcdate);
        }
        else { }
        if (String.Compare(Session["omemberfee"].ToString(), memberfee) != 0)
        {
            string act = "Member fee changed from:" + Session["omemberfee"].ToString() + "To:" + memberfee;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Member Fee Updated", Session["omemberfee"].ToString(), memberfee);
        }
        else { }
        if (String.Compare(Session["omemebercgst"].ToString(), memebercgst) != 0)
        {
            string act = "Member cgst changed from:" + Session["omemebercgst"].ToString() + "To:" + memebercgst;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Member CGST Updated", Session["omemebercgst"].ToString(), memebercgst);
        }
        else { }
        if (String.Compare(Session["omembersgst"].ToString(), membersgst) != 0)
        {
            string act = "Member sgst changed from:" + Session["omembersgst"].ToString() + "To:" + membersgst;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Member SGST Updated", Session["omembersgst"].ToString(), membersgst);
        }
        else { }
        if (String.Compare(Session["obu6"].ToString(), bu6) != 0)
        {
            string act = "Button up after 6pm changed from:" + Session["obu6"].ToString() + "To:" + bu6;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "BU Note Updated", Session["obu6"].ToString(), bu6);
        }
        else { }
        if (String.Compare(Session["oupdowngrade"].ToString(), updown) != 0)
        {
            string act = "Upgrade/Downgrade changed from:" + Session["oupdowngrade"].ToString() + "To:" + updown;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "UpDowngrade Option Updated", Session["oupdowngrade"].ToString(), updown);
        }
        else { }

        if (String.Compare(Session["oContract_group"].ToString(), contractgroup) != 0)
        {
            string act = "Contract group changed from:" + Session["oContract_group"].ToString() + "To:" + contractgroup;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Group Updated", Session["oContract_group"].ToString(), contractgroup);
        }
        else { }
        if (String.Compare(Session["oContract_Venue"].ToString(), contractvenue) != 0)
        {
            string act = "Contract venue changed from:" + Session["oContract_Venue"].ToString() + "To:" + contractvenue;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Venue Updated", Session["oContract_Venue"].ToString(), contractvenue);
        }
        else { }
        if (String.Compare(Session["oReturnhomedate"].ToString(), returnhomedate) != 0)
        {
            string act = "return home date changed from:" + Session["oReturnhomedate"].ToString() + "To:" + returnhomedate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Return Home Date Updated", Session["oReturnhomedate"].ToString(), returnhomedate);
        }
        else { }
        if (String.Compare(Session["ocurrency"].ToString(), currency) != 0)
        {
            string act = "Currency changed from:" + Session["ocurrency"].ToString() + "To:" + currency;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Currency Updated", Session["ocurrency"].ToString(), currency);
        }
        else { }
        if (String.Compare(Session["oaffiliate"].ToString(), affiliate) != 0)
        {
            string act = "Affiliation changed from:" + Session["oaffiliate"].ToString() + "To:" + affiliate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Affiliation Type Updated", Session["oaffiliate"].ToString(), affiliate);
        }
        else { }
        if (String.Compare(Session["ototalintax"].ToString(), totalintax) != 0)
        {
            string act = "Total price including tax changed from:" + Session["ototalintax"].ToString() + "To:" + totalintax;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume Updated", Session["ototalintax"].ToString(), totalintax);
        }
        else { }
        if (String.Compare(Session["odepamt"].ToString(), depamt) != 0)
        {
            string act = "Deposit amount changed from:" + Session["odepamt"].ToString() + "To:" + depamt;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Deposit Amount Updated", Session["odepamt"].ToString(), depamt);
        }
        else { }
        if (String.Compare(Session["obalpayable"].ToString(), balpayable) != 0)
        {
            string act = "Deposit amount(bal) changed from:" + Session["obalpayable"].ToString() + "To:" + balpayable;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Initial Deposit Balance Amount Updated", Session["obalpayable"].ToString(), balpayable);
        }
        else { }

        if (String.Compare(Session["obaladepamtdate"].ToString(), baldepdate) != 0)
        {
            string act = "Deposit amount(bal) Date changed from:" + Session["obaladepamtdate"].ToString() + "To:" + baldepdate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Initial Deposit Balance Date Updated", Session["obaladepamtdate"].ToString(), baldepdate);
        }
        else { }
        if (String.Compare(Session["odepbal"].ToString(), depbal) != 0)
        {
            string act = "Balance deposit changed from:" + Session["odepbal"].ToString() + "To:" + depbal;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Balance Deposit Amount Updated", Session["odepbal"].ToString(), depbal);
        }
        else { }

        if (String.Compare(Session["ofinancedetails"].ToString(), finance) != 0)
        {

            string act = "Financemethod changed from:" + Session["ofinancedetails"].ToString() + "To:" + finance;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Finance Method Updated", Session["ofinancedetails"].ToString(), finance);
            if (finance == "Finance")
            {
                Financeno = LoadFinanceNo(VenueDropDownList.SelectedItem.Text , contracttypeTextBox.Text, financemethod);
                int updatefinanceno = Queries.UpdateFinanceNo(VenueDropDownList.SelectedItem.Text, financemethod, contracttypeTextBox.Text);
              

            }
            else if(finance=="Non Finance")
            {
                Financeno = "0";
            }
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);
            // CheckBreakup(finance, Session["ototalbalance"].ToString(), noemiTextBox.Text, Session["onoemi"].ToString(), totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, Session["onoinstallment"].ToString());
        }
        else { }


        if (String.Compare(Session["oinstallment"].ToString(), installment) != 0)
        {
            string act = "Installment Amount changed from:" + Session["oinstallment"].ToString() + "To:" + installment;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Amount Updated", Session["oinstallment"].ToString(), installment);
            if (Queries.CheckContract_Installments_Indian_ContractNoExists(ContractdetailsIDTextBox.Text) == 1)
            {

                int exists = Queries.ContractNoInInstallmentTable(sContractdetailsID);
                if (exists == 1)
                {
                    //delete from table

                    DataSet dsin = Queries.LoadcontractInstallment(sContractdetailsID);//.Text);
                    for (int j = 0; j < dsin.Tables[0].Rows.Count; j++)
                    {
                        Session["Installment_ID"] = dsin.Tables[0].Rows[j]["Installment_ID"].ToString();
                        Session["iProfileID"] = dsin.Tables[0].Rows[j]["ProfileID"].ToString();
                        Session["ContractNo"] = dsin.Tables[0].Rows[j]["ContractNo"].ToString();
                        Session["Installment_no"] = dsin.Tables[0].Rows[j]["Installment_no"].ToString();
                        Session["Installment_Amount"] = dsin.Tables[0].Rows[j]["Installment_Amount"].ToString();
                        Session["Installment_Date"] = dsin.Tables[0].Rows[j]["Installment_Date"].ToString();
                        Session["Installment_Invoice_No"] = dsin.Tables[0].Rows[j]["Installment_Invoice_No"].ToString();
                        Session["Paymentmode"] = dsin.Tables[0].Rows[j]["Paymentmode"].ToString();
                        int insertdel = Queries.InsertContract_Installments_Indian_Deleted(Session["Installment_ID"].ToString(), Session["iProfileID"].ToString(), Session["ContractNo"].ToString(), Session["Installment_no"].ToString(), Session["Installment_Amount"].ToString(), Session["Installment_Date"].ToString(), Session["Installment_Invoice_No"].ToString(), DateTime.Now.ToString(), sContractdetailsID, Session["Paymentmode"].ToString());
                        string log5 = "Installment Details Deleted:" + "Profile id: " + Session["iProfileID"].ToString() + "," + "ContractNo: " + Session["ContractNo"].ToString() + "," + "Installment #:" + Session["Installment_no"].ToString() + "," + "Installment Amt:" + Session["Installment_Amount"].ToString() + "," + "Installment Date:" + Session["Installment_Date"].ToString() + "," + "Installment_Invoice_No:" + Session["Installment_Invoice_No"].ToString() + "," + "Deleted Datetime:" + DateTime.Now.ToString() + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + Session["Paymentmode"].ToString();
                        int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Deleted", log5, "");
                        int delrow = Queries.DeleteContract_Installments_Indian(Session["Installment_ID"].ToString());
                    }
                    //insert
                    for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                    {
                        string installemnt_No = inst + " " + i;
                        ia = "textBox_" + i + "1";
                        iamt = Request.Form[ia];
                        idt = "textBox_" + i + "2";
                        idate = Request.Form[idt];
                        string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                        int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID,installmentmode);
                        string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" +installmentmode;
                        //update instalmentno
                        int update = Queries.UpdateInstallmentInvoiceNo(office);
                        int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);

                    }

                }
                //if contracdetails id doesnt exists
                else
                {
                    for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                    {
                        string installemnt_No = inst + " " + i;
                        ia = "textBox_" + i + "1";
                        iamt = Request.Form[ia];
                        idt = "textBox_" + i + "2";
                        idate = Request.Form[idt];
                        string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                        int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID,installmentmode);
                        string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + installmentmode;
                        //update instalmentno
                        int update = Queries.UpdateInstallmentInvoiceNo(office);
                        int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);

                    }

                }
            }//if block CheckContract_Installments_Indian_ContractNoExists
            else
            {
                if (CheckBox1.Checked == true)
                {
                    int exists = Queries.ContractNoInInstallmentTable(sContractdetailsID);
                    if (exists == 1)
                    {
                        //delete .//previous installment
                        DataSet dsin = Queries.LoadcontractInstallment(sContractdetailsID);
                        for (int j = 0; j < dsin.Tables[0].Rows.Count; j++)
                        {
                            Session["Installment_ID"] = dsin.Tables[0].Rows[j]["Installment_ID"].ToString();
                            Session["iProfileID"] = dsin.Tables[0].Rows[j]["ProfileID"].ToString();
                            Session["ContractNo"] = dsin.Tables[0].Rows[j]["ContractNo"].ToString();
                            Session["Installment_no"] = dsin.Tables[0].Rows[j]["Installment_no"].ToString();
                            Session["Installment_Amount"] = dsin.Tables[0].Rows[j]["Installment_Amount"].ToString();
                            Session["Installment_Date"] = dsin.Tables[0].Rows[j]["Installment_Date"].ToString();
                            Session["Installment_Invoice_No"] = dsin.Tables[0].Rows[j]["Installment_Invoice_No"].ToString();
                            Session["Paymentmode"] = dsin.Tables[0].Rows[j]["Paymentmode"].ToString();
                            int insertdel = Queries.InsertContract_Installments_Indian_Deleted(Session["Installment_ID"].ToString(), Session["iProfileID"].ToString(), Session["ContractNo"].ToString(), Session["Installment_no"].ToString(), Session["Installment_Amount"].ToString(), Session["Installment_Date"].ToString(), Session["Installment_Invoice_No"].ToString(), DateTime.Now.ToString(), sContractdetailsID, Session["Paymentmode"].ToString());
                            string log5 = "Installment Details Deleted:" + "Profile id: " + Session["iProfileID"].ToString() + "," + "ContractNo: " + Session["ContractNo"].ToString() + "," + "Installment #:" + Session["Installment_no"].ToString() + "," + "Installment Amt:" + Session["Installment_Amount"].ToString() + "," + "Installment Date:" + Session["Installment_Date"].ToString() + "," + "Installment_Invoice_No:" + Session["Installment_Invoice_No"].ToString() + "," + "Deleted Datetime:" + DateTime.Now.ToString() + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:"+ Session["Paymentmode"].ToString();
                            int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Deleted", log5, "");
                            int delrow = Queries.DeleteContract_Installments_Indian(Session["Installment_ID"].ToString());
                        }
                        for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                        {
                            string installemnt_No = inst + " " + i;
                            ia = "textBox_" + i + "1";
                            iamt = Request.Form[ia];
                            idt = "textBox_" + i + "2";
                            idate = Request.Form[idt];
                            string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                            int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID,installmentmode);
                            string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + installmentmode;
                            //update instalmentno
                            int update = Queries.UpdateInstallmentInvoiceNo(office);
                            int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);

                        }
                        string lastmat = Queries.GetMinFinance_Details_IndianInsAmt(sContractdetailsID);

                    }
                    else
                    {
                        for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                        {
                            string installemnt_No = inst + " " + i;
                            ia = "textBox_" + i + "1";
                            iamt = Request.Form[ia];
                            idt = "textBox_" + i + "2";
                            idate = Request.Form[idt];
                            string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                            int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID,installmentmode);
                            string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + installmentmode;
                            int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);
                            //update instalmentno
                            int update = Queries.UpdateInstallmentInvoiceNo(office);
                        }
                        string lastmat = Queries.GetMinFinance_Details_IndianInsAmt(sContractdetailsID);

                    }
                }
                else
                {
                    for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                    {
                        string installemnt_No = inst + " " + i;
                        ia = "textBox_" + i + "1";
                        iamt = Request.Form[ia];
                        idt = "textBox_" + i + "2";
                        idate = Request.Form[idt];
                        string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                        int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID,installmentmode);
                        string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + installmentmode;
                        //update instalmentno
                        int update = Queries.UpdateInstallmentInvoiceNo(office);
                        int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);

                    }
                }
            }

        }
        else
        {

            if (CheckBox1.Checked == true)
            {
                int exists = Queries.ContractNoInInstallmentTable(sContractdetailsID);
                if (exists == 1)
                {
                    //delete .//previous installment
                    DataSet dsin = Queries.LoadcontractInstallment(sContractdetailsID);
                    for (int j = 0; j < dsin.Tables[0].Rows.Count; j++)
                    {
                        Session["Installment_ID"] = dsin.Tables[0].Rows[j]["Installment_ID"].ToString();
                        Session["iProfileID"] = dsin.Tables[0].Rows[j]["ProfileID"].ToString();
                        Session["ContractNo"] = dsin.Tables[0].Rows[j]["ContractNo"].ToString();
                        Session["Installment_no"] = dsin.Tables[0].Rows[j]["Installment_no"].ToString();
                        Session["Installment_Amount"] = dsin.Tables[0].Rows[j]["Installment_Amount"].ToString();
                        Session["Installment_Date"] = dsin.Tables[0].Rows[j]["Installment_Date"].ToString();
                        Session["Installment_Invoice_No"] = dsin.Tables[0].Rows[j]["Installment_Invoice_No"].ToString();
                        Session["Paymentmode"] = dsin.Tables[0].Rows[j]["Paymentmode"].ToString();
                        int insertdel = Queries.InsertContract_Installments_Indian_Deleted(Session["Installment_ID"].ToString(), Session["iProfileID"].ToString(), Session["ContractNo"].ToString(), Session["Installment_no"].ToString(), Session["Installment_Amount"].ToString(), Session["Installment_Date"].ToString(), Session["Installment_Invoice_No"].ToString(), DateTime.Now.ToString(), sContractdetailsID, Session["Paymentmode"].ToString());
                        string log5 = "Installment Details Deleted:" + "Profile id: " + Session["iProfileID"].ToString() + "," + "ContractNo: " + Session["ContractNo"].ToString() + "," + "Installment #:" + Session["Installment_no"].ToString() + "," + "Installment Amt:" + Session["Installment_Amount"].ToString() + "," + "Installment Date:" + Session["Installment_Date"].ToString() + "," + "Installment_Invoice_No:" + Session["Installment_Invoice_No"].ToString() + "," + "Deleted Datetime:" + DateTime.Now.ToString() + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + Session["Paymentmode"].ToString();
                        int insertlog5 = Queries.InsertContractLogs_India(Session["iProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Deleted", log5, "");
                        int delrow = Queries.DeleteContract_Installments_Indian(Session["Installment_ID"].ToString());
                    }
                    for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                    {
                        string installemnt_No = inst + " " + i;
                        ia = "textBox_" + i + "1";
                        iamt = Request.Form[ia];
                        idt = "textBox_" + i + "2";
                        idate = Request.Form[idt];
                        string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                        int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID, installmentmode);
                        string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + installmentmode;
                        //update instalmentno
                        int update = Queries.UpdateInstallmentInvoiceNo(office);
                        int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);

                    }
                    string lastmat = Queries.GetMinFinance_Details_IndianInsAmt(sContractdetailsID);

                }
                else
                {
                    for (i = 1; i <= Convert.ToInt32(noinstallment); i++)
                    {
                        string installemnt_No = inst + " " + i;
                        ia = "textBox_" + i + "1";
                        iamt = Request.Form[ia];
                        idt = "textBox_" + i + "2";
                        idate = Request.Form[idt];
                        string insinvoice = Queries.GetInstallmentInvoiceNo(office);
                        int FinanceInvoice = Queries.InsertContract_Installments_Indian(Session["ProfileID"].ToString(), contractno, installemnt_No, iamt, idate, insinvoice, sContractdetailsID, installmentmode);
                        string log5 = "Installment Details:" + "Profile id: " + Session["ProfileID"].ToString() + "," + "Contractno: " + contractno + "," + "Installment #:" + installemnt_No + "," + "Installment Amt:" + iamt + "," + "Installment Date:" + idate + "," + "Invoice ID:" + insinvoice + "," + "Contract details ID:" + sContractdetailsID + "," + "Payment Mode:" + installmentmode;
                        int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log5, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Installment Added", "", log5);
                        //update instalmentno
                        int update = Queries.UpdateInstallmentInvoiceNo(office);
                    }
                    string lastmat = Queries.GetMinFinance_Details_IndianInsAmt(sContractdetailsID);

                }
            }
            else
            {
                
            }
        }
        if (String.Compare(Session["onoinstallment"].ToString(), noinstallment) != 0)
        {
            string act = "No of installment changed from:" + Session["onoinstallment"].ToString() + "To:" + noinstallment;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "No. of Installments Updated", Session["onoinstallment"].ToString(), noinstallment);
            // CheckBreakup(finance, Session["ototalbalance"].ToString(), noemiTextBox.Text, Session["onoemi"].ToString(), totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, Session["onoinstallment"].ToString());
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);
        }
        else { }



        if (String.Compare(Session["onoemi"].ToString(), noemi) != 0)
        {
            string act = "No of EMI changed from:" + Session["onoemi"].ToString() + "To:" + noemi;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "No of EMI Updated", Session["onoemi"].ToString(), noemi);
            // CheckBreakup(finance, Session["ototalbalance"].ToString(), noemiTextBox.Text, Session["onoemi"].ToString(), totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, Session["onoinstallment"].ToString());
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);
        }
        else { }
        if (String.Compare(Session["ototalbalance"].ToString(), totalbalance) != 0)
        {
            string act = "Balance Amount changed from:" + Session["ototalbalance"].ToString() + "To:" + totalbalance;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Balance Amount Updated", Session["ototalbalance"].ToString(), totalbalance);
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);
        }
        else { }
        if (String.Compare(Session["opaymethod"].ToString(), paymethod) != 0)
        {
            string act = "Pay method changed from:" + Session["opaymethod"].ToString() + "To:" + paymethod;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Pay Method Updated", Session["opaymethod"].ToString(), paymethod);
        }
        else { }
        if (String.Compare(Session["ofinance"].ToString(), financemethod) != 0)//pashuram
        {

            string act = "Finance type changed from:" + Session["ofinance"].ToString() + "To:" + financemethod;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Finance Type Updated", Session["ofinance"].ToString(), financemethod);
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);

        }
        else { }
        if (String.Compare(Session["oFinanceno"].ToString(), Financeno) != 0)
        {
            string act = "Finance no changed from:" + Session["oFinanceno"].ToString() + "To:" + Financeno;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Finance No. Updated", Session["oFinanceno"].ToString(), Financeno);
        }
        else { }
        if (String.Compare(Session["ofinmonth"].ToString(), finmonth) != 0)
        {
            string act = "Finance month changed from:" + Session["ofinmonth"].ToString() + "To:" + finmonth;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Finance Month Updated", Session["ofinmonth"].ToString(), finmonth);
            //  CheckBreakup(finance, Session["ototalbalance"].ToString(), noemiTextBox.Text, Session["onoemi"].ToString(), totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, Session["onoinstallment"].ToString());
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);

        }
        else { }

        if (String.Compare(Session["oemiamt"].ToString(), emiamt) != 0)
        {
            string act = "EMI Amount changed from:" + Session["oemiamt"].ToString() + "To:" + emiamt;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "EMI Amount Updated", Session["oemiamt"].ToString(), emiamt);
            financebreakup(noemiTextBox.Text, totalbalance, emiamtTextBox.Text, contractno, contracttypeTextBox.Text, sContractdetailsID, NoinstallmentTextBox.Text, loanamt);
        }
        else { }
        if (String.Compare(Session["ofindocfee"].ToString(), findocfee) != 0)
        {
            string act = "Documentation/Acceptance Fee changed from:" + Session["ofindocfee"].ToString() + "To:" + findocfee;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Documentation Updated", Session["ofindocfee"].ToString(), findocfee);
        }
        else { }
        if (String.Compare(Session["oisgtrate"].ToString(), isgtrate) != 0)
        {
            string act = "IGST Rate changed from:" + Session["oisgtrate"].ToString() + "To:" + isgtrate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "IGST Rate Updated", Session["oisgtrate"].ToString(), isgtrate);
        }
        else { }
        if (String.Compare(Session["oigstamt"].ToString(), igstamt) != 0)
        {
            string act = "ISGT Amt changed from:" + Session["oigstamt"].ToString() + "To:" + igstamt;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "IGST Amount Updated", Session["oigstamt"].ToString(), igstamt);
        }
        else { }
        if (String.Compare(Session["ointerestrate"].ToString(), interestrate) != 0)
        {
            string act = "Interest Rate changed from:" + Session["ointerestrate"].ToString() + "To:" + interestrate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Interest Rate Updated", Session["ointerestrate"].ToString(), interestrate);
        }
        else { }

        if (String.Compare(Session["ooldLoanAgreement"].ToString(), oldloanagreementno) != 0)
        {
            string act = "Old Loan Agreement changed from:" + Session["ooldLoanAgreement"].ToString() + "To:" + oldloanagreementno;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Loan Agreement No. Updated", Session["ooldLoanAgreement"].ToString(), oldloanagreementno);
        }
        else { }
        if (String.Compare(Session["oregcollectionterm"].ToString(), regcollectionterm) != 0)
        {
            string act = "Registry Collection Term changed from:" + Session["oregcollectionterm"].ToString() + "To:" + regcollectionterm;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Registry Colection Term Updated", Session["oregcollectionterm"].ToString(), regcollectionterm);
        }
        else { }

        if (String.Compare(Session["oregcollamt"].ToString(), regcollamt) != 0)
        {
            string act = "Registry Collection Amount changed from:" + Session["oregcollamt"].ToString() + "To:" + regcollamt;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Registry Collection Amount Updated", Session["oregcollamt"].ToString(), regcollamt);
        }
        else { }

        if (String.Compare(Session["ooldloanamt"].ToString(), loanamt) != 0)
        {
            string act = "Old Loan Amount changed from:" + Session["ooldloanamt"].ToString() + "To:" + loanamt;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Loan Amount Updated", Session["ooldloanamt"].ToString(), loanamt);
        }
        else { }
        if (String.Compare(Session["eurorate"].ToString(), eurorate) != 0)
        {
            string act = "Euro rate changed from:" + Session["eurorate"].ToString() + "To:" + eurorate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Euro Rate Updated", Session["eurorate"].ToString(), eurorate);
        }
        else { }
        if (String.Compare(Session["loanamtINEuro"].ToString(), loanamtINEuro) != 0)
        {
            string act = "Loan Amt in Euros changed from:" + Session["loanamtINEuro"].ToString() + "To:" + loanamtINEuro;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Loan Amount (Euro) Updated", Session["loanamtINEuro"].ToString(), loanamtINEuro);
        }
        else { }
        if (String.Compare(Session["monthlyPremiumprotectionplan"].ToString(), monthlyPremiumprotectionplan) != 0)
        {
            string act = "monthlyPremiumprotectionplan value changed from:" + Session["monthlyPremiumprotectionplan"].ToString() + "To:" + monthlyPremiumprotectionplan;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Premium Protection Plan Updated", Session["monthlyPremiumprotectionplan"].ToString(), monthlyPremiumprotectionplan);
        }
        else { }

        if (String.Compare(Session["Referred_By"].ToString(), refby) != 0)
        {
            string act = "Referred By(CRM Details) changed from:" + Session["Referred_By"].ToString() + "To:" + refby;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Referreb By Updated", Session["Referred_By"].ToString(), refby);

            if (String.Compare(Session["updated_date"].ToString(), DateTime.Now.ToString()) != 0)
            {
                string act2 = "updated_date(CRM Details) changed from:" + Session["updated_date"].ToString() + "To:" + DateTime.Now.ToString();
             //   int insertlog12 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Updated Date Time Updated", Session["updated_date"].ToString(), DateTime.Now.ToString());
            }
            else { }
            if (String.Compare(Session["updatedby"].ToString(), user) != 0)
            {
                string act2 = "Updated By(CRM Details) changed from:" + Session["updatedby"].ToString() + "To:" + user;
                int insertlog12 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Upated User Updated", Session["updatedby"].ToString(), user);
            }
            else { }
        }
        else { }
        if (String.Compare(Session["program_source"].ToString(), prgmsrc) != 0)
        {
            string act = "Program Src(CRM Details) changed from:" + Session["program_source"].ToString() + "To:" + prgmsrc;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Program Source Updated", Session["program_source"].ToString(), prgmsrc);
            if (String.Compare(Session["updated_date"].ToString(), DateTime.Now.ToString()) != 0)
            {
                string act2 = "updated_date(CRM Details) changed from:" + Session["updated_date"].ToString() + "To:" + DateTime.Now.ToString();
               // int insertlog12 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Updated Date Time Updated", Session["updated_date"].ToString(), DateTime.Now.ToString());
            }
            else { }
            if (String.Compare(Session["updatedby"].ToString(), user) != 0)
            {
                string act2 = "Updated By(CRM Details) changed from:" + Session["updatedby"].ToString() + "To:" + user;
                int insertlog12 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Upated User Updated", Session["updatedby"].ToString(), user);
            }
            else { }
        }
        else { }

        if (String.Compare(Session["Rep_report"].ToString(), repreport) != 0)
        {
            string act = "Rep Report value changed from:" + HttpContext.Current.Session["Rep_report"].ToString() + "To:" + repreport;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Rep Report Updated", Session["Rep_report"].ToString(), repreport);
        }
        else { }
        if (String.Compare(Session["To_report"].ToString(), toreport) != 0)
        {
            string act = "TO Report value changed from:" + HttpContext.Current.Session["To_report"].ToString() + "To:" + toreport;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "TO Report Updated", Session["To_report"].ToString(), toreport);
        }
        else { }
        if (String.Compare(Session["SMS_Update"].ToString(), sms) != 0)
        {
            string act = "SMS value changed from:" + HttpContext.Current.Session["SMS_Update"].ToString() + "To:" + sms;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SMS Updated", Session["SMS_Update"].ToString(), sms);
        }
        else { }
        if (String.Compare(Session["Updated_Date"].ToString(), DateTime.Now.ToString()) != 0)
        {
            string act = "Updated Date time value changed from:" + HttpContext.Current.Session["Updated_Date"].ToString() + "To:" + DateTime.Now.ToString();
        //    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Updated Datetime Updated(Contr", Session["Updated_Date"].ToString(), DateTime.Now.ToString());
        }
        else { }
        if (String.Compare(Session["UpdatedBy"].ToString(), user) != 0)
        {
            string act = "Updated usr value changed from:" + HttpContext.Current.Session["UpdatedBy"].ToString() + "To:" + user;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Updated User Updated", Session["UpdatedBy"].ToString(), user);
        }
        else { }

        if (String.Compare(Session["Open_Loan_AgreementNo"].ToString(), openLANo) != 0)
        {
            string act = "Open LA No value changed from:" + HttpContext.Current.Session["Open_Loan_AgreementNo"].ToString() + "To:" + openLANo;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Open LA NO. Updated", Session["Open_Loan_AgreementNo"].ToString(), openLANo);
        }
        else { }

        int updatecontractdetailsIndian = Queries.UpdateContractDetails_Indian(csalesrep, cTomgr, buttonup, dealdate, dealstatus, mcwaiver, finance, mcfees, mcdate, memberfee, memebercgst, membersgst, canxcontno, canxdate, loanbuofficer, sContractdetailsID);
            int updatecontractdetailsIndianothers = Queries.UpdateContractDetails_IndianBuUpdown(bu6, updown, sContractdetailsID);
            int updatedealwkno = Queries.UpdateDealdateWeekno(dealwkno.ToString(), sContractdetailsID);
           int updatecontractgrpvenue=Queries.UpdateContractGroupVenue(contractgroup,contractvenue,sContractdetailsID);
          int updatehomedate = Queries.UpdateReturnHomeDate(returnhomedate, sContractdetailsID);

            //check if exists i crm
        int crmexists = Queries.ContractDetailsIDInCRMDetailsExists(sContractdetailsID);
            if (crmexists == 1)
            {
                int updatecrm = Queries.UpdateCRM_details(sContractdetailsID, prgmsrc, refby, DateTime.Now.ToString(), user);
            }
            else
            {

                int crmdetails = Queries.InsertCRM_details(Session["ProfileID"].ToString(), sContractdetailsID, prgmsrc, refby, "", DateTime.Now.ToString(), "", user, "", "Active");
                string logc = "CRM Details:" + "Profile id:" + Session["ProfileID"].ToString() + "," + "contractdetailsID:" + sContractdetailsID + "," + "Program Src: " + prgmsrc + "," + "Referred by:" + refby + "," + "Comment:" + "" + "," + "Created by:" + DateTime.Now.ToString() + "," + "updated by:" + "" + "," + "User:" + user + "," + "Updated by:" + "" + "," + "status:" + "Active";
            int insertlogc = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, logc, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract CRM Details Added", "", logc);
        }
        //contract team details
        int cteamexists = Queries.ContractDetailsIDContractTeamDetailsExists(sContractdetailsID);
        if(cteamexists==1)
        {
            int updaterow = Queries.UpdateContractTeamDetails("", repreport, toreport, sms, DateTime.Now.ToString(), user, sContractdetailsID);
        }
        else
        {
            int insertrow = Queries.InsertContractTeamDetails(sContractdetailsID, "", repreport, toreport, sms, DateTime.Now.ToString(), user, "", "");
        }
        //finance details
        int financeexists = Queries.ContractDetailsIDInFinance_Details_IndianExists(sContractdetailsID);
            if (financeexists == 1)
            {
                //update
              int updatefinancedetails = Queries.UpdateFinanceDetails_Indian(finance, currency, affiliate, totalintax, depamt, "", balpayable, "", depbal, totalbalance, paymethod, noinstallment, installment, financemethod, Financeno, isgtrate, interestrate, findocfee, igstamt, noemi, emiamt, finmonth,oldloanagreementno, regcollectionterm , regcollamt , baldepdate, loanamt, sContractdetailsID);
            int updatefinanceotherdetails = Queries.UpdateFinanceDetails_IndianFinanceType(eurorate, loanamtINEuro, monthlyPremiumprotectionplan, sContractdetailsID);
            int updatfinanceopenLA = Queries.UpdateFinance_Details_IndianOpenLANo(openLANo, sContractdetailsID);

            }
            else
            {
                //insert 
                string dsrdate = DateTime.Parse(dealdateTextBox.Text.Trim()).ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);

                DateTime ddy = Convert.ToDateTime(dsrdate);
                int ddyr = ddy.Year;
                string IGSTrate = "", Interestrate = "", documentationfee = "", IGST_Amount = "", No_Emi = "", monthlyemiamt = "", Finance_No = "", Initial_Deposit_Balance = "", euro_rate="", loanamt_INEuro="", monthly_Premiumprotectionplan="";
                string Finance_Details_Id = Queries.GetFinance_Details_Indian_ID(office);
                if (finance == "Finance")
                {
                    if (financemethod == "Pashuram Finance")
                    {

                        if (contract == "Fractional" || contract == "Trade - In - Fractionals")
                        {
                            DataSet dsfmr = Queries.LoadFinanceMethodRatesFractional(financemethod, ddyr);

                            IGSTrate = dsfmr.Tables[0].Rows[0]["IGST_Rate"].ToString() + "%";
                            Interestrate = dsfmr.Tables[0].Rows[0]["Interest_rate"].ToString() + "%";
                        }
                        else
                        {

                            DataSet dsfmr = Queries.LoadFinanceMethodRates(financemethod, ddyr);
                            IGSTrate = dsfmr.Tables[0].Rows[0]["IGST_Rate"].ToString() + "%";
                            Interestrate = dsfmr.Tables[0].Rows[0]["Interest_rate"].ToString() + "%";

                        }
                    Finance_No = LoadFinanceNo(VenueDropDownList.SelectedItem.Text, contract, financemethod);
                    documentationfee = findocfeeTextBox.Text;
                    IGST_Amount = igstamtTextBox.Text;
                    No_Emi = noemiTextBox.Text;
                    monthlyemiamt = emiamtTextBox.Text;
                    euro_rate = "0";
                    loanamt_INEuro = "0";
                    monthly_Premiumprotectionplan = "0";

                }
                    else if(financemethod == "Crown Finance")
                    {
                        if (contract == "Fractional" || contract == "Trade - In - Fractionals")
                        {
                            DataSet dsfmr = Queries.LoadFinanceMethodRatesFractional(financemethod, ddyr);

                            IGSTrate = dsfmr.Tables[0].Rows[0]["IGST_Rate"].ToString() + "%";
                            Interestrate = dsfmr.Tables[0].Rows[0]["Interest_rate"].ToString() + "%";
                        }
                        else
                        {

                            DataSet dsfmr = Queries.LoadFinanceMethodRates(financemethod, ddyr);
                            IGSTrate = dsfmr.Tables[0].Rows[0]["IGST_Rate"].ToString() + "%";
                            Interestrate = dsfmr.Tables[0].Rows[0]["Interest_rate"].ToString() + "%";

                        }
                    Finance_No = LoadFinanceNo(VenueDropDownList.SelectedItem.Text, contract, financemethod);
                    documentationfee = findocfeeTextBox.Text;                   
                    No_Emi = noemiTextBox.Text;
                    monthlyemiamt = emiamtTextBox.Text;
                    IGST_Amount = "0";
                    emiamt = emiamtTextBox.Text;
                    euro_rate = eurorateTextBox.Text;
                    loanamt_INEuro = loanamtINEuroTextBox.Text;
                    monthly_Premiumprotectionplan = monthlyPremiumprotectionplanTextBox.Text;

                }
                 else
                    {
                        IGSTrate = "0";
                        Interestrate = "0";
                    }
                    
                }//if block of finance
                else if (finance == "Non Finance")
                {

                    Finance_No = "0";
                    documentationfee = "0";
                    IGST_Amount = "0";
                    No_Emi = "0";
                    emiamt = "0";
                    IGSTrate = "0";
                    Interestrate = "0";
                }
                string Payment_Method = "", No_Installments = "", Installment_Amount = "";
                if (depbal == "" || depbal == "0" || depbal == "NaN")
                {
                    Initial_Deposit_Balance = "0";
                }
                else
                {
                    Initial_Deposit_Balance = balinitialdepamtTextBox.Text;
                }

                if (PayMethodDropDownList.SelectedIndex == 0)
                {
                    Payment_Method = "";
                }
                else
                {
                    Payment_Method = PayMethodDropDownList.SelectedItem.Text;
                }

                if (NoinstallmentTextBox.Text == "" || NoinstallmentTextBox.Text == "0" || NoinstallmentTextBox.Text == "NaN")
                {
                    No_Installments = "0";
                }
                else
                {
                    No_Installments = NoinstallmentTextBox.Text;
                }



                if (installmentamtTextBox.Text == "" || installmentamtTextBox.Text == "0" || installmentamtTextBox.Text == "NaN")
                {
                    Installment_Amount = "0";
                }
                else
                {
                    Installment_Amount = installmentamtTextBox.Text;

                }


                int insertfinancedetails = Queries.InsertFinance_Details_Indian(Finance_Details_Id, Session["ProfileID"].ToString(), contractno, finance, currency,
                    affiliate, totalintax, depamt, depamt, balpayable, "", Initial_Deposit_Balance, totalbalance,
                    Payment_Method, No_Installments, Installment_Amount, financemethod, Finance_No,
                    IGSTrate, Interestrate, documentationfee, IGST_Amount, No_Emi, monthlyemiamt, "", oldloanagreementno, "0", "0", sContractdetailsID, baldepdate, loanamt, euro_rate, loanamt_INEuro, monthly_Premiumprotectionplan, openLANo);




                int updatefinanceid = Queries.UpdateFinance_Details_Indian_ID(office);
                if (finance == "Finance")
                {
                    int updatefinanceno = Queries.UpdateFinanceNo(VenueDropDownList.SelectedItem.Text, contract, financemethod);


                    //get max installmentdate n update finance startdate
                    int updatefin = Queries.UpdatefinanceStartdate(contractno);
                    string log3 = "Finance Details:" + " Finance ID:" + Finance_Details_Id + "," + "Profile id:" + Session["ProfileID"].ToString() + "," + "Contractno:" + contractno + "," + "Mode:" + finance + "," + "Currency:" + currency + "," + "Affiliation:" + affiliate + "," +
                        "Total Price Incl. Tax:" + totalintax + "," + "Initial Deposit:" + depamt + "," + "Depsoit Amt:" + depamt + "," +
                        "Bal Payable if less than 10%:" + balpayable + "," + "Total Initial Deposit:" + "" + "," + "Deposit Bal:" + Initial_Deposit_Balance + "," +
                        "Bal Amt.:" + totalbalance + "," + "Payment Method:" + Payment_Method + "," + "No. Installment:" + No_Installments + "," +
                        "Installment Amt.:" + Installment_Amount + "," + "Finance type:" + financemethod + "," + "Finance No:" + Finance_No + "," +
                        "IGST Rate:" + IGSTrate + "," + "Interest rate:" + Interestrate + "," + "Documentation fee:" + documentationfee + "," +
                        "IGST Amt:" + IGST_Amount + "," + "No. EMI:" + No_Emi + "," + "Emai Amt:" + monthlyemiamt + "," +
                        "Finance Start month:" + Queries.GetFinanceMonth(contractno) + "," + "Old Loan Agreement No:" + oldloanagreementno + "RegistryCollection term:" + "0" + "," +
                        "RegistryCollection Amt:" + "0" + "," + "contractdetailsID:" + sContractdetailsID + "," + "bal Dep Date:" + baldepdate + "," + "Old loan amt:" + loanamt+","+ "Euro Rate applicable:" + eurorate + "," + "Loan Amt in Euro:" + loanamtINEuro + "," + "Monthly premium(protectionplan):" + monthlyPremiumprotectionplan+","+"Open LA No:"+ openLANo;
                int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Finance Details Added", "", log3);
                financebreakup(noemiTextBox.Text, balamtpayableTextBox.Text, emiamtTextBox.Text, sContractdetailsID, contract, contractno, NoinstallmentTextBox.Text,loanamt);

                }
                else if (finance == "Non Finance")
                {
                string log3 = "Finance Details:" + " Finance ID:" + Finance_Details_Id + "," + "Profile id:" + Session["ProfileID"].ToString() + "," + "Contractno:" + contractno + "," + "Mode:" + finance + "," + "Currency:" + currency + "," + "Affiliation:" + affiliate + "," + "Total Price Incl. Tax:" + totalintax + ","
                    + "Initial Deposit:" + depamt + "," + "Depsoit Amt:" + depamt + "," +
                    "Bal Payable if less than 10%:" + balpayable + "," + "Total Initial Deposit:" + "" + "," + "Deposit Bal:" + Initial_Deposit_Balance + "," +
                    "Bal Amt.:" + totalbalance + "," + "Payment Method:" + Payment_Method + "," + "No. Installment:" + No_Installments + "," +
                    "Installment Amt.:" + Installment_Amount + "," + "Finance type:" + financemethod + "," + "Finance No:" + Finance_No + "," +
                    "IGST Rate:" + IGSTrate + "," + "Interest rate:" + Interestrate + "," + "Documentation fee:" + documentationfee + "," +
                    "IGST Amt:" + IGST_Amount + "," + "No. EMI:" + No_Emi + "," + "Emai Amt:" + monthlyemiamt + ","
                    + "Finance Start month:" + "" + "," + "Old Loan Agreement No:" + "" + "RegistryCollection term:" + "0" + "," +
                    "RegistryCollection Amt:" + "0" + "," + "contractdetailsID:" + sContractdetailsID + "," + "bal Dep Date:" + baldepdate + "," + "Old loan amt:" + loanamt + "," + "Euro Rate applicable:" + eurorate + "," + "Loan Amt in Euro:" + loanamtINEuro + "," + "Monthly premium(protectionplan):" + monthlyPremiumprotectionplan + "," + "Open LA No:" + openLANo;
                int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Finance Details Added", "", log3);

            }


            }//financexists
            //different contract types

            if (contract == "Points")
            {
            
                DataSet dspts = Queries.LoadNewPointsDetails(sContractdetailsID);
                if (dspts.Tables[0].Rows.Count == 0)
                {
                    Session["ContractPoints_ID"] = ""; Session["opts_club"] = ""; Session["opts_newpts"] = ""; Session["opts_entitlement"] = "";
                    Session["opts_totalpts"] = ""; Session["opts_firstyr"] = ""; Session["opts_Tenure"] = ""; Session["opts_lastyr"] = ""; Session["opts_nopersons"] = "";
                }
                else
                {
                  //  Session["opts_club"] = dspts.Tables[0].Rows[0]["club"].ToString();
                string first = dspts.Tables[0].Rows[0]["club"].ToString().ToLower();         
                Session["opts_club"] = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(first);

                Session["opts_newpts"] = dspts.Tables[0].Rows[0]["New_points_rights"].ToString();
                    Session["opts_entitlement"] = dspts.Tables[0].Rows[0]["Type_membership"].ToString();
                    Session["opts_totalpts"] = dspts.Tables[0].Rows[0]["Total_points_rights"].ToString();
                    Session["opts_firstyr"] = dspts.Tables[0].Rows[0]["First_year_occupancy"].ToString();
                    Session["opts_Tenure"] = dspts.Tables[0].Rows[0]["Tenure"].ToString();
                    Session["opts_lastyr"] = dspts.Tables[0].Rows[0]["Last_year_occupancy"].ToString();
                    Session["opts_nopersons"] = dspts.Tables[0].Rows[0]["NoPersons"].ToString();
                }

                DataSet dspa = Queries.contractPA(sContractdetailsID);
                if (dspa.Tables[0].Rows.Count == 0)
                {
                    Session["onewpoints"] = ""; Session["oconversionfee"] = ""; Session["oadminfee"] = ""; Session["ototpurchprice"] = ""; Session["ocgst"] = ""; Session["osgst"] = ""; Session["ototalpriceInTax"] = "";
                    Session["odeposit"] = ""; Session["obalance"] = ""; Session["obalancedue"] = ""; Session["oremarks"] = "";
                    Session["ooldVolume"] = ""; Session["ooldadminfee"] = ""; Session["ooldTotalTax"] = ""; Session["ooldDeposit"] = ""; Session["ousdoldvolume"] = ""; Session["ousdoldadminfee"] = ""; Session["ousdoldtax"] = ""; Session["ousdolddeposit"] = "";
                    Session["oUSDConvertedVolume"] = ""; Session["oUSDConvertedAdminfee"] = ""; Session["oUSDConvertedTax"] = ""; Session["oUSDConverteddeposit"] = ""; Session["totaltax"] = "";
                Session["oUSDConvertedTotalVolume"] = "";
                Session["oexchangerate"] = "";
            }
                else
                {
                    Session["onewpoints"] = dspa.Tables[0].Rows[0]["New_Points_Price"].ToString();
                    Session["oconversionfee"] = dspa.Tables[0].Rows[0]["Conversion_Fee"].ToString();
                    Session["oadminfee"] = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                    Session["ototpurchprice"] = dspa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                    Session["ocgst"] = dspa.Tables[0].Rows[0]["Cgst"].ToString();
                    Session["osgst"] = dspa.Tables[0].Rows[0]["Sgst"].ToString();
                    Session["ototalpriceInTax"] = dspa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                    Session["odeposit"] = dspa.Tables[0].Rows[0]["Deposit"].ToString();
                    Session["obalance"] = dspa.Tables[0].Rows[0]["Balance"].ToString();
                    Session["obalancedue"] = dspa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                    Session["oremarks"] = dspa.Tables[0].Rows[0]["Remarks"].ToString();
                    Session["ooldVolume"] = dspa.Tables[0].Rows[0]["oldVolume"].ToString();
                    Session["ooldadminfee"] = dspa.Tables[0].Rows[0]["oldadminfee"].ToString();
                    Session["ooldTotalTax"] = dspa.Tables[0].Rows[0]["oldTotalTax"].ToString();
                    Session["ooldDeposit"] = dspa.Tables[0].Rows[0]["oldDeposit"].ToString();
                    Session["ousdoldvolume"] = dspa.Tables[0].Rows[0]["usdoldvolume"].ToString();
                    Session["ousdoldadminfee"] = dspa.Tables[0].Rows[0]["usdoldadminfee"].ToString();
                    Session["ousdoldtax"] = dspa.Tables[0].Rows[0]["usdoldtax"].ToString();
                    Session["ousdolddeposit"] = dspa.Tables[0].Rows[0]["usdolddeposit"].ToString();
                    Session["oUSDConvertedVolume"] = dspa.Tables[0].Rows[0]["USDConvertedVolume"].ToString();
                    Session["oUSDConvertedAdminfee"] = dspa.Tables[0].Rows[0]["USDConvertedAdminfee"].ToString();
                    Session["oUSDConvertedTax"] = dspa.Tables[0].Rows[0]["USDConvertedTax"].ToString();
                    Session["oUSDConverteddeposit"] = dspa.Tables[0].Rows[0]["USDConverteddeposit"].ToString();
                    Session["totaltax"] = dspa.Tables[0].Rows[0]["total_tax"].ToString();
                Session["oUSDConvertedTotalVolume"] =   dspa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                Session["oexchangerate"]  = dspa.Tables[0].Rows[0]["exchangerate"].ToString();
            }

 
            Session["oExpirydate"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Expirydate"]);
            Session["oCommence_date"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Commence_date"]);

            string commencedate = "01-01-" + firstyrTextBox.Text;
            string expirydate = "12-31-" + lastyrTextBox.Text;


            string pts_club = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(clubTextBox.Text);
                string pts_newpts = newpointsrightTextBox.Text;
                string pts_entitlement = EntitlementPoinDropDownList.SelectedItem.Text;
                string pts_totalpts = totalptrightsTextBox.Text;
                string pts_firstyr = firstyrTextBox.Text;
                string pts_Tenure = tenureTextBox.Text;
                string pts_lastyr = lastyrTextBox.Text;
                string pts_nopersons = NoPersonsTextBox.Text;


                string newpoints = newpointsTextBox.Text;
                string conversionfee = conversionfeeTextBox.Text;
                string adminfee = adminfeeTextBox.Text;
                string totpurchprice = totpurchpriceTextBox.Text;
                string cgst = cgstTextBox.Text;
                string sgst = sgstTextBox.Text;
                string totalpriceInTax = totalpriceInTaxTextBox.Text;
                string deposit = depositTextBox.Text;
                string balance = balanceTextBox.Text;
                string balancedue = balancedueTextBox.Text;
                string remarks = remarksTextBox.Text;
               string finaltotaltax = TotalTaxTextBox.Text;
                string USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit,USDConvertedTotalVolume;
                DataSet exrds = Queries.LoadExchange_Rate();
                string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
                if (currencyDropDownList.SelectedItem.Text == "INR")
                {
                    if (newpointsTextBox.Text == "" || newpointsTextBox.Text == null || newpointsTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(newpointsTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                     if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                    {
                        USDConvertedTax = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedTax = valueamt.ToString();
                        
                    }
                    if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }
                
                }
                else
                {
                    if (totpurchpriceTextBox.Text == "" || totpurchpriceTextBox.Text == null || totpurchpriceTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(totpurchpriceTextBox.Text), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                 

                    if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                    {
                        USDConvertedTax = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text), 0);
                        USDConvertedTax = valueamt.ToString();

                    }

                    if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }


            }


            int change = 0;
            if (String.Compare(Session["oExpirydate"].ToString(), expirydate) != 0)
            {
                string act = "(points) Expiry date changed from:" + Session["oExpirydate"].ToString() + "To:" + expirydate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Expiry Date Updated", Session["oExpirydate"].ToString(), expirydate);
                change = 1;
            }
            else { }
            if (String.Compare(Session["oCommence_date"].ToString(), commencedate) != 0)
            {
                string act = "(points) Commence date changed from:" + Session["oCommence_date"].ToString() + "To:" + commencedate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Commence Date Updated", Session["oCommence_date"].ToString(), commencedate);
                change = 1;
            }
            else { }
            if (change == 1)
            {
                int updatece = Queries.UpdateCommenceExpiryDate(expirydate, commencedate, sContractdetailsID);
            }
            else { }
            //check if points contract exists
            int pointscontractexists = Queries.ContractDetailsIDInContract_Points_IndianExists(sContractdetailsID);
                if (pointscontractexists == 1)
                {

                if (String.Compare(Session["opts_club"].ToString(), pts_club) != 0)
                {
                    string act = "(points) club name changed from:" + Session["opts_club"].ToString() + "To:" + pts_club;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Club Name Updated", Session["opts_club"].ToString(), pts_club);
                }
                else { }
                if (String.Compare(Session["opts_newpts"].ToString(), pts_newpts) != 0)
                {
                    string act = "(points)new points changed from:" + Session["opts_newpts"].ToString() + "To:" + pts_newpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Updated", Session["opts_newpts"].ToString(), pts_newpts);
                }
                else { }

                if (String.Compare(Session["opts_entitlement"].ToString(), pts_entitlement) != 0)
                {
                    string act = "(points)entitlement changed from:" + Session["opts_entitlement"].ToString() + "To:" + pts_entitlement;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Entitlement Updated", Session["opts_entitlement"].ToString(), pts_entitlement);
                }
                else { }
                if (String.Compare(Session["opts_totalpts"].ToString(), pts_totalpts) != 0)
                {
                    string act = "(points) total points changed from:" + Session["opts_totalpts"].ToString() + "To:" + pts_totalpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Points Updated", Session["opts_totalpts"].ToString(), pts_totalpts);
                }
                else { }
                if (String.Compare(Session["opts_firstyr"].ToString(), pts_firstyr) != 0)
                {
                    string act = "(points) first yr changed from:" + Session["opts_firstyr"].ToString() + "To:" + pts_firstyr;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "First Year Occupancy Updated", Session["opts_firstyr"].ToString(), pts_firstyr);
                }
                else { }
                if (String.Compare(Session["opts_Tenure"].ToString(), pts_Tenure) != 0)
                {
                    string act = "(points)tenure changed from:" + Session["opts_Tenure"].ToString() + "To:" + pts_Tenure;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Tenure Updated", Session["opts_Tenure"].ToString(), pts_Tenure);
                }
                else { }
                if (String.Compare(Session["opts_lastyr"].ToString(), pts_lastyr) != 0)
                {
                    string act = "(points) last yr changed from:" + Session["opts_lastyr"].ToString() + "To:" + pts_lastyr;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Last Year Occupancy Updated", Session["opts_lastyr"].ToString(), pts_lastyr);
                }
                else { }
                if (String.Compare(Session["opts_nopersons"].ToString(), pts_nopersons) != 0)
                {
                    string act = "(points) No. Of Persons changed from:" + Session["opts_nopersons"].ToString() + "To:" + pts_nopersons;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "PAX Occupancy Updated", Session["opts_nopersons"].ToString(), pts_nopersons);
                }
                else { }
                int updatepointscontract = Queries.UpdateContract_Points_Indian(pts_club, pts_newpts, pts_entitlement, pts_totalpts, pts_firstyr, pts_Tenure, pts_lastyr, pts_nopersons, sContractdetailsID);
                }
                else
                {
                    //insert
                    //points contract
                    string ContractPoints_ID = Queries.GetContract_Points_Indian_ID(office);
                    int insertpoints = Queries.InsertContract_Points_Indian(ContractPoints_ID, Session["ProfileID"].ToString(), contractno, pts_club, newpointsrightTextBox.Text, EntitlementPoinDropDownList.SelectedItem.Text, totalptrightsTextBox.Text, firstyrTextBox.Text, tenureTextBox.Text, lastyrTextBox.Text, NoPersonsTextBox.Text, sContractdetailsID);
                    int updatepointgeno = Queries.UpdateContract_Points_Indian_ID(office);
                    string log2 = "New Points Details:" + "Points ID:" + ContractPoints_ID + "," + "Profileid:" + Session["ProfileID"].ToString() + "," + "ContractNO:" + contractno + "," + "Club:" + pts_club + "," + "New Points:" + newpointsrightTextBox.Text + "," + "Entitlement:" + EntitlementPoinDropDownList.SelectedItem.Text + "," + "total Points Right:" + totalptrightsTextBox.Text + "," + "1st Yr Occ:" + firstyrTextBox.Text + "," + "Tenure:" + tenureTextBox.Text + "," + "Last Yr Occ:" + lastyrTextBox.Text + "," + "No.Persons:" + NoPersonsTextBox.Text + "," + "contractdetailsID:" + sContractdetailsID;
                int insertlog2 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Details Added", "", log2);

            }
                int paexists = Queries.ContractDetailsIDInContract_PA_IndianExists(sContractdetailsID);
                if (paexists == 1)
                {

                if (String.Compare(Session["onewpoints"].ToString(), newpoints) != 0)
                {
                    string act = "(points)New points changed from:" + Session["onewpoints"].ToString() + "To:" + newpoints;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Amount Updated", Session["onewpoints"].ToString(), newpoints);
                }
                else { }
                if (String.Compare(Session["oconversionfee"].ToString(), conversionfee) != 0)
                {
                    string act = "(points)Conversion Fee changed from:" + Session["oconversionfee"].ToString() + "To:" + conversionfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Conversion Fee Updated", Session["oconversionfee"].ToString(), conversionfee);
                }
                else { }
                if (String.Compare(Session["oadminfee"].ToString(), adminfee) != 0)
                {
                    string act = "(points)Admin Fee changed from:" + Session["oadminfee"].ToString() + "To:" + adminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee Updated", Session["oadminfee"].ToString(), adminfee);
                }
                else { }
                if (String.Compare(Session["ototpurchprice"].ToString(), totpurchprice) != 0)
                {
                    string act = "(points)Purchase Price changed from:" + Session["ototpurchprice"].ToString() + "To:" + totpurchprice;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Purcahse Price Updated", Session["ototpurchprice"].ToString(), totpurchprice);
                }
                else { }
                if (String.Compare(Session["ocgst"].ToString(), cgst) != 0)
                {
                    string act = "(points)CGST changed from:" + Session["ocgst"].ToString() + "To:" + cgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", Session["ocgst"].ToString(), cgst);
                }
                else { }
                if (String.Compare(Session["osgst"].ToString(), sgst) != 0)
                {
                    string act = "(points)SGST changed from:" + Session["osgst"].ToString() + "To:" + sgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", Session["osgst"].ToString(), sgst);
                }
                else { }

                if (String.Compare(Session["ototalpriceInTax"].ToString(), totalpriceInTax) != 0)
                {
                    string act = "(points) Total Price including Tax (PA) changed from:" + Session["ototalpriceInTax"].ToString() + "To:" + totalpriceInTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(Inc Tax) Updated", Session["ototalpriceInTax"].ToString(), totalpriceInTax);
                }
                else { }
                if (String.Compare(Session["odeposit"].ToString(), deposit) != 0)
                {
                    string act = "(points)Deposit(PA) changed from:" + Session["odeposit"].ToString() + "To:" + deposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", Session["odeposit"].ToString(), deposit);
                }
                else { }
                if (String.Compare(Session["obalance"].ToString(), balance) != 0)
                {
                    string act = "(points) Balaance(PA) changed from:" + Session["obalance"].ToString() + "To:" + balance;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Balance Updated", Session["obalance"].ToString(), balance);
                }
                else { }
                if (String.Compare(Session["obalancedue"].ToString(), balancedue) != 0)
                {
                    string act = "(points)balance due date(PA) changed from:" + Session["obalancedue"].ToString() + "To:" + balancedue;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Balance Due Updated", Session["obalancedue"].ToString(), balancedue);
                }
                else { }
                if (String.Compare(Session["oremarks"].ToString(), remarks) != 0)
                {
                    string act = "(points) Remarks changed from:" + Session["oremarks"].ToString() + "To:" + remarks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Remarks Updated", Session["oremarks"].ToString(), remarks);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedVolume"].ToString(), USDConvertedVolume) != 0)
                {
                    string act = "(points) Total Vol(USD) changed from:" + Session["oUSDConvertedVolume"].ToString() + "To:" + USDConvertedVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(USD) Updated", Session["oUSDConvertedVolume"].ToString(), USDConvertedVolume);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedAdminfee"].ToString(), USDConvertedAdminfee) != 0)
                {
                    string act = "(points) Total Admin fee(USD) changed from:" + Session["oUSDConvertedAdminfee"].ToString() + "To:" + USDConvertedAdminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee(USD) Updated", Session["oUSDConvertedAdminfee"].ToString(), USDConvertedAdminfee);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTax"].ToString(), USDConvertedTax) != 0)
                {
                    string act = "(points) Total Tax(USD) changed from:" + Session["oUSDConvertedTax"].ToString() + "To:" + USDConvertedTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax(USD) Updated", Session["oUSDConvertedTax"].ToString(), USDConvertedTax);
                }
                else { }
                if (String.Compare(Session["oUSDConverteddeposit"].ToString(), USDConverteddeposit) != 0)
                {
                    string act = "(points) Total Deposit(USD) changed from:" + Session["oUSDConverteddeposit"].ToString() + "To:" + USDConverteddeposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD) Updated", Session["oUSDConverteddeposit"].ToString(), USDConverteddeposit);
                }
                else { }
                if (String.Compare(Session["totaltax"].ToString(), finaltotaltax) != 0)
                {
                    string act = "(points) Total Tax changed from:" + Session["totaltax"].ToString() + "To:" + finaltotaltax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax Updated", Session["totaltax"].ToString(), finaltotaltax);
                }
                else { }

                if (String.Compare(Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume) != 0)
                {
                    string act = "(points) Total Volume(Inc Tax)(USD) changed from:" + Session["oUSDConvertedTotalVolume"].ToString() + "To:" + USDConvertedTotalVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume Inc Tax(USD) Updated", Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume);
                }
                else { }
                if (String.Compare(Session["oexchangerate"].ToString(), dollarrate) != 0)
                {
                    string act = "(points)Exchange Rate changed from:" + Session["oexchangerate"].ToString() + "To:" + dollarrate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Rate Updated", Session["oexchangerate"].ToString(), dollarrate);
                }
                else { }


                int updatecontractPA = Queries.UpdateContract_PA_Indian(newpoints, conversionfee, adminfee, totpurchprice, cgst, sgst, totalpriceInTax, deposit, balance, balancedue, remarks, sContractdetailsID);
                    int updatecontractpaUSD = Queries.UpdateContract_PA_IndianUSDConversion(USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, sContractdetailsID);
                int updatecontractpaexvolusd = Queries.UpdateContract_PA_IndianVolumeUSDExchRate(USDConvertedTotalVolume, dollarrate, sContractdetailsID);
                }
                else
                {
                    string Contract_PA_Id = Queries.GetContract_PA_Indian_ID(office);
                    string balpa;
                    if (balancedueTextBox.Text == "" || balancedueTextBox.Text == null || balancedueTextBox.Text == "NaN")
                    {
                        balpa = "";
                    }
                    else
                    {
                        balpa = balancedueTextBox.Text;
                    }



                    int insertpointsPA = Queries.InsertContract_PA_Indian(Contract_PA_Id, Session["ProfileID"].ToString(), contractno, newpointsTextBox.Text, conversionfeeTextBox.Text, adminfeeTextBox.Text, totpurchpriceTextBox.Text, cgstTextBox.Text, sgstTextBox.Text, totalpriceInTax, depositTextBox.Text, balanceTextBox.Text, balpa, remarksTextBox.Text, sContractdetailsID, "", "", "", "", "", "", "", "",
                        USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, TotalTaxTextBox.Text, USDConvertedTotalVolume, dollarrate);
                    int updatepageno = Queries.UpdateContract_PA_Indian_ID(office);
                    string log4 = "New Points PA:" + "PA_ID:" + Contract_PA_Id + "," + "Profileid:" + Session["ProfileID"].ToString() + "," + "ContractNO:" + contractno + "," + "New Points:" + newpointsTextBox.Text + "," + "Conversion Fee:" + conversionfeeTextBox.Text + ","
                        + "Admin Fee:" + adminfeeTextBox.Text + "," + "Total Purchase price:" + totpurchpriceTextBox.Text + "," + "Totak Tax:" + TotalTaxTextBox.Text + "," +
                        "CGST:" + cgstTextBox.Text + "," + "SGST:" + sgstTextBox.Text + "," + "Total Price Incl. Tax:" + totalpriceInTax + "," + "Deposit Amt:" +
                        depositTextBox.Text + "," + "balance Amt:" + balanceTextBox.Text + "," + "Balance Due date:" + balpa + "," + "remark:" + remarksTextBox.Text + ","
                        + "contractdetailsID:" + sContractdetailsID + "," + "Converted Vol:" + USDConvertedVolume + "," + "Converted Admin fee:" + USDConvertedAdminfee + "," + "Converted Tax:" + USDConvertedTax + "," + 
                        "Converted Deposit:" + USDConverteddeposit + "," + "TotalTax:" + TotalTaxTextBox.Text + "," + "Total Volume(USD):" + USDConvertedTotalVolume + "," + "Exchange rate:" + dollarrate;
                int insertlog4 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log4, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Purchase Agreement Details Added", "", log4);

            }
                if (Queries.CheckContract_Installments_Indian_ContractNoExists(sContractdetailsID) == 1)
                {
                    if (NoinstallmentTextBox.Text == "0" || NoinstallmentTextBox.Text == "" || NoinstallmentTextBox.Text == "NaN" || NoinstallmentTextBox.Text == "Infinity")
                    {
                        int updatefin1 = Queries.UpdatefinanceStartdateIFZeroInstallment(contractno);
                    }
                    else
                    {

                        if (String.Compare(Session["ofinmonth"].ToString(), finmonth) != 0)
                        {
                            int updatefinmonth = Queries.UpdateFinanceMonth_Indian(finmonth, sContractdetailsID);
                        }
                        else
                        {
                            int updatefin = Queries.UpdatefinanceStartdate(contractno);
                        }

                    }
                }
                else { }
                



            }//end of points contract
            else if (contract == "Trade-In-Points")
            {
                DataSet dstip = Queries.LoadTradeinPointsDetails(sContractdetailsID);
                    if (dstip.Tables[0].Rows.Count == 0)
                    {
                        Session["otip_Trade_In_Details_club_resort"] = ""; Session["otip_Trade_In_Details_No_rights"] = ""; Session["otip_Trade_In_Details_ContNo_RCINo"] = ""; Session["otip_Trade_In_Details_Points_value"] = ""; Session["Actualpoints_value"] = ""; Session["otip_New_Club"] = ""; Session["otip_New_Club_Points_Rights"] = ""; Session["otip_New_MemebrshipType"] = "";
                        Session["otip_New_TotalPointsRights"] = ""; Session["otip_New_First_year_occupancy"] = ""; Session["otip_New_Tenure"] = ""; Session["otip_New_Last_year_occupancy"] = ""; Session["otip_nopersons"] = "";
                       Session["oldtipmemtype"] = "";

                  }
                    else
                    {
                        Session["otip_Trade_In_Details_club_resort"] = dstip.Tables[0].Rows[0]["Trade_In_Details_club_resort"].ToString();
                        Session["otip_Trade_In_Details_No_rights"] = dstip.Tables[0].Rows[0]["Trade_In_Details_No_rights"].ToString();
                        Session["otip_Trade_In_Details_ContNo_RCINo"] = dstip.Tables[0].Rows[0]["Trade_In_Details_ContNo_RCINo"].ToString();
                        Session["otip_Trade_In_Details_Points_value"] = dstip.Tables[0].Rows[0]["Trade_In_Details_Points_value"].ToString();

                string first = dstip.Tables[0].Rows[0]["New_Club"].ToString().ToLower();
                Session["otip_New_Club"] = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(first);
            
                        Session["otip_New_Club_Points_Rights"] = dstip.Tables[0].Rows[0]["New_Club_Points_Rights"].ToString();
                        Session["otip_New_MemebrshipType"] = dstip.Tables[0].Rows[0]["New_MemebrshipType"].ToString();
                        Session["otip_New_TotalPointsRights"] = dstip.Tables[0].Rows[0]["New_TotalPointsRights"].ToString();
                        Session["otip_New_First_year_occupancy"] = dstip.Tables[0].Rows[0]["New_First_year_occupancy"].ToString();
                        Session["otip_New_Tenure"] = dstip.Tables[0].Rows[0]["New_Tenure"].ToString();
                        Session["otip_New_Last_year_occupancy"] = dstip.Tables[0].Rows[0]["New_Last_year_occupancy"].ToString();
                        Session["otip_nopersons"] = dstip.Tables[0].Rows[0]["NoPersons"].ToString();
                        Session["Actualpoints_value"] = dstip.Tables[0].Rows[0]["Actualpoints_value"].ToString();
                        Session["oldtipmemtype"] = dstip.Tables[0].Rows[0]["OldMemtype"].ToString();
            }



                DataSet dspa = Queries.contractPA(sContractdetailsID);
                    if (dspa.Tables[0].Rows.Count == 0)
                    {
                        Session["onewpoints"] = ""; Session["oconversionfee"] = ""; Session["oadminfee"] = ""; Session["ototpurchprice"] = ""; Session["ocgst"] = ""; Session["osgst"] = ""; Session["ototalpriceInTax"] = "";
                        Session["odeposit"] = ""; Session["obalance"] = ""; Session["obalancedue"] = ""; Session["oremarks"] = "";
                        Session["ooldVolume"] = ""; Session["ooldadminfee"] = ""; Session["ooldTotalTax"] = ""; Session["ooldDeposit"] = ""; Session["ousdoldvolume"] = ""; Session["ousdoldadminfee"] = ""; Session["ousdoldtax"] = ""; Session["ousdolddeposit"] = "";
                        Session["oUSDConvertedVolume"] = ""; Session["oUSDConvertedAdminfee"] = ""; Session["oUSDConvertedTax"] = ""; Session["oUSDConverteddeposit"] = ""; Session["totaltax"] = "";

                    }
                    else
                    {

                        Session["onewpoints"] = dspa.Tables[0].Rows[0]["New_Points_Price"].ToString();
                        Session["oconversionfee"] = dspa.Tables[0].Rows[0]["Conversion_Fee"].ToString();
                        Session["oadminfee"] = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                        Session["ototpurchprice"] = dspa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                        Session["ocgst"] = dspa.Tables[0].Rows[0]["Cgst"].ToString();
                        Session["osgst"] = dspa.Tables[0].Rows[0]["Sgst"].ToString();
                        Session["ototalpriceInTax"] = dspa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                        Session["odeposit"] = dspa.Tables[0].Rows[0]["Deposit"].ToString();
                        Session["obalance"] = dspa.Tables[0].Rows[0]["Balance"].ToString();
                        Session["obalancedue"] = dspa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                        Session["oremarks"] = dspa.Tables[0].Rows[0]["Remarks"].ToString();
                        Session["oUSDConvertedVolume"] = dspa.Tables[0].Rows[0]["USDConvertedVolume"].ToString();
                        Session["oUSDConvertedAdminfee"] = dspa.Tables[0].Rows[0]["USDConvertedAdminfee"].ToString();
                        Session["oUSDConvertedTax"] = dspa.Tables[0].Rows[0]["USDConvertedTax"].ToString();
                        Session["oUSDConverteddeposit"] = dspa.Tables[0].Rows[0]["USDConverteddeposit"].ToString();                  
                        Session["totaltax"] = dspa.Tables[0].Rows[0]["total_tax"].ToString();
                      Session["oUSDConvertedTotalVolume"] = dspa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                     Session["oexchangerate"] = dspa.Tables[0].Rows[0]["exchangerate"].ToString();


            }
            Session["oExpirydate"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Expirydate"]);
            Session["oCommence_date"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Commence_date"]);
            string commencedate = "01-01-" + firstyrTextBox.Text;
            string expirydate = "12-31-" + lastyrTextBox.Text;


            string tpresort = tnmresortTextBox.Text.ToUpper().Replace("'", "''"); 
                    string tpnpts = tipnopointsTextBox.Text;
                    string tpcontno = nmcontrcinoTextBox.Text.ToUpper(); 
                    string tpptsval = tipptsvalueTextBox.Text;
                    string pts_club = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(clubTextBox.Text); 
                    string pts_newpts = newpointsrightTextBox.Text;
                    string pts_entitlement = EntitlementPoinDropDownList.SelectedItem.Text;// Request.Form[EntitlementPoinDropDownList.UniqueID];
                    string pts_totalpts = totalptrightsTextBox.Text;
                    string pts_firstyr = firstyrTextBox.Text;
                    string pts_Tenure = tenureTextBox.Text;
                    string pts_lastyr = lastyrTextBox.Text;
                    string pts_nopersons = NoPersonsTextBox.Text;
                    string Actualpoints_value = tipactualptsvalueTextBox.Text;

            //  string oldtipmemtype = twoldmtypeTextBox.Text; 
            string oldtipmemtype;

            if (twoldmtypeTextBox.Text == "" || twoldmtypeTextBox.Text == null)
            {
                oldtipmemtype = "N/A";
            }
            else
            {
                oldtipmemtype = twoldmtypeTextBox.Text;
            }


        

                    string newpoints = newpointsTextBox.Text;
                string conversionfee = conversionfeeTextBox.Text;
                string adminfee = adminfeeTextBox.Text;
                string totpurchprice = totpurchpriceTextBox.Text;
                string cgst = cgstTextBox.Text;
                string sgst = sgstTextBox.Text;
                string totalpriceInTax = totalpriceInTaxTextBox.Text;
                string deposit = depositTextBox.Text;
                string balance = balanceTextBox.Text;
                string balancedue = balancedueTextBox.Text;
                string remarks = remarksTextBox.Text;

                string USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, USDConvertedTotalVolume;
                DataSet exrds = Queries.LoadExchange_Rate();
                string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
                if (currencyDropDownList.SelectedItem.Text == "INR")
                {
                    if (conversionfeeTextBox.Text == "" || conversionfeeTextBox.Text == null || conversionfeeTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(conversionfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                    if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN" )
                    {
                        USDConvertedTax = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text)  / Convert.ToDouble(dollarrate), 0);
                        USDConvertedTax = valueamt.ToString();
                    }
                    if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }

            }
            else
                {
                    if (totpurchpriceTextBox.Text == "" || totpurchpriceTextBox.Text == null || totpurchpriceTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(totpurchpriceTextBox.Text), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                        if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                        {
                            USDConvertedTax = "0";
                        }
                        else
                        {
                            double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text), 0);
                            USDConvertedTax = valueamt.ToString();
                        }
                        if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }

            }

                    int change = 0;
            if (String.Compare(Session["oExpirydate"].ToString(), expirydate) != 0)
            {
                string act = "(trade in points) Expiry date changed from:" + Session["oExpirydate"].ToString() + "To:" + expirydate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Expiry Date Updated", Session["oExpirydate"].ToString(), expirydate);
                change = 1;
            }
            else { }
            if (String.Compare(Session["oCommence_date"].ToString(), commencedate) != 0)
            {
                string act = "(trade in points) Commence date changed from:" + Session["oCommence_date"].ToString() + "To:" + commencedate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Commence Date Updated", Session["oCommence_date"].ToString(), commencedate);
                change = 1;
            }
            else { }
            if (change == 1)
                    {
                        int updatece = Queries.UpdateCommenceExpiryDate(expirydate, commencedate, sContractdetailsID);
                    }
                    else { }


            int tradeinptsexists = Queries.ContractDetailsIDInContract_Trade_In_Points_IndianExists(sContractdetailsID);
                    if (tradeinptsexists == 1)
                    {

                if (String.Compare(Session["otip_Trade_In_Details_club_resort"].ToString(), tpresort) != 0)
                {
                    string act = "(trade in points) club(trade in) changed from:" + Session["otip_Trade_In_Details_club_resort"].ToString() + "To:" + tpresort;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In CLub Name Updated", Session["otip_Trade_In_Details_club_resort"].ToString(), tpresort);
                }
                else { }
                if (String.Compare(Session["otip_Trade_In_Details_No_rights"].ToString(), tpnpts) != 0)
                {
                    string act = "(trade in points) points rights (trade in) changed from:" + Session["otip_Trade_In_Details_No_rights"].ToString() + "To:" + tpnpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade in Points Updated", Session["otip_Trade_In_Details_No_rights"].ToString(), tpnpts);
                }
                else { }

                if (String.Compare(Session["otip_Trade_In_Details_ContNo_RCINo"].ToString(), tpcontno) != 0)
                {
                    string act = "(trade in points) cont.no (trade in) changed from:" + Session["otip_Trade_In_Details_ContNo_RCINo"].ToString() + "To:" + tpcontno;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Contract No. Updated", Session["otip_Trade_In_Details_ContNo_RCINo"].ToString(), tpcontno);
                }
                else { }
                if (String.Compare(Session["otip_Trade_In_Details_Points_value"].ToString(), tpptsval) != 0)
                {
                    string act = "(trade in points)new points changed from:" + Session["otip_Trade_In_Details_Points_value"].ToString() + "To:" + tpptsval;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "TradeIn Points Updated", Session["otip_Trade_In_Details_Points_value"].ToString(), tpptsval);
                }
                else { }
                if (String.Compare(Session["Actualpoints_value"].ToString(), Actualpoints_value) != 0)
                {
                    string act = "(trade in points)Actual Points changed from:" + Session["Actualpoints_value"].ToString() + "To:" + Actualpoints_value;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Actual Points Updated", Session["Actualpoints_value"].ToString(), Actualpoints_value);
                }
                else { }

                if (String.Compare(Session["otip_New_Club"].ToString(), pts_club) != 0)
                {
                    string act = "(trade in points) club name changed from:" + Session["otip_New_Club"].ToString() + "To:" + pts_club;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Club Name Updated", Session["otip_New_Club"].ToString(), pts_club);
                }
                else { }
                if (String.Compare(Session["otip_New_Club_Points_Rights"].ToString(), pts_newpts) != 0)
                {
                    string act = "(trade in points)new points changed from:" + Session["otip_New_Club_Points_Rights"].ToString() + "To:" + pts_newpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Updated", Session["otip_New_Club_Points_Rights"].ToString(), pts_newpts);
                }
                else { }

                if (String.Compare(Session["otip_New_MemebrshipType"].ToString(), pts_entitlement) != 0)
                {
                    string act = "(trade in points)entitlement changed from:" + Session["otip_New_MemebrshipType"].ToString() + "To:" + pts_entitlement;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Entitlement Updated", Session["otip_New_MemebrshipType"].ToString(), pts_entitlement);
                }
                else { }


                if (String.Compare(Session["otip_New_TotalPointsRights"].ToString(), pts_totalpts) != 0)
                {
                    string act = "(trade in points) total points changed from:" + Session["otip_New_TotalPointsRights"].ToString() + "To:" + pts_totalpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Points Updated", Session["otip_New_TotalPointsRights"].ToString(), pts_totalpts);
                }
                else { }
                if (String.Compare(Session["otip_New_First_year_occupancy"].ToString(), pts_firstyr) != 0)
                {
                    string act = "(trade in points) first yr changed from:" + Session["otip_New_First_year_occupancy"].ToString() + "To:" + pts_firstyr;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "First Year Occupancy Updated", Session["otip_New_First_year_occupancy"].ToString(), pts_firstyr);
                }
                else { }
                if (String.Compare(Session["otip_New_Tenure"].ToString(), pts_Tenure) != 0)
                {
                    string act = "(trade in points)tenure changed from:" + Session["otip_New_Tenure"].ToString() + "To:" + pts_Tenure;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Tenure Updated", Session["otip_New_Tenure"].ToString(), pts_Tenure);
                }
                else { }
                if (String.Compare(Session["otip_New_Last_year_occupancy"].ToString(), pts_lastyr) != 0)
                {
                    string act = "(trade in points) last yr changed from:" + Session["otip_New_Last_year_occupancy"].ToString() + "To:" + pts_lastyr;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Last Year Occupancy Updated", Session["otip_New_Last_year_occupancy"].ToString(), pts_lastyr);
                }
                else { }
                if (String.Compare(Session["otip_nopersons"].ToString(), pts_nopersons) != 0)
                {
                    string act = "(trade in points) No. Of Persons changed from:" + Session["otip_nopersons"].ToString() + "To:" + pts_nopersons;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "PAX Occupancy", Session["otip_nopersons"].ToString(), pts_nopersons);
                }
                else { }

                if (String.Compare(Session["oldtipmemtype"].ToString(), oldtipmemtype) != 0)
                {
                    string act = "(trade in points) No. Of Persons changed from:" + Session["oldtipmemtype"].ToString() + "To:" + oldtipmemtype;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Entitlement Type", Session["oldtipmemtype"].ToString(), oldtipmemtype);
                }
                else { }



                int updatepointscontract = Queries.UpdateContract_Trade_In_Points_Indian(tpresort, tpnpts, tpcontno, tpptsval, pts_club, pts_newpts, pts_entitlement, pts_totalpts, pts_firstyr, pts_Tenure, pts_lastyr, sContractdetailsID, Actualpoints_value, pts_nopersons, oldtipmemtype);


                    }//if tradeinptsexists
                    else
                    {
                        string ContractTradeInPoint_ID = Queries.GetContract_Trade_In_Points_Indian_ID(office);
                        int inserttradeinpoints = Queries.InsertContract_Trade_In_Points_Indian(ContractTradeInPoint_ID, Session["ProfileID"].ToString(), 
                            contractno, tpresort, tpnpts, tpcontno, tpptsval, pts_club,
                            pts_newpts, pts_entitlement, pts_totalpts,
                           pts_firstyr, pts_Tenure, pts_lastyr, pts_nopersons, sContractdetailsID, Actualpoints_value, oldtipmemtype);
                        int updatetipgeno = Queries.UpdateContract_Trade_In_Points_Indian_ID(office);

                        string log2 = "Trade In Points:" + "Tradeinpoints id:" + ContractTradeInPoint_ID + "," + "Profile:" + Session["ProfileID"].ToString() + "," + 
                            "Contractno:" + contractno + "," + "Resort:" + tpresort + "," + "Points:" + tpnpts + "," + 
                            "Cont.No:" + tpcontno + "," + "Points Value:" + tpptsval + "," + "Club:" +
                            pts_club + "," + "New Points:" + pts_newpts + "," + 
                            "Entitlement:" + pts_entitlement + "," + "Total Points:" + pts_totalpts + "," + "1st Yr Occ:" +
                            pts_firstyr + "," + "Tenure:" + pts_Tenure + "," + "Last Yr Occ:" + pts_lastyr + "," + "No.persons:" + pts_nopersons + "," + "Actual points value:" + Actualpoints_value + "," + "contractdetailsID:" + sContractdetailsID;
                int insertlog2 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade in Details Added", "", log2);


            }
                    int paexists = Queries.ContractDetailsIDInContract_PA_IndianExists(sContractdetailsID);
                    if (paexists == 1)
                    {
                if (String.Compare(Session["onewpoints"].ToString(), newpoints) != 0)
                {
                    string act = "(trade in points)New points changed from:" + Session["onewpoints"].ToString() + "To:" + newpoints;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Amount Updated", Session["onewpoints"].ToString(), newpoints);
                }
                else { }
                if (String.Compare(Session["oconversionfee"].ToString(), conversionfee) != 0)
                {
                    string act = "(trade in points)Conversion Fee changed from:" + Session["oconversionfee"].ToString() + "To:" + conversionfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Conversion Fee Updated", Session["oconversionfee"].ToString(), conversionfee);
                }
                else { }
                if (String.Compare(Session["oadminfee"].ToString(), adminfee) != 0)
                {
                    string act = "(trade in points)Admin Fee changed from:" + Session["oadminfee"].ToString() + "To:" + adminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee Updated", Session["oadminfee"].ToString(), adminfee);
                }
                else { }
                if (String.Compare(Session["ototpurchprice"].ToString(), totpurchprice) != 0)
                {
                    string act = "(trade in points)Purchase Price changed from:" + Session["ototpurchprice"].ToString() + "To:" + totpurchprice;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Purcahse Price Updated", Session["ototpurchprice"].ToString(), totpurchprice);
                }
                else { }
                if (String.Compare(Session["ocgst"].ToString(), cgst) != 0)
                {
                    string act = "(trade in points)CGST changed from:" + Session["ocgst"].ToString() + "To:" + cgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", Session["ocgst"].ToString(), cgst);
                }
                else { }
                if (String.Compare(Session["osgst"].ToString(), sgst) != 0)
                {
                    string act = "(trade in points)SGST changed from:" + Session["osgst"].ToString() + "To:" + sgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", Session["osgst"].ToString(), sgst);
                }
                else { }

                if (String.Compare(Session["ototalpriceInTax"].ToString(), totalpriceInTax) != 0)
                {
                    string act = "(trade in points) Total Price including Tax (PA) changed from:" + Session["ototalpriceInTax"].ToString() + "To:" + totalpriceInTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(Inc Tax) Updated", Session["ototalpriceInTax"].ToString(), totalpriceInTax);
                }
                else { }
                if (String.Compare(Session["odeposit"].ToString(), deposit) != 0)
                {
                    string act = "(trade in points)Deposit(PA) changed from:" + Session["odeposit"].ToString() + "To:" + deposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", Session["odeposit"].ToString(), deposit);
                }
                else { }
                if (String.Compare(Session["obalance"].ToString(), balance) != 0)
                {
                    string act = "(trade in points) Balaance(PA) changed from:" + Session["obalance"].ToString() + "To:" + balance;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Balance Updated", Session["obalance"].ToString(), balance);
                }
                else { }
                if (String.Compare(Session["obalancedue"].ToString(), balancedue) != 0)
                {
                    string act = "(trade in points)balance due date(PA) changed from:" + Session["obalancedue"].ToString() + "To:" + balancedue;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Balance Due Updated", Session["obalancedue"].ToString(), balancedue);
                }
                else { }
                if (String.Compare(Session["oremarks"].ToString(), remarks) != 0)
                {
                    string act = "(trade in points) Remarks changed from:" + Session["oremarks"].ToString() + "To:" + remarks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Remarks Updated", Session["oremarks"].ToString(), remarks);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedVolume"].ToString(), USDConvertedVolume) != 0)
                {
                    string act = "(trade in points) Total Vol(USD) changed from:" + Session["oUSDConvertedVolume"].ToString() + "To:" + USDConvertedVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(USD) Updated", Session["oUSDConvertedVolume"].ToString(), USDConvertedVolume);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedAdminfee"].ToString(), USDConvertedAdminfee) != 0)
                {
                    string act = "(trade in points) Total Admin fee(USD) changed from:" + Session["oUSDConvertedAdminfee"].ToString() + "To:" + USDConvertedAdminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee(USD) Updated", Session["oUSDConvertedAdminfee"].ToString(), USDConvertedAdminfee);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTax"].ToString(), USDConvertedTax) != 0)
                {
                    string act = "(trade in points) Total Tax(USD) changed from:" + Session["oUSDConvertedTax"].ToString() + "To:" + USDConvertedTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax(USD) Updated", Session["oUSDConvertedTax"].ToString(), USDConvertedTax);
                }
                else { }
                if (String.Compare(Session["oUSDConverteddeposit"].ToString(), USDConverteddeposit) != 0)
                {
                    string act = "(trade in points) Total Deposit(USD) changed from:" + Session["oUSDConverteddeposit"].ToString() + "To:" + USDConverteddeposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD) Updated", Session["oUSDConverteddeposit"].ToString(), USDConverteddeposit);
                }
                else { }
                if (String.Compare(Session["totaltax"].ToString(), TotalTaxTextBox.Text) != 0)
                {
                    string act = "(trade in points) Total Tax changed from:" + Session["totaltax"].ToString() + "To:" + TotalTaxTextBox.Text;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax Updated", Session["totaltax"].ToString(), TotalTaxTextBox.Text);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume) != 0)
                {
                    string act = "(trade in points) Total Volume(Inc Tax)(USD) changed from:" + Session["oUSDConvertedTotalVolume"].ToString() + "To:" + USDConvertedTotalVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume Inc Tax(USD) Updated", Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume);
                }
                else { }
                if (String.Compare(Session["oexchangerate"].ToString(), dollarrate) != 0)
                {
                    string act = "(trade in points)Exchange Rate changed from:" + Session["oexchangerate"].ToString() + "To:" + dollarrate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Rate Updated", Session["oexchangerate"].ToString(), dollarrate);
                }
                else { }
                int updatecontractPA = Queries.UpdateContract_PA_Indian(newpoints, conversionfee, adminfee, totpurchprice, cgst, sgst, totalpriceInTax, deposit, balance, balancedue, remarks,  sContractdetailsID);
                int updatecontractpaUSD = Queries.UpdateContract_PA_IndianUSDConversion(USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, sContractdetailsID);
                int updatecontractpaexvolusd = Queries.UpdateContract_PA_IndianVolumeUSDExchRate(USDConvertedTotalVolume, dollarrate, sContractdetailsID);

            }//if paexists
                    else
                    {
                        string Contract_PA_Id = Queries.GetContract_PA_Indian_ID(office);
                        string balpa;
                        if (balancedueTextBox.Text == "" || balancedueTextBox.Text == null || balancedueTextBox.Text == "NaN")
                        {
                            balpa = "";
                        }
                        else
                        {
                            balpa = balancedueTextBox.Text;
                        }



                        int insertpointsPA = Queries.InsertContract_PA_Indian(Contract_PA_Id, Session["ProfileID"].ToString(), contractno, newpointsTextBox.Text, conversionfeeTextBox.Text, adminfeeTextBox.Text, totpurchpriceTextBox.Text, cgstTextBox.Text, sgstTextBox.Text, totalpriceInTax, depositTextBox.Text, balanceTextBox.Text, balpa, remarksTextBox.Text, sContractdetailsID, "", "", "", "", "", "", "", "",
                            USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, TotalTaxTextBox.Text, USDConvertedTotalVolume, dollarrate);
                        int updatepageno = Queries.UpdateContract_PA_Indian_ID(office);
                        string log4 = "Trade in Points PA:" + "PA_ID:" + Contract_PA_Id + "," + "Profileid:" + Session["ProfileID"].ToString() + "," + "ContractNO:" + contractno + "," + "New Points:" + newpointsTextBox.Text + "," + "Conversion Fee:" + conversionfeeTextBox.Text + ","
                            + "Admin Fee:" + adminfeeTextBox.Text + "," + "Total Purchase price:" + totpurchpriceTextBox.Text + "," + "Totak Tax:" + TotalTaxTextBox.Text + "," +
                            "CGST:" + cgstTextBox.Text + "," + "SGST:" + sgstTextBox.Text + "," + "Total Price Incl. Tax:" + totalpriceInTax + "," + "Deposit Amt:" +
                            depositTextBox.Text + "," + "balance Amt:" + balanceTextBox.Text + "," + "Balance Due date:" + balpa + "," + "remark:" + remarksTextBox.Text + ","
                            + "contractdetailsID:" + sContractdetailsID + "," + "Converted Vol:" + USDConvertedVolume + "," + "Converted Admin fee:" + USDConvertedAdminfee + "," + "Converted Tax:" + USDConvertedTax + "," + "Converted Deposit:" + USDConverteddeposit + "," + "TotalTax:" + TotalTaxTextBox.Text + "," + "Total Volume(USD):" + USDConvertedTotalVolume + "," + "Exchange rate:" + dollarrate;
                int insertlog4 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log4, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Purchase Agreement Details Added", "", log4);
            }
              
                if (Queries.CheckContract_Installments_Indian_ContractNoExists(sContractdetailsID) == 1)
                {
                    if (NoinstallmentTextBox.Text == "0" || NoinstallmentTextBox.Text == "" || NoinstallmentTextBox.Text == "NaN")
                    {
                        int updatefin1 = Queries.UpdatefinanceStartdateIFZeroInstallment(contractno);
                    }
                    else
                    {
                        // int updatefin = Queries.UpdatefinanceStartdate(contractno);
                        if (String.Compare(Session["ofinmonth"].ToString(), finmonth) != 0)
                        {
                            int updatefinmonth = Queries.UpdateFinanceMonth_Indian(finmonth, sContractdetailsID);
                        }
                        else
                        {
                            int updatefin = Queries.UpdatefinanceStartdate(contractno);
                        }
                    }
                }
                else { }
               
            }
            else if (contract == "Trade-In-Weeks")
            {
                DataSet dstiw = Queries.LoadTradeinWeeksDetails(sContractdetailsID);
                    if (dstiw.Tables[0].Rows.Count == 0)
                    {
                        Session["otiw_Trade_In_Weeks_resort"] = ""; Session["otiw_Trade_In_Weeks_Apt"] = ""; Session["otiw_Trade_In_Weeks_Season"] = ""; Session["otiw_Trade_In_Weeks_NoWks"] = ""; Session["otiw_Trade_In_Weeks_ContNo_RCINo"] = ""; Session["otiw_Trade_In_Weeks_Points_value"] = ""; Session["otiw_NewPointsW_Club"] = "";
                        Session["otiw_NewPointsW_Club_Points_Rights"] = ""; Session["otiw_NewPointsW_MemebrshipType"] = ""; Session["otiw_NewPointsW_Total_Points_rights"] = ""; Session["otiw_NewPointsW_First_year_occupancy"] = ""; Session["otiw_NewPointsW_Tenure"] = ""; Session["otiw_NewPointsW_Last_year_occupancy"] = ""; Session["otiw_nopersons"] = "";
                Session["oldtiwmemtype"] = "";
                Session["wActualpoints_value"] = "";
            }
                    else
                    {



                        Session["otiw_Trade_In_Weeks_resort"] = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_resort"].ToString();
                        Session["otiw_Trade_In_Weeks_Apt"] = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_Apt"].ToString();
                        Session["otiw_Trade_In_Weeks_Season"] = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_Season"].ToString();
                        Session["otiw_Trade_In_Weeks_NoWks"] = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_NoWks"].ToString();
                        Session["otiw_Trade_In_Weeks_ContNo_RCINo"] = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_ContNo_RCINo"].ToString();
                        Session["otiw_Trade_In_Weeks_Points_value"] = dstiw.Tables[0].Rows[0]["Trade_In_Weeks_Points_value"].ToString();
                     Session["wActualpoints_value"] = dstiw.Tables[0].Rows[0]["Actualpoints_value"].ToString();

      

                string first = dstiw.Tables[0].Rows[0]["NewPointsW_Club"].ToString().ToLower();
                Session["otiw_NewPointsW_Club"] = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(first);

                Session["otiw_NewPointsW_Club_Points_Rights"] = dstiw.Tables[0].Rows[0]["NewPointsW_Club_Points_Rights"].ToString();
                        Session["otiw_NewPointsW_MemebrshipType"] = dstiw.Tables[0].Rows[0]["NewPointsW_MemebrshipType"].ToString();
                        Session["otiw_NewPointsW_Total_Points_rights"] = dstiw.Tables[0].Rows[0]["NewPointsW_Total_Points_rights"].ToString();
                        Session["otiw_NewPointsW_First_year_occupancy"] = dstiw.Tables[0].Rows[0]["NewPointsW_First_year_occupancy"].ToString();
                        Session["otiw_NewPointsW_Tenure"] = dstiw.Tables[0].Rows[0]["NewPointsW_Tenure"].ToString();
                        Session["otiw_NewPointsW_Last_year_occupancy"] = dstiw.Tables[0].Rows[0]["NewPointsW_Last_year_occupancy"].ToString();
                        Session["otiw_nopersons"] = dstiw.Tables[0].Rows[0]["NoPersons"].ToString();
                        Session["oldtiwmemtype"] = dstiw.Tables[0].Rows[0]["OldMemtype"].ToString();
            }


                DataSet dspa = Queries.contractPA(sContractdetailsID);
                    if (dspa.Tables[0].Rows.Count == 0)
                    {
                        Session["onewpoints"] = ""; Session["oconversionfee"] = ""; Session["oadminfee"] = ""; Session["ototpurchprice"] = ""; Session["ocgst"] = ""; Session["osgst"] = ""; Session["ototalpriceInTax"] = "";
                        Session["odeposit"] = ""; Session["obalance"] = ""; Session["obalancedue"] = ""; Session["oremarks"] = "";
                        Session["ooldVolume"] = ""; Session["ooldadminfee"] = ""; Session["ooldTotalTax"] = ""; Session["ooldDeposit"] = ""; Session["ousdoldvolume"] = ""; Session["ousdoldadminfee"] = ""; Session["ousdoldtax"] = ""; Session["ousdolddeposit"] = "";
                        Session["oUSDConvertedVolume"] = ""; Session["oUSDConvertedAdminfee"] = ""; Session["oUSDConvertedTax"] = ""; Session["oUSDConverteddeposit"] = ""; Session["totaltax"] = "";


                Session["oUSDConvertedTotalVolume"] = ""; Session["oexchangerate"] = "";

       
            }
                    else
                    {

                        Session["onewpoints"] = dspa.Tables[0].Rows[0]["New_Points_Price"].ToString();
                        Session["oconversionfee"] = dspa.Tables[0].Rows[0]["Conversion_Fee"].ToString();
                        Session["oadminfee"] = dspa.Tables[0].Rows[0]["Admin_Fee"].ToString();
                        Session["ototpurchprice"] = dspa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                        Session["ocgst"] = dspa.Tables[0].Rows[0]["Cgst"].ToString();
                        Session["osgst"] = dspa.Tables[0].Rows[0]["Sgst"].ToString();
                        Session["ototalpriceInTax"] = dspa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                        Session["odeposit"] = dspa.Tables[0].Rows[0]["Deposit"].ToString();
                        Session["obalance"] = dspa.Tables[0].Rows[0]["Balance"].ToString();
                        Session["obalancedue"] = dspa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                        Session["oremarks"] = dspa.Tables[0].Rows[0]["Remarks"].ToString();
                        Session["oUSDConvertedVolume"] = dspa.Tables[0].Rows[0]["USDConvertedVolume"].ToString();
                        Session["oUSDConvertedAdminfee"] = dspa.Tables[0].Rows[0]["USDConvertedAdminfee"].ToString();
                        Session["oUSDConvertedTax"] = dspa.Tables[0].Rows[0]["USDConvertedTax"].ToString();
                        Session["oUSDConverteddeposit"] = dspa.Tables[0].Rows[0]["USDConverteddeposit"].ToString();
                        Session["totaltax"] = dspa.Tables[0].Rows[0]["total_tax"].ToString();
                Session["oUSDConvertedTotalVolume"] = dspa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                Session["oexchangerate"] = dspa.Tables[0].Rows[0]["exchangerate"].ToString();

            }
            Session["oExpirydate"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Expirydate"]);
            Session["oCommence_date"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Commence_date"]);
            string commencedate = "01-01-" + firstyrTextBox.Text;
                string expirydate = "12-31-" + lastyrTextBox.Text;


            string tpresort = tnmresortTextBox.Text.ToUpper().Replace("'", "''");
            string apt = tnmapttypeTextBox.Text.ToUpper();
                string season = tnmseasonDropDownList.SelectedItem.Text;
                string nowks = nmnowksTextBox.Text.ToUpper();
                string tpcontno = nmcontrcinoTextBox.Text.ToUpper();
                string tpptsval = tipptsvalueTextBox.Text;
            string pts_club = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(clubTextBox.Text);
                string pts_newpts = newpointsrightTextBox.Text;
                string pts_entitlement = EntitlementPoinDropDownList.SelectedItem.Text;// Request.Form[EntitlementPoinDropDownList.UniqueID];
                string pts_totalpts = totalptrightsTextBox.Text;
                string pts_firstyr = firstyrTextBox.Text;
                string pts_Tenure = tenureTextBox.Text;
                string pts_lastyr = lastyrTextBox.Text;
                string pts_nopersons = NoPersonsTextBox.Text;
            string Actualpoints_value = tipactualptsvalueTextBox.Text;
            string oldtipmemtype;

            if (twoldmtypeTextBox.Text == "" || twoldmtypeTextBox.Text == null)
            {
                oldtipmemtype = "N/A";
            }
            else
            {
                oldtipmemtype = twoldmtypeTextBox.Text;
            }

            //string interestrate = interestrateTextBox.Text;
            string newpoints = newpointsTextBox.Text;
                string conversionfee = conversionfeeTextBox.Text;
                string adminfee = adminfeeTextBox.Text;
                string totpurchprice = totpurchpriceTextBox.Text;
                string cgst = cgstTextBox.Text;
                string sgst = sgstTextBox.Text;
                string totalpriceInTax = totalpriceInTaxTextBox.Text;
                string deposit = depositTextBox.Text;
                string balance = balanceTextBox.Text;
                string balancedue = balancedueTextBox.Text;
                string remarks = remarksTextBox.Text;
       
            string USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, USDConvertedTotalVolume;
                DataSet exrds = Queries.LoadExchange_Rate();
                string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
                if (currencyDropDownList.SelectedItem.Text == "INR")
                {
                    if (conversionfeeTextBox.Text == "" || conversionfeeTextBox.Text == null || conversionfeeTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(conversionfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                    if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                    {
                        USDConvertedTax = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedTax = valueamt.ToString();
                    }
                    if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                    if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                    {
                        USDConvertedTotalVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedTotalVolume = valueamt.ToString();
                    }

            }
            else
                {
                    if (totpurchpriceTextBox.Text == "" || totpurchpriceTextBox.Text == null || totpurchpriceTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(totpurchpriceTextBox.Text), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                        if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                        {
                            USDConvertedTax = "0";
                        }
                        else
                        {
                            double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text), 0);
                            USDConvertedTax = valueamt.ToString();
                        }
                        if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                    if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                    {
                        USDConvertedTotalVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text), 0);
                        USDConvertedTotalVolume = valueamt.ToString();
                    }

            }

                    int change = 0;
            if (String.Compare(Session["oExpirydate"].ToString(), expirydate) != 0)
            {
                string act = "(trade in weeks) Expiry date changed from:" + Session["oExpirydate"].ToString() + "To:" + expirydate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Expiry Date Updated", Session["oExpirydate"].ToString(), expirydate);
                change = 1;
            }
            else { }
            if (String.Compare(Session["oCommence_date"].ToString(), commencedate) != 0)
            {
                string act = "(trade in weeks) Commence date changed from:" + Session["oCommence_date"].ToString() + "To:" + commencedate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Commence Date Updated", Session["oCommence_date"].ToString(), commencedate);
                change = 1;
            }
            else { }
            if (change == 1)
                    {
                        int updatece = Queries.UpdateCommenceExpiryDate(expirydate, commencedate, sContractdetailsID);
                    }
                    else { }

            int tradeinweeksexists = Queries.ContractDetailsIDInContract_Trade_In_Weeks_IndianExists(sContractdetailsID);
                    if (tradeinweeksexists == 1)
                    {


                if (String.Compare(Session["otiw_Trade_In_Weeks_resort"].ToString(), tpresort) != 0)
                {
                    string act = "(trade in weeks) club(trade in) changed from:" + Session["otiw_Trade_In_Weeks_resort"].ToString() + "To:" + tpresort;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Club Name Updated", Session["otiw_Trade_In_Weeks_resort"].ToString(), tpresort);
                }
                else { }

                if (String.Compare(Session["otiw_Trade_In_Weeks_Apt"].ToString(), apt) != 0)
                {
                    string act = "(trade in weeks) Apt Type(trade in) changed from:" + Session["otiw_Trade_In_Weeks_Apt"].ToString() + "To:" + apt;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Apartment Type Updated", Session["otiw_Trade_In_Weeks_Apt"].ToString(), apt);
                }
                else { }

                if (String.Compare(Session["otiw_Trade_In_Weeks_Season"].ToString(), season) != 0)
                {
                    string act = "(trade in weeks) Season(trade in) changed from:" + Session["otiw_Trade_In_Weeks_Season"].ToString() + "To:" + season;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Season Updated", Session["otiw_Trade_In_Weeks_Season"].ToString(), season);
                }
                else { }

                if (String.Compare(Session["otiw_Trade_In_Weeks_NoWks"].ToString(), nowks) != 0)
                {
                    string act = "(trade in weeks) No. Wks(trade in) changed from:" + Session["otiw_Trade_In_Weeks_NoWks"].ToString() + "To:" + nowks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "No. Weeks Updated", Session["otiw_Trade_In_Weeks_NoWks"].ToString(), nowks);
                }
                else { }
                if (String.Compare(Session["otiw_Trade_In_Weeks_ContNo_RCINo"].ToString(), tpcontno) != 0)
                {
                    string act = "(trade in weeks) cont.no (trade in) changed from:" + Session["otiw_Trade_In_Weeks_ContNo_RCINo"].ToString() + "To:" + tpcontno;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Contract No. Updated", Session["otiw_Trade_In_Weeks_ContNo_RCINo"].ToString(), tpcontno);
                }
                else { }
                if (String.Compare(Session["otiw_Trade_In_Weeks_Points_value"].ToString(), tpptsval) != 0)
                {
                    string act = "(trade in weeks) points value changed from:" + Session["otiw_Trade_In_Weeks_Points_value"].ToString() + "To:" + tpptsval;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Points Value Updated", Session["otiw_Trade_In_Weeks_Points_value"].ToString(), tpptsval);
                }
                else { }


                if (String.Compare(Session["otiw_NewPointsW_Club"].ToString(), pts_club) != 0)
                {
                    string act = "(trade in weeks) club name changed from:" + Session["otiw_NewPointsW_Club"].ToString() + "To:" + pts_club;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Club Name Updated", Session["otiw_NewPointsW_Club"].ToString(), pts_club);
                }
                else { }


                if (String.Compare(Session["otiw_NewPointsW_Club_Points_Rights"].ToString(), pts_newpts) != 0)
                {
                    string act = "(trade in weeks)new points changed from:" + Session["otiw_NewPointsW_Club_Points_Rights"].ToString() + "To:" + pts_newpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Updated", Session["otiw_NewPointsW_Club_Points_Rights"].ToString(), pts_newpts);
                }
                else { }

                if (String.Compare(Session["otiw_NewPointsW_MemebrshipType"].ToString(), pts_entitlement) != 0)
                {
                    string act = "(trade in weeks)entitlement changed from:" + Session["otiw_NewPointsW_MemebrshipType"].ToString() + "To:" + pts_entitlement;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Entitlement Updated", Session["otiw_NewPointsW_MemebrshipType"].ToString(), pts_entitlement);
                }
                else { }
                if (String.Compare(Session["otiw_NewPointsW_Total_Points_rights"].ToString(), pts_totalpts) != 0)
                {
                    string act = "(trade in weeks) total points changed from:" + Session["otiw_NewPointsW_Total_Points_rights"].ToString() + "To:" + pts_totalpts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Points Updated", Session["otiw_NewPointsW_Total_Points_rights"].ToString(), pts_totalpts);
                }
                else { }
                if (String.Compare(Session["otiw_NewPointsW_First_year_occupancy"].ToString(), pts_firstyr) != 0)
                {
                    string act = "(trade in weeks) first yr changed from:" + Session["otiw_NewPointsW_First_year_occupancy"].ToString() + "To:" + pts_firstyr;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "First Year Occupnacy", Session["otiw_NewPointsW_First_year_occupancy"].ToString(), pts_firstyr);
                }
                else { }
                if (String.Compare(Session["otiw_NewPointsW_Tenure"].ToString(), pts_Tenure) != 0)
                {
                    string act = "(trade in weeks)tenure changed from:" + Session["otiw_NewPointsW_Tenure"].ToString() + "To:" + pts_Tenure;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Tenure Updated", Session["otiw_NewPointsW_Tenure"].ToString(), pts_Tenure);
                }
                else { }
                if (String.Compare(Session["otiw_NewPointsW_Last_year_occupancy"].ToString(), pts_lastyr) != 0)
                {
                    string act = "(trade in weeks) last yr changed from:" + Session["otiw_NewPointsW_Last_year_occupancy"].ToString() + "To:" + pts_lastyr;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Last Year Occupancy", Session["otiw_NewPointsW_Last_year_occupancy"].ToString(), pts_lastyr);
                }
                else { }
                if (String.Compare(Session["otiw_nopersons"].ToString(), pts_nopersons) != 0)
                {
                    string act = "(trade in weeks) last yr changed from:" + Session["otiw_nopersons"].ToString() + "To:" + pts_nopersons;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "PAX Occupancy", Session["otiw_nopersons"].ToString(), pts_nopersons);
                }
                else { }
                if (String.Compare(Session["oldtiwmemtype"].ToString(), oldtipmemtype) != 0)
                {
                    string act = "(trade in weeks) Old Membership type changed from:" + Session["oldtiwmemtype"].ToString() + "To:" + oldtipmemtype;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Entitlement Updated", Session["oldtiwmemtype"].ToString(), oldtipmemtype);
                }
                else { }
                if (String.Compare(Session["wActualpoints_value"].ToString(), Actualpoints_value) != 0)
                {
                    string act = "(trade in weeks) Actual points value changed from:" + Session["wActualpoints_value"].ToString() + "To:" + Actualpoints_value;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Points Value Updated", Session["wActualpoints_value"].ToString(), Actualpoints_value);
                }
                else { }

                int updatepointscontract = Queries.UpdateContract_Trade_In_Weeks_Indian(tpresort, apt, season, nowks, tpcontno, tpptsval, pts_club, pts_newpts, 
                            pts_entitlement, pts_totalpts, pts_firstyr, pts_Tenure, pts_lastyr, pts_nopersons ,sContractdetailsID, oldtipmemtype);
                int update2 = Queries.UpdateContract_Trade_In_Weeks_IndianActualPoints(Actualpoints_value, sContractdetailsID);

                    }
                    else
                    {
                        string ContractTradeInWeeks_ID = Queries.GetContract_Trade_In_Weeks_Indian_ID(office);
                        int inserttradeinweeks = Queries.InsertContract_Trade_In_Weeks_Indian(ContractTradeInWeeks_ID, Session["ProfileID"].ToString(), contractno,
                           tpresort, apt, season, nowks,
                          tpcontno, tpptsval, pts_club,
                            pts_newpts, pts_entitlement, pts_totalpts, pts_firstyr,
                            pts_Tenure, pts_lastyr, pts_nopersons, sContractdetailsID, oldtipmemtype, Actualpoints_value);

                        int updatetiwgeno = Queries.UpdateContract_Trade_In_Weeks_Indian_ID(office);
                        string log2 = "Trade in weeks details:" + "tradeinweeks id:" + ContractTradeInWeeks_ID + "," + "Profile id:" + Session["ProfileID"].ToString() + "," + "ContractNo:" + contractno + "," +
                            "Resort:" + tpresort + "," + "Apt Type:" + apt + "," +
                            "Season:" + season + "," + "No Wks:" + nowks + "," +
                            "Cont.No:" + tpcontno + "," + "PointsValue:" + tpptsval + "," +"Old Mem Type:"+oldtipmemtype+","+"Actual Points Value:"+ Actualpoints_value+","+
                            "Club:" + pts_club + "," + "New Points:" + pts_newpts + "," + 
                            "Entitlement:" + pts_entitlement + "," + "Total Points:" + pts_totalpts + "," +
                            "1st Yr Occ:" + pts_firstyr + "," + "Tenure:" + pts_Tenure + "," +
                            "Last Yr Occ:" + pts_lastyr + "," + "No.persons:" + pts_nopersons + "," + "contractdetailsID:" + sContractdetailsID;
                int insertlog2 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade in Details Added", "", log2);
            }

                    int paexists = Queries.ContractDetailsIDInContract_PA_IndianExists(sContractdetailsID);
                    if (paexists == 1)
                    {



                if (String.Compare(Session["onewpoints"].ToString(), newpoints) != 0)
                {
                    string act = "(trade in weeks)New points changed from:" + Session["onewpoints"].ToString() + "To:" + newpoints;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Points Amount Updated", Session["onewpoints"].ToString(), newpoints);
                }
                else { }
                if (String.Compare(Session["oconversionfee"].ToString(), conversionfee) != 0)
                {
                    string act = "(trade in weeks)Conversion Fee changed from:" + Session["oconversionfee"].ToString() + "To:" + conversionfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Conversion Fee Updated", Session["oconversionfee"].ToString(), conversionfee);
                }
                else { }
                if (String.Compare(Session["oadminfee"].ToString(), adminfee) != 0)
                {
                    string act = "(trade in weeks)Admin Fee changed from:" + Session["oadminfee"].ToString() + "To:" + adminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee Updated", Session["oadminfee"].ToString(), adminfee);
                }
                else { }
                if (String.Compare(Session["ototpurchprice"].ToString(), totpurchprice) != 0)
                {
                    string act = "(trade in weeks)Purchase Price changed from:" + Session["ototpurchprice"].ToString() + "To:" + totpurchprice;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Purcahse Price Updated", Session["ototpurchprice"].ToString(), totpurchprice);
                }
                else { }
                if (String.Compare(Session["ocgst"].ToString(), cgst) != 0)
                {
                    string act = "(trade in weeks)CGST changed from:" + Session["ocgst"].ToString() + "To:" + cgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", Session["ocgst"].ToString(), cgst);
                }
                else { }
                if (String.Compare(Session["osgst"].ToString(), sgst) != 0)
                {
                    string act = "(trade in weeks)SGST changed from:" + Session["osgst"].ToString() + "To:" + sgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", Session["osgst"].ToString(), sgst);
                }
                else { }

                if (String.Compare(Session["ototalpriceInTax"].ToString(), totalpriceInTax) != 0)
                {
                    string act = "(trade in weeks) Total Price including Tax (PA) changed from:" + Session["ototalpriceInTax"].ToString() + "To:" + totalpriceInTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(Inc Tax) Updated", Session["ototalpriceInTax"].ToString(), totalpriceInTax);
                }
                else { }
                if (String.Compare(Session["odeposit"].ToString(), deposit) != 0)
                {
                    string act = "(trade in weeks)Deposit(PA) changed from:" + Session["odeposit"].ToString() + "To:" + deposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", Session["odeposit"].ToString(), deposit);
                }
                else { }
                if (String.Compare(Session["obalance"].ToString(), balance) != 0)
                {
                    string act = "(trade in weeks) Balaance(PA) changed from:" + Session["obalance"].ToString() + "To:" + balance;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Balance Updated", Session["obalance"].ToString(), balance);
                }
                else { }
                if (String.Compare(Session["obalancedue"].ToString(), balancedue) != 0)
                {
                    string act = "(trade in weeks)balance due date(PA) changed from:" + Session["obalancedue"].ToString() + "To:" + balancedue;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Balance Due Updated", Session["obalancedue"].ToString(), balancedue);
                }
                else { }
                if (String.Compare(Session["oremarks"].ToString(), remarks) != 0)
                {
                    string act = "(trade in weeks) Remarks changed from:" + Session["oremarks"].ToString() + "To:" + remarks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Remarks Updated", Session["oremarks"].ToString(), remarks);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedVolume"].ToString(), USDConvertedVolume) != 0)
                {
                    string act = "(trade in weeks) Total Vol(USD) changed from:" + Session["oUSDConvertedVolume"].ToString() + "To:" + USDConvertedVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(USD) Updated", Session["oUSDConvertedVolume"].ToString(), USDConvertedVolume);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedAdminfee"].ToString(), USDConvertedAdminfee) != 0)
                {
                    string act = "(trade in weeks) Total Admin fee(USD) changed from:" + Session["oUSDConvertedAdminfee"].ToString() + "To:" + USDConvertedAdminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee(USD) Updated", Session["oUSDConvertedAdminfee"].ToString(), USDConvertedAdminfee);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTax"].ToString(), USDConvertedTax) != 0)
                {
                    string act = "(trade in weeks) Total Tax(USD) changed from:" + Session["oUSDConvertedTax"].ToString() + "To:" + USDConvertedTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax(USD) Updated", Session["oUSDConvertedTax"].ToString(), USDConvertedTax);
                }
                else { }
                if (String.Compare(Session["oUSDConverteddeposit"].ToString(), USDConverteddeposit) != 0)
                {
                    string act = "(trade in weeks) Total Deposit(USD) changed from:" + Session["oUSDConverteddeposit"].ToString() + "To:" + USDConverteddeposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD) Updated", Session["oUSDConverteddeposit"].ToString(), USDConverteddeposit);
                }
                else { }
                if (String.Compare(Session["totaltax"].ToString(), TotalTaxTextBox.Text) != 0)
                {
                    string act = "(trade in weeks) Total Deposit(USD) changed from:" + Session["totaltax"].ToString() + "To:" + TotalTaxTextBox.Text;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax Updated", Session["totaltax"].ToString(), TotalTaxTextBox.Text);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume) != 0)
                {
                    string act = "(trade in weeks) Total Volume(Inc Tax)(USD) changed from:" + Session["oUSDConvertedTotalVolume"].ToString() + "To:" + USDConvertedTotalVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume Inc Tax(USD) Updated", Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume);
                }
                else { }
                if (String.Compare(Session["oexchangerate"].ToString(), dollarrate) != 0)
                {
                    string act = "(trade in weeks)Exchange Rate changed from:" + Session["oexchangerate"].ToString() + "To:" + dollarrate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Rate Updated", Session["oexchangerate"].ToString(), dollarrate);
                }
                else { }


                int updatecontractPA = Queries.UpdateContract_PA_Indian(newpoints, conversionfee, adminfee, totpurchprice, cgst, sgst, totalpriceInTax, deposit, balance, balancedue, remarks,  sContractdetailsID);
                        int updatecontractpaUSD = Queries.UpdateContract_PA_IndianUSDConversion(USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, sContractdetailsID);

                int updatecontractpaexvolusd = Queries.UpdateContract_PA_IndianVolumeUSDExchRate(USDConvertedTotalVolume, dollarrate, sContractdetailsID);
            }
                    else
                    {
                        string Contract_PA_Id = Queries.GetContract_PA_Indian_ID(office);
                        string balpa;
                        if (balancedueTextBox.Text == "" || balancedueTextBox.Text == null || balancedueTextBox.Text == "NaN")
                        {
                            balpa = "";
                        }
                        else
                        {
                            balpa = balancedueTextBox.Text;
                        }



                        int insertpointsPA = Queries.InsertContract_PA_Indian(Contract_PA_Id, Session["ProfileID"].ToString(), contractno, newpointsTextBox.Text, conversionfeeTextBox.Text, adminfeeTextBox.Text, totpurchpriceTextBox.Text, cgstTextBox.Text, sgstTextBox.Text, totalpriceInTax, depositTextBox.Text, balanceTextBox.Text, balpa, remarksTextBox.Text, sContractdetailsID, "", "", "", "", "", "", "", "",
                            USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, TotalTaxTextBox.Text, USDConvertedTotalVolume, dollarrate);
                        int updatepageno = Queries.UpdateContract_PA_Indian_ID(office);
                        string log4 = "Trade In Weeks PA:" + "PA_ID:" + Contract_PA_Id + "," + "Profileid:" + Session["ProfileID"].ToString() + "," + "ContractNO:" + contractno + "," + "New Points:" + newpointsTextBox.Text + "," + "Conversion Fee:" + conversionfeeTextBox.Text + ","
                            + "Admin Fee:" + adminfeeTextBox.Text + "," + "Total Purchase price:" + totpurchpriceTextBox.Text + "," + "Totak Tax:" + TotalTaxTextBox.Text + "," +
                            "CGST:" + cgstTextBox.Text + "," + "SGST:" + sgstTextBox.Text + "," + "Total Price Incl. Tax:" + totalpriceInTax + "," + "Deposit Amt:" +
                            depositTextBox.Text + "," + "balance Amt:" + balanceTextBox.Text + "," + "Balance Due date:" + balpa + "," + "remark:" + remarksTextBox.Text + ","
                            + "contractdetailsID:" + sContractdetailsID + "," + "Converted Vol:" + USDConvertedVolume + "," + "Converted Admin fee:" + USDConvertedAdminfee + "," + "Converted Tax:" + USDConvertedTax + "," + "Converted Deposit:" + USDConverteddeposit + "," + "TotalTax:" + TotalTaxTextBox.Text+ "," + "Total Volume(USD):" + USDConvertedTotalVolume + "," + "Exchange rate:" + dollarrate;
                int insertlog4 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log4, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Purchase Agreement Details Added", "", log4);

            }
                    if (Queries.CheckContract_Installments_Indian_ContractNoExists(sContractdetailsID) == 1)
                    {
                        if (NoinstallmentTextBox.Text == "0" || NoinstallmentTextBox.Text == "" || NoinstallmentTextBox.Text == "NaN" || NoinstallmentTextBox.Text == "Infinity")
                        {
                            int updatefin1 = Queries.UpdatefinanceStartdateIFZeroInstallment(contractno);
                        }
                        else
                        {

                            if (String.Compare(Session["ofinmonth"].ToString(), finmonth) != 0)
                            {
                                int updatefinmonth = Queries.UpdateFinanceMonth_Indian(finmonth, sContractdetailsID);
                            }
                            else
                            {
                                int updatefin = Queries.UpdatefinanceStartdate(contractno);
                            }

                        }
                 }
                else { }
                
            }
            else if (contract == "Fractional")
            {
                DataSet dstif = Queries.loadtradeinfractional(sContractdetailsID);
                    if (dstif.Tables[0].Rows.Count == 0)
                    {
                        Session["otiresort"] = ""; Session["otifresidence_no"] = ""; Session["otifresidence_type"] = ""; Session["otiffractional_interest"] = ""; Session["otifentitlement"] = "";
                        Session["otiffirstyear_Occupancy"] = ""; Session["otiftenure"] = ""; Session["otiflastyear_Occupancy"] = ""; Session["otifleaseback"] = ""; Session["otifMc_Charges"] = "";

                    }
                    else
                    {

                        Session["otiresort"] = dstif.Tables[0].Rows[0]["resort"].ToString();
                        Session["otifresidence_no"] = dstif.Tables[0].Rows[0]["residence_no"].ToString();
                        Session["otifresidence_type"] = dstif.Tables[0].Rows[0]["residence_type"].ToString();
                        Session["otiffractional_interest"] = dstif.Tables[0].Rows[0]["fractional_interest"].ToString();
                        Session["otifentitlement"] = dstif.Tables[0].Rows[0]["entitlement"].ToString();
                        Session["otiffirstyear_Occupancy"] = dstif.Tables[0].Rows[0]["firstyear_Occupancy"].ToString();
                        Session["otiftenure"] = dstif.Tables[0].Rows[0]["tenure"].ToString();
                        Session["otiflastyear_Occupancy"] = dstif.Tables[0].Rows[0]["lastyear_Occupancy"].ToString();
                        Session["otifleaseback"] = dstif.Tables[0].Rows[0]["leaseback"].ToString();
                        Session["otifMc_Charges"] = dstif.Tables[0].Rows[0]["Mc_Charges"].ToString();


                    }




                DataSet dsfpa = Queries.LoadfractionalPA(sContractdetailsID);
                    if (dsfpa.Tables[0].Rows.Count == 0)
                    {
                         Session["ofctAdmission_fees"] = ""; Session["ofctadministration_fees"] = ""; Session["ofctCgst"] = ""; Session["ofctSgst"] = ""; Session["ofctTotal_Purchase_Price"] = ""; Session["ofctTotal_Price_Including_Tax"] = "";
            Session["ofctDeposit"] = ""; Session["ofctBalance"] = ""; Session["ofctBalance_Due_Dates"] = ""; Session["ofctRemarks"] = ""; Session["otradeinvalue"] = ""; Session["ototalvalue"] = "";
            Session["oFoldVolume"] = ""; Session["oFoldadminfee"] = ""; Session["oFoldTotalTax"] = ""; Session["oFoldDeposit"] = ""; Session["oFusdoldvolume"] = ""; Session["oFusdoldadminfee"] = ""; Session["oFusdoldtax"] = ""; Session["oFusdolddeposit"] = "";
            Session["oUSDConvertedFVolume"] = ""; Session["oUSDConvertedFAdminfee"] = ""; Session["oUSDConvertedFTax"] = ""; Session["oUSDConvertedFdeposit"] = ""; Session["Ftotaltax"] = "";
                Session["oUSDConvertedTotalVolume"] = ""; Session["oexchangerate"] = "";

            }
                    else
                    {
                        Session["ofctAdmission_fees"] = dsfpa.Tables[0].Rows[0]["Admission_fees"].ToString();
                        Session["ofctadministration_fees"] = dsfpa.Tables[0].Rows[0]["administration_fees"].ToString();
                        Session["ofctCgst"] = dsfpa.Tables[0].Rows[0]["Cgst"].ToString();
                        Session["ofctSgst"] = dsfpa.Tables[0].Rows[0]["Sgst"].ToString();
                        Session["ofctTotal_Purchase_Price"] = dsfpa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                        Session["ofctTotal_Price_Including_Tax"] = dsfpa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                        Session["ofctDeposit"] = dsfpa.Tables[0].Rows[0]["Deposit"].ToString();
                        Session["ofctBalance"] = dsfpa.Tables[0].Rows[0]["Balance"].ToString();
                        Session["ofctBalance_Due_Dates"] = dsfpa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                        Session["ofctRemarks"] = dsfpa.Tables[0].Rows[0]["Remarks"].ToString();
                        Session["otradeinvalue"] = dsfpa.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        Session["ototalvalue"] = dsfpa.Tables[0].Rows[0]["Total_value"].ToString();
                        Session["oFoldVolume"] = dsfpa.Tables[0].Rows[0]["FoldVolume"].ToString();
                        Session["oFoldadminfee"] = dsfpa.Tables[0].Rows[0]["Foldadminfee"].ToString();
                        Session["oFoldTotalTax"] = dsfpa.Tables[0].Rows[0]["FoldTotalTax"].ToString();
                        Session["oFoldDeposit"] = dsfpa.Tables[0].Rows[0]["FoldDeposit"].ToString();
                        Session["oFusdoldvolume"] = dsfpa.Tables[0].Rows[0]["Fusdoldvolume"].ToString();
                        Session["oFusdoldadminfee"] = dsfpa.Tables[0].Rows[0]["Fusdoldadminfee"].ToString();
                        Session["oFusdoldtax"] = dsfpa.Tables[0].Rows[0]["Fusdoldtax"].ToString();
                        Session["oFusdolddeposit"] = dsfpa.Tables[0].Rows[0]["Fusdolddeposit"].ToString();
                        Session["oUSDConvertedFVolume"] = dsfpa.Tables[0].Rows[0]["USDConvertedFVolume"].ToString();
                        Session["oUSDConvertedFAdminfee"] = dsfpa.Tables[0].Rows[0]["USDConvertedFAdminfee"].ToString();
                        Session["oUSDConvertedFTax"] = dsfpa.Tables[0].Rows[0]["USDConvertedFTax"].ToString();
                        Session["oUSDConvertedFdeposit"] = dsfpa.Tables[0].Rows[0]["USDConvertedFdeposit"].ToString();
                        Session["Ftotaltax"] = dsfpa.Tables[0].Rows[0]["total_tax"].ToString();

                Session["oUSDConvertedTotalVolume"] = dsfpa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                Session["oexchangerate"] = dsfpa.Tables[0].Rows[0]["exchangerate"].ToString();


            }
            Session["oExpirydate"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Expirydate"]);
            Session["oCommence_date"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Commence_date"]);
            string commencedate = "01-01-" + fwfirstyrTextBox.Text;
            string expirydate = "12-31-" + fwlastyrTextBox.Text;


            string resort = fwresortDropDownList.SelectedItem.Text;
                string residence_no = fwresidencenoDropDownList.SelectedItem.Text;
                string residence_type = fwresidencetypeDropDownList.SelectedItem.Text;
                string fractional_interest = fwfractIntDropDownList.SelectedItem.Text;
                string entitlement = fwentitlementDropDownList.SelectedItem.Text;
                string firstyear_Occupancy = fwfirstyrTextBox.Text;
                string tenure = fwtenureTextBox.Text;
                string lastyear_Occupancy = fwlastyrTextBox.Text;


                string adminfee = adminfeeTextBox.Text;
                string oAdministrationFees = AdministrationFeesTextBox.Text;
                string totpurchprice = totpurchpriceTextBox.Text;
                string cgst = cgstTextBox.Text;
                string sgst = sgstTextBox.Text;
                string totalpriceInTax = totalpriceInTaxTextBox.Text;
                string deposit = depositTextBox.Text;
                string balance = balanceTextBox.Text;
                string balancedue = balancedueTextBox.Text;
                string remarks = remarksTextBox.Text;

                string USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, USDConvertedTotalVolume;
                DataSet exrds = Queries.LoadExchange_Rate();
                string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
                if (currencyDropDownList.SelectedItem.Text == "INR")
                {
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (AdministrationFeesTextBox.Text == "" || AdministrationFeesTextBox.Text == null || AdministrationFeesTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(AdministrationFeesTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                        if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                        {
                            USDConvertedTax = "0";
                        }
                        else
                        {
                            double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                            USDConvertedTax = valueamt.ToString();

                        }


                        if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }
            }
                else
                {
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (AdministrationFeesTextBox.Text == "" || AdministrationFeesTextBox.Text == null || AdministrationFeesTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(AdministrationFeesTextBox.Text), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                        if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                        {
                            USDConvertedTax = "0";
                        }
                        else
                        {
                            double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text) , 0);
                            USDConvertedTax = valueamt.ToString();

                        }


                        if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }

                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }

            }

            int change = 0;
            if (String.Compare(Session["oExpirydate"].ToString(), expirydate) != 0)
            {
                string act = "(fractional) Expiry date changed from:" + Session["oExpirydate"].ToString() + "To:" + expirydate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Expiry Date Updated", Session["oExpirydate"].ToString(), expirydate);
                change = 1;
            }
            else { }
            if (String.Compare(Session["oCommence_date"].ToString(), commencedate) != 0)
            {
                string act = "(fractional) Commence date changed from:" + Session["oCommence_date"].ToString() + "To:" + commencedate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Commence Date Updated", Session["oCommence_date"].ToString(), commencedate);
                change = 1;
            }
            else { }
            if (change == 1)
            {
                int updatece = Queries.UpdateCommenceExpiryDate(expirydate, commencedate, sContractdetailsID);
            }
            else { }


            int fractionalexists = Queries.ContractDetailsIDInContract_Fractional_IndianExists(sContractdetailsID);
                    if (fractionalexists == 1)
                    {

                if (String.Compare(Session["otiRESORT"].ToString(), resort) != 0)
                {
                    string act = "(fractional) club name changed from:" + Session["otiRESORT"].ToString() + "To:" + resort;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Club Name Updated", Session["otiRESORT"].ToString(), resort);
                }
                else { }

                if (String.Compare(Session["otifresidence_no"].ToString(), residence_no) != 0)
                {
                    string act = "(fractional) residence_no value changed from:" + Session["otifresidence_no"].ToString() + "To:" + residence_no;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Residence No. Updated", Session["otifresidence_no"].ToString(), residence_no);
                }
                else { }
                if (String.Compare(Session["otifresidence_type"].ToString(), residence_type) != 0)
                {
                    string act = "(fractional) residence_type value changed from:" + Session["otifresidence_type"].ToString() + "To:" + residence_type;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Residence Type Updated", Session["otifresidence_type"].ToString(), residence_type);
                }
                else { }
                if (String.Compare(Session["otiffractional_interest"].ToString(), fractional_interest) != 0)
                {
                    string act = "(fractional) fractional_interest value changed from:" + Session["otiffractional_interest"].ToString() + "To:" + fractional_interest;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Fractional Interest Updated", Session["otiffractional_interest"].ToString(), fractional_interest);
                }
                else { }
                if (String.Compare(Session["otifentitlement"].ToString(), entitlement) != 0)
                {
                    string act = "(fractional) Entitlement value changed from:" + Session["otifentitlement"].ToString() + "To:" + entitlement;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Entitlement Updated", Session["otifentitlement"].ToString(), entitlement);
                }
                else { }
                if (String.Compare(Session["otiffirstyear_Occupancy"].ToString(), firstyear_Occupancy) != 0)
                {
                    string act = "(fractional) First Yr Occupancy value changed from:" + Session["otiffirstyear_Occupancy"].ToString() + "To:" + firstyear_Occupancy;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "First Year Occupancy Updated", Session["otiffirstyear_Occupancy"].ToString(), firstyear_Occupancy);
                }
                else { }
                if (String.Compare(Session["otiftenure"].ToString(), tenure) != 0)
                {
                    string act = "(fractional) Tenure changed from:" + Session["otiftenure"].ToString() + "To:" + tenure;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Tenure Updated", Session["otiftenure"].ToString(), tenure);
                }
                else { }
                if (String.Compare(Session["otiflastyear_Occupancy"].ToString(), lastyear_Occupancy) != 0)
                {
                    string act = "(fractional) Last Yr Occupancy value changed from:" + Session["otiflastyear_Occupancy"].ToString() + "To:" + lastyear_Occupancy;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Last Year Occupancy Updated", Session["otiflastyear_Occupancy"].ToString(), lastyear_Occupancy);
                }
                else { }
                int updatefractionalcontract = Queries.UpdateContract_Fractional_Indian(resort, residence_no, residence_type, fractional_interest, entitlement, 
                            firstyear_Occupancy, tenure, lastyear_Occupancy, "", mcfees,  sContractdetailsID);


                    }//if block fractionalexists
                    else
                    {
                        string propertyfee;
                       
                        DataSet dsmc = Queries.LoadMCChartfractional(resort, firstyear_Occupancy, currencyDropDownList.SelectedItem.Text, fractional_interest, residence_type);
                        if (dsmc.Tables[0].Rows.Count == 0)
                        {
                            propertyfee = "TBA";                          

                        }
                        else
                        {
                            propertyfee = dsmc.Tables[0].Rows[0]["Property_fee"].ToString();
                           
                        }

                        string ContractFractionalIndian_ID = Queries.GetContract_Fractional_Indian_ID(office);
                        int insertfractional = Queries.InsertContract_Fractional_Indian(ContractFractionalIndian_ID, Session["ProfileID"].ToString(),
                            contractno, resort, residence_no, residence_type, fractional_interest, entitlement, firstyear_Occupancy, tenure, lastyear_Occupancy, "Yes", propertyfee, sContractdetailsID);
                        int updatefract = Queries.UpdateContract_Fractional_Indian_ID(office);
                        string log2 = "Fractional Details:" + "ContractFractionalIndian_ID:" + ContractFractionalIndian_ID + "," + "profileid:" + Session["ProfileID"].ToString() + "," + 
                            "contractno:" + contractno + "," +
                            "Resort:" + resort+ "," + "Residence No:" + residence_no + "," + 
                            "Residence type:" + residence_type + "," + "Fractional Interest:" + fractional_interest + "," + 
                            "Entitlement:" + entitlement + "," + "1st Yr Occ:" + firstyear_Occupancy + "," + 
                            "Tenure:" + tenure + "," + "last Yr Occ:" + lastyear_Occupancy + "," + "Lease Back:" +"Yes" + "," + 
                            "Profperty fee:" + propertyfee + "," + "ContractDetailsID:" + sContractdetailsID;
                int insertlog2 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Fractional Details Added", "", log2);


            }

                    int fractionalpaexist = Queries.ContractDetailsIDInContract_Fractional_PA_IndianExists(sContractdetailsID);
                    if (fractionalpaexist == 1)
                    {

                if (String.Compare(Session["ofctAdmission_fees"].ToString(), adminfee) != 0)
                {
                    string act = "(fractional)Admission fees changed from:" + Session["ofctAdmission_fees"].ToString() + "To:" + adminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admission Fee Updated", Session["ofctAdmission_fees"].ToString(), adminfee);
                }
                else { }
                if (String.Compare(Session["ofctadministration_fees"].ToString(), oAdministrationFees) != 0)
                {
                    string act = "(fractional)Administration Fees changed from:" + Session["ofctadministration_fees"].ToString() + "To:" + oAdministrationFees;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Administration Fee Updated", Session["ofctadministration_fees"].ToString(), oAdministrationFees);
                }
                else { }
                if (String.Compare(Session["ofctCgst"].ToString(), cgst) != 0)
                {
                    string act = "(fractional)CGST amt changed from:" + Session["ofctCgst"].ToString() + "To:" + cgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", Session["ofctCgst"].ToString(), cgst);
                }
                else { }
                if (String.Compare(Session["ofctSgst"].ToString(), sgst) != 0)
                {
                    string act = "(fractional) SGST amt changed from:" + Session["ofctSgst"].ToString() + "To:" + sgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", Session["ofctSgst"].ToString(), sgst);
                }
                else { }
                if (String.Compare(Session["ofctTotal_Purchase_Price"].ToString(), totpurchprice) != 0)
                {
                    string act = "(fractional)Total purchase price changed from:" + Session["ofctTotal_Purchase_Price"].ToString() + "To:" + totpurchprice;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Purchase Price Updated", Session["ofctTotal_Purchase_Price"].ToString(), totpurchprice);
                }
                else { }
                if (String.Compare(Session["ofctTotal_Price_Including_Tax"].ToString(), totalpriceInTax) != 0)
                {
                    string act = "(fractional)Total price In. Tax changed from:" + Session["ofctTotal_Price_Including_Tax"].ToString() + "To:" + totalpriceInTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(Inc Tax) Updated", Session["ofctTotal_Price_Including_Tax"].ToString(), totalpriceInTax);
                }
                else { }
                if (String.Compare(Session["ofctDeposit"].ToString(), deposit) != 0)
                {
                    string act = "(fractional)Deposit changed from:" + Session["ofctDeposit"].ToString() + "To:" + deposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", Session["ofctDeposit"].ToString(), deposit);
                }
                else { }
                if (String.Compare(Session["ofctBalance"].ToString(), balance) != 0)
                {
                    string act = "(fractional)balance Rate changed from:" + Session["ofctBalance"].ToString() + "To:" + balance;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Balance Updated", Session["ofctBalance"].ToString(), balance);
                }
                else { }
                if (String.Compare(Session["ofctBalance_Due_Dates"].ToString(), balancedue) != 0)
                {
                    string act = "(fractional)balance due changed from:" + Session["ofctBalance_Due_Dates"].ToString() + "To:" + balancedue;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Balance Due Updated", Session["ofctBalance_Due_Dates"].ToString(), balancedue);
                }
                else { }
                if (String.Compare(Session["ofctRemarks"].ToString(), remarks) != 0)
                {
                    string act = "(fractional)remarks changed from:" + Session["ofctRemarks"].ToString() + "To:" + remarks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Remarks Updated", Session["ofctRemarks"].ToString(), remarks);
                }
                else { }

                if (String.Compare(Session["oUSDConvertedFVolume"].ToString(), USDConvertedVolume) != 0)
                {
                    string act = "(fractional)USD Volume changed from:" + Session["oUSDConvertedFVolume"].ToString() + "To:" + USDConvertedVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volumne (USD) Updated", Session["oUSDConvertedFVolume"].ToString(), USDConvertedVolume);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedFAdminfee"].ToString(), USDConvertedAdminfee) != 0)
                {
                    string act = "(fractional)USD Admin fee changed from:" + Session["oUSDConvertedFAdminfee"].ToString() + "To:" + USDConvertedAdminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee(USD) Updated", Session["oUSDConvertedFAdminfee"].ToString(), USDConvertedAdminfee);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedFTax"].ToString(), USDConvertedTax) != 0)
                {
                    string act = "(fractional)USD Tax changed from:" + Session["oUSDConvertedFTax"].ToString() + "To:" + USDConvertedTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax (USD) Updated", Session["oUSDConvertedFTax"].ToString(), USDConvertedTax);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedFdeposit"].ToString(), USDConverteddeposit) != 0)
                {
                    string act = "(fractional)USD Deposit changed from:" + Session["oUSDConvertedFdeposit"].ToString() + "To:" + USDConverteddeposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD) Updated", Session["oUSDConvertedFdeposit"].ToString(), USDConverteddeposit);
                }
                else { }
                if (String.Compare(Session["Ftotaltax"].ToString(), TotalTaxTextBox.Text) != 0)
                {
                    string act = "(fractional)Total Tax changed from:" + Session["Ftotaltax"].ToString() + "To:" + TotalTaxTextBox.Text;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax Updated", Session["Ftotaltax"].ToString(), TotalTaxTextBox.Text);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume) != 0)
                {
                    string act = "(fractional) Total Volume(Inc Tax)(USD) changed from:" + Session["oUSDConvertedTotalVolume"].ToString() + "To:" + USDConvertedTotalVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume Inc Tax(USD) Updated", Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume);
                }
                else { }
                if (String.Compare(Session["oexchangerate"].ToString(), dollarrate) != 0)
                {
                    string act = "(fractional)Exchange Rate changed from:" + Session["oexchangerate"].ToString() + "To:" + dollarrate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Rate Updated", Session["oexchangerate"].ToString(), dollarrate);
                }
                else { }

                int updatecontractPA = Queries.UpdateContract_FractionalPA_Indian(adminfee, oAdministrationFees, totalpriceInTax, cgst, sgst, totalpriceInTax, deposit, balance, balancedue, remarks,"","",   sContractdetailsID);
                        int updatecontractpaUSD = Queries.UpdateContract_Fractional_PA_IndianUSDConversion(USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, sContractdetailsID);
                int updatecontractpaexvolusd = Queries.UpdateContract_Fractional_PA_IndianVolumeUSDExchRate(USDConvertedTotalVolume, dollarrate, sContractdetailsID);

            }
                    else
                    {
                        string Contract_Fractional_PA_Id = Queries.GetContract_Fractional_PA_Indian_ID(office);// GetContract_Fractional_PA_Indian();

                        string balpa;
                        if (balancedueTextBox.Text == "" || balancedueTextBox.Text == null || balancedueTextBox.Text == "NaN")
                        {
                            balpa = "";
                        }
                        else
                        {
                            balpa = balancedueTextBox.Text;
                        }
                        int insertpointsPA = Queries.InsertContract_Fractional_PA_Indian(Contract_Fractional_PA_Id,

                            Session["ProfileID"].ToString(), contractno, adminfee, oAdministrationFees, cgst,
                            sgst, totalpriceInTax, totalpriceInTax, deposit,
                            balance, balpa, remarksTextBox.Text, "", "", sContractdetailsID, "", "", "", "", "", "", "", "",
                            USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, USDConvertedTotalVolume, dollarrate);
                        string log4 = "Fractional PA Details:" + "Fractional_PA_Id:" + Contract_Fractional_PA_Id + "," + "Profile:" + Session["ProfileID"].ToString() + "," +
                            "Contract no:" + contractno + "," + "Trade in value:" + "" + "," + "Total Value:" + "" + "," +
                            "AdmissionFees:" + adminfee + "," + " AdministrationFees:" + oAdministrationFees + "," +
                            "Total tax:" + TotalTaxTextBox.Text + "," + "CGST:" + cgst + "," + "SGST:" + sgst + "," +
                            "total Purchase price:" + totpurchprice + "," + "Total Price Incl. Tax:" + totalpriceInTax +
                            "Deposit Amt:" + deposit + "," + "balance:" + balance + "," + "Balance due dates:" + balpa + "," +
                            "Remarks:" + remarksTextBox.Text + "," + "contractdetailsID:" + sContractdetailsID + "," + "Converted Vol:" + USDConvertedVolume + "," +
                            "Converted Admin fee:" + USDConvertedAdminfee + "," + "Converted Tax:" + USDConvertedTax + "," + "Converted Deposit:" + USDConverteddeposit + "," + "Total Volume(USD):" + USDConvertedTotalVolume + "," + "Exchange rate:" + dollarrate;

                int insertlog4 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log4, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Purchase Agreement Details Added", "", log4);
                int updatefractpa = Queries.UpdateContract_Fractional_PA_Indian_ID(office);

                    }
                if (Queries.CheckContract_Installments_Indian_ContractNoExists(sContractdetailsID) == 1)
                {
                    if (NoinstallmentTextBox.Text == "0" || NoinstallmentTextBox.Text == "" || NoinstallmentTextBox.Text == "NaN" || NoinstallmentTextBox.Text == "Infinity")
                    {
                        int updatefin1 = Queries.UpdatefinanceStartdateIFZeroInstallment(contractno);
                    }
                    else
                    {

                        if (String.Compare(Session["ofinmonth"].ToString(), finmonth) != 0)
                        {
                            int updatefinmonth = Queries.UpdateFinanceMonth_Indian(finmonth, sContractdetailsID);
                        }
                        else
                        {
                            int updatefin = Queries.UpdatefinanceStartdate(contractno);
                        }

                    }
                }
              

            }

            else if (contract == "Trade-In-Fractionals")
            {
                DataSet dstif = Queries.loadtradeinfractional(sContractdetailsID);
                    if (dstif.Tables[0].Rows.Count == 0)
                    {
                        Session["otiresort"] = ""; Session["otifresidence_no"] = ""; Session["otifresidence_type"] = ""; Session["otiffractional_interest"] = ""; Session["otifentitlement"] = "";
                        Session["otiffirstyear_Occupancy"] = ""; Session["otiftenure"] = ""; Session["otiflastyear_Occupancy"] = ""; Session["otifleaseback"] = ""; Session["otifMc_Charges"] = "";

                        Session["otifOldcontracttype"] = ""; Session["otifRESORT"] = ""; Session["otifAPT_TYPE"] = ""; Session["otifSEASON"] = ""; Session["otifNO_WEEKS"] = ""; Session["otifNO_POINTS"] = ""; Session["otifPOINTS_VALUE"] = ""; Session["otifoldContract_No"] = "";
                      Session["oldtifmemtype"] = "";
                   }
                    else
                    {


                        Session["otiresort"] = dstif.Tables[0].Rows[0]["resort"].ToString();
                        Session["otifresidence_no"] = dstif.Tables[0].Rows[0]["residence_no"].ToString();
                        Session["otifresidence_type"] = dstif.Tables[0].Rows[0]["residence_type"].ToString();
                        Session["otiffractional_interest"] = dstif.Tables[0].Rows[0]["fractional_interest"].ToString();
                        Session["otifentitlement"] = dstif.Tables[0].Rows[0]["entitlement"].ToString();
                        Session["otiffirstyear_Occupancy"] = dstif.Tables[0].Rows[0]["firstyear_Occupancy"].ToString();
                        Session["otiftenure"] = dstif.Tables[0].Rows[0]["tenure"].ToString();
                        Session["otiflastyear_Occupancy"] = dstif.Tables[0].Rows[0]["lastyear_Occupancy"].ToString();
                        Session["otifleaseback"] = dstif.Tables[0].Rows[0]["leaseback"].ToString();
                        Session["otifMc_Charges"] = dstif.Tables[0].Rows[0]["Mc_Charges"].ToString();

                        Session["otifOldcontracttype"] = dstif.Tables[0].Rows[0]["Oldcontracttype"].ToString();
                        Session["otifRESORT"] = dstif.Tables[0].Rows[0]["tradeinresort"].ToString();
                        Session["otifAPT_TYPE"] = dstif.Tables[0].Rows[0]["APT_TYPE"].ToString();
                        Session["otifSEASON"] = dstif.Tables[0].Rows[0]["SEASON"].ToString();
                        Session["otifNO_WEEKS"] = dstif.Tables[0].Rows[0]["NO_WEEKS"].ToString();
                        Session["otifNO_POINTS"] = dstif.Tables[0].Rows[0]["NO_POINTS"].ToString();
                        Session["otifPOINTS_VALUE"] = dstif.Tables[0].Rows[0]["POINTS_VALUE"].ToString();
                        Session["otifoldContract_No"] = dstif.Tables[0].Rows[0]["oldContract_No"].ToString();
                        Session["oldtifmemtype"] = dstif.Tables[0].Rows[0]["OldMemtype"].ToString();
            }



                DataSet dsfpa = Queries.LoadfractionalPA(ContractdetailsIDTextBox.Text);
                    if (dsfpa.Tables[0].Rows.Count == 0)
                    {
                        Session["ofctAdmission_fees"] = ""; Session["ofctadministration_fees"] = ""; Session["ofctCgst"] = ""; Session["ofctSgst"] = ""; Session["ofctTotal_Purchase_Price"] = ""; Session["ofctTotal_Price_Including_Tax"] = "";
                        Session["ofctDeposit"] = ""; Session["ofctBalance"] = ""; Session["ofctBalance_Due_Dates"] = ""; Session["ofctRemarks"] = ""; Session["otradeinvalue"] = ""; Session["ototalvalue"] = "";
                        Session["oFoldVolume"] = ""; Session["oFoldadminfee"] = ""; Session["oFoldTotalTax"] = ""; Session["oFoldDeposit"] = ""; Session["oFusdoldvolume"] = ""; Session["oFusdoldadminfee"] = ""; Session["oFusdoldtax"] = ""; Session["oFusdolddeposit"] = "";
                        Session["oUSDConvertedFVolume"] = ""; Session["oUSDConvertedFAdminfee"] = ""; Session["oUSDConvertedFTax"] = ""; Session["oUSDConvertedFdeposit"] = "";
                Session["Ftotaltax"] = "";
                Session["oUSDConvertedTotalVolume"] = ""; Session["oexchangerate"] = "";

                
            }
                    else
                    {
                        Session["ofctAdmission_fees"] = dsfpa.Tables[0].Rows[0]["Admission_fees"].ToString();
                        Session["ofctadministration_fees"] = dsfpa.Tables[0].Rows[0]["administration_fees"].ToString();
                        Session["ofctCgst"] = dsfpa.Tables[0].Rows[0]["Cgst"].ToString();
                        Session["ofctSgst"] = dsfpa.Tables[0].Rows[0]["Sgst"].ToString();
                        Session["ofctTotal_Purchase_Price"] = dsfpa.Tables[0].Rows[0]["Total_Purchase_Price"].ToString();
                        Session["ofctTotal_Price_Including_Tax"] = dsfpa.Tables[0].Rows[0]["Total_Price_Including_Tax"].ToString();
                        Session["ofctDeposit"] = dsfpa.Tables[0].Rows[0]["Deposit"].ToString();
                        Session["ofctBalance"] = dsfpa.Tables[0].Rows[0]["Balance"].ToString();
                        Session["ofctBalance_Due_Dates"] = dsfpa.Tables[0].Rows[0]["Balance_Due_Dates"].ToString();
                        Session["ofctRemarks"] = dsfpa.Tables[0].Rows[0]["Remarks"].ToString();
                        Session["otradeinvalue"] = dsfpa.Tables[0].Rows[0]["TradeIn_value"].ToString();
                        Session["ototalvalue"] = dsfpa.Tables[0].Rows[0]["Total_value"].ToString();
                        Session["oFoldVolume"] = dsfpa.Tables[0].Rows[0]["FoldVolume"].ToString();
                        Session["oFoldadminfee"] = dsfpa.Tables[0].Rows[0]["Foldadminfee"].ToString();
                        Session["oFoldTotalTax"] = dsfpa.Tables[0].Rows[0]["FoldTotalTax"].ToString();
                        Session["oFoldDeposit"] = dsfpa.Tables[0].Rows[0]["FoldDeposit"].ToString();
                        Session["oFusdoldvolume"] = dsfpa.Tables[0].Rows[0]["Fusdoldvolume"].ToString();
                        Session["oFusdoldadminfee"] = dsfpa.Tables[0].Rows[0]["Fusdoldadminfee"].ToString();
                        Session["oFusdoldtax"] = dsfpa.Tables[0].Rows[0]["Fusdoldtax"].ToString();
                        Session["oFusdolddeposit"] = dsfpa.Tables[0].Rows[0]["Fusdolddeposit"].ToString();
                        Session["oUSDConvertedFVolume"] = dsfpa.Tables[0].Rows[0]["USDConvertedFVolume"].ToString();
                        Session["oUSDConvertedFAdminfee"] = dsfpa.Tables[0].Rows[0]["USDConvertedFAdminfee"].ToString();
                        Session["oUSDConvertedFTax"] = dsfpa.Tables[0].Rows[0]["USDConvertedFTax"].ToString();
                        Session["oUSDConvertedFdeposit"] = dsfpa.Tables[0].Rows[0]["USDConvertedFdeposit"].ToString();
                         Session["Ftotaltax"] = dsfpa.Tables[0].Rows[0]["total_tax"].ToString();
                         Session["oUSDConvertedTotalVolume"] = dsfpa.Tables[0].Rows[0]["USDConvertedTotalVolume"].ToString();
                         Session["oexchangerate"] = dsfpa.Tables[0].Rows[0]["exchangerate"].ToString();
            }
            Session["oExpirydate"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Expirydate"]);
            Session["oCommence_date"] = String.Format("{0:MM-dd-yyyy}", dsct.Tables[0].Rows[0]["Commence_date"]);
            string commencedate = "01-01-" + fwfirstyrTextBox.Text;
            string expirydate = "12-31-" + fwlastyrTextBox.Text;


            string tpresort = tnmresortTextBox.Text.ToUpper().Replace("'", "''");
            string apt = tnmapttypeTextBox.Text.ToUpper();

                string season = Request.Form[tnmseasonDropDownList.UniqueID];
                if (season == null || season == "")
                {
                    season = "";
                }
                else
                {
                    season = Request.Form[tnmseasonDropDownList.UniqueID];
                }
                string nowks = nmnowksTextBox.Text.ToUpper();
                string tpcontno = nmcontrcinoTextBox.Text.ToUpper();
                string tpnopts = tipnopointsTextBox.Text;
                string tpptsval = tipptsvalueTextBox.Text;
                string resort = fwresortDropDownList.SelectedItem.Text;
                string residence_no = fwresidencenoDropDownList.SelectedItem.Text;
                string residence_type = fwresidencetypeDropDownList.SelectedItem.Text;
                string fractional_interest = fwfractIntDropDownList.SelectedItem.Text;
                string entitlement = fwentitlementDropDownList.SelectedItem.Text;
                string firstyear_Occupancy = fwfirstyrTextBox.Text;
                string tenure = fwtenureTextBox.Text;
                string lastyear_Occupancy = fwlastyrTextBox.Text;
                string ocontracttype = oldcontracttypeDropDownList.SelectedItem.Text;
            //string oldtipmemtype = twoldmtypeTextBox.Text;
            string oldtipmemtype;

            if (twoldmtypeTextBox.Text == "" || twoldmtypeTextBox.Text == null)
            {
                oldtipmemtype = "N/A";
            }
            else
            {
                oldtipmemtype = twoldmtypeTextBox.Text;
            }

            string adminfee = adminfeeTextBox.Text;
                string oAdministrationFees = AdministrationFeesTextBox.Text;
                string totpurchprice = totpurchpriceTextBox.Text;
                string cgst = cgstTextBox.Text;
                string sgst = sgstTextBox.Text;
                string totalpriceInTax = totalpriceInTaxTextBox.Text;
                string deposit = depositTextBox.Text;
                string balance = balanceTextBox.Text;
                string balancedue = balancedueTextBox.Text;
                string remarks = remarksTextBox.Text;

                string USDConvertedVolume, USDConvertedTax, USDConvertedAdminfee, USDConverteddeposit, USDConvertedTotalVolume;
                DataSet exrds = Queries.LoadExchange_Rate();
                string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
                if (currencyDropDownList.SelectedItem.Text == "INR")
                {
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (AdministrationFeesTextBox.Text == "" || AdministrationFeesTextBox.Text == null || AdministrationFeesTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(AdministrationFeesTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                        if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                        {
                            USDConvertedTax = "0";
                        }
                        else
                        {
                            double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                            USDConvertedTax = valueamt.ToString();

                        }
                        if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }

            }
            else
                {
                    if (adminfeeTextBox.Text == "" || adminfeeTextBox.Text == null || adminfeeTextBox.Text == "NaN")
                    {
                        USDConvertedVolume = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(adminfeeTextBox.Text), 0);
                        USDConvertedVolume = valueamt.ToString();
                    }
                    if (AdministrationFeesTextBox.Text == "" || AdministrationFeesTextBox.Text == null || AdministrationFeesTextBox.Text == "NaN")
                    {
                        USDConvertedAdminfee = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(AdministrationFeesTextBox.Text), 0);
                        USDConvertedAdminfee = valueamt.ToString();
                    }
                        if (TotalTaxTextBox.Text == "" || TotalTaxTextBox.Text == null || TotalTaxTextBox.Text == "NaN")
                        {
                            USDConvertedTax = "0";
                        }
                        else
                        {
                            double valueamt = Math.Round(Convert.ToDouble(TotalTaxTextBox.Text), 0);
                            USDConvertedTax = valueamt.ToString();

                        }
                        if (depositTextBox.Text == "" || depositTextBox.Text == null || depositTextBox.Text == "NaN")
                    {
                        USDConverteddeposit = "0";
                    }
                    else
                    {
                        double valueamt = Math.Round(Convert.ToDouble(depositTextBox.Text), 0);
                        USDConverteddeposit = valueamt.ToString();
                    }
                if (totalpriceInTaxTextBox.Text == "" || totalpriceInTaxTextBox.Text == null || totalpriceInTaxTextBox.Text == "NaN")
                {
                    USDConvertedTotalVolume = "0";
                }
                else
                {
                    double valueamt = Math.Round(Convert.ToDouble(totalpriceInTaxTextBox.Text), 0);
                    USDConvertedTotalVolume = valueamt.ToString();
                }
            }

            int change = 0;
            if (String.Compare(Session["oExpirydate"].ToString(), expirydate) != 0)
            {
                string act = "(trade in fractional) Expiry date changed from:" + Session["oExpirydate"].ToString() + "To:" + expirydate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Expiry Date Updated", Session["oExpirydate"].ToString(), expirydate);
                change = 1;
            }
            else { }
            if (String.Compare(Session["oCommence_date"].ToString(), commencedate) != 0)
            {
                string act = "(trade in fractional) Commence date changed from:" + Session["oCommence_date"].ToString() + "To:" + commencedate;
                int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Commence Date Updated", Session["oCommence_date"].ToString(), commencedate);
                change = 1;
            }
            else { }
            if (change == 1)
            {
                int updatece = Queries.UpdateCommenceExpiryDate(expirydate, commencedate, sContractdetailsID);
            }
            else { }


            int fractionalexists = Queries.ContractDetailsIDInContract_Fractional_IndianExists(sContractdetailsID);
                    if (fractionalexists == 1)
                    {

                if (String.Compare(Session["otiRESORT"].ToString(), resort) != 0)
                {
                    string act = "(trade in fractional) points value changed from:" + Session["otiRESORT"].ToString() + "To:" + resort;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Club Name Updated", Session["otiRESORT"].ToString(), resort);
                }
                else { }

                if (String.Compare(Session["otifresidence_no"].ToString(), residence_no) != 0)
                {
                    string act = "(trade in fractional) residence_no value changed from:" + Session["otifresidence_no"].ToString() + "To:" + residence_no;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Residence No. Updated", Session["otifresidence_no"].ToString(), residence_no);
                }
                else { }
                if (String.Compare(Session["otifresidence_type"].ToString(), residence_type) != 0)
                {
                    string act = "(trade in fractional) residence_type value changed from:" + Session["otifresidence_type"].ToString() + "To:" + residence_type;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Residence Type Updated", Session["otifresidence_type"].ToString(), residence_type);
                }
                else { }
                if (String.Compare(Session["otiffractional_interest"].ToString(), fractional_interest) != 0)
                {
                    string act = "(trade in fractional) fractional_interest value changed from:" + Session["otiffractional_interest"].ToString() + "To:" + fractional_interest;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Fractional Interest Updated", Session["otiffractional_interest"].ToString(), fractional_interest);
                }
                else { }
                if (String.Compare(Session["otifentitlement"].ToString(), entitlement) != 0)
                {
                    string act = "(trade in fractional) Entitlement value changed from:" + Session["otifentitlement"].ToString() + "To:" + entitlement;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Entitlement Updated", Session["otifentitlement"].ToString(), entitlement);
                }
                else { }
                if (String.Compare(Session["otiffirstyear_Occupancy"].ToString(), firstyear_Occupancy) != 0)
                {
                    string act = "(trade in fractional) First Yr Occupancy value changed from:" + Session["otiffirstyear_Occupancy"].ToString() + "To:" + firstyear_Occupancy;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "First Year Occupancy Updated", Session["otiffirstyear_Occupancy"].ToString(), firstyear_Occupancy);
                }
                else { }
                if (String.Compare(Session["otiftenure"].ToString(), tenure) != 0)
                {
                    string act = "(trade in fractional) Tenure changed from:" + Session["otiftenure"].ToString() + "To:" + tenure;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Tenure Updated", Session["otiftenure"].ToString(), tenure);
                }
                else { }
                if (String.Compare(Session["otiflastyear_Occupancy"].ToString(), lastyear_Occupancy) != 0)
                {
                    string act = "(trade in fractional) Last Yr Occupancy value changed from:" + Session["otiflastyear_Occupancy"].ToString() + "To:" + lastyear_Occupancy;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Last Year Occupancy Updated", Session["otiflastyear_Occupancy"].ToString(), lastyear_Occupancy);
                }
                else { }
                int updatefractionalcontract = Queries.UpdateContract_Fractional_Indian(resort, residence_no, residence_type, fractional_interest, entitlement,
                            firstyear_Occupancy, tenure, lastyear_Occupancy, "", mcfees,  sContractdetailsID);


                    }//if block fractionalexists
                    else
                    {
                        string propertyfee;

                        DataSet dsmc = Queries.LoadMCChartfractional(resort, firstyear_Occupancy, currencyDropDownList.SelectedItem.Text, fractional_interest, residence_type);
                        if (dsmc.Tables[0].Rows.Count == 0)
                        {
                            propertyfee = "TBA";

                        }
                        else
                        {
                            propertyfee = dsmc.Tables[0].Rows[0]["Property_fee"].ToString();

                        }

                        string ContractFractionalIndian_ID = Queries.GetContract_Fractional_Indian_ID(office);
                        int insertfractional = Queries.InsertContract_Fractional_Indian(ContractFractionalIndian_ID, Session["ProfileID"].ToString(),
                            contractno, resort, residence_no, residence_type, fractional_interest, entitlement, firstyear_Occupancy, tenure, lastyear_Occupancy, "Yes", propertyfee, sContractdetailsID);
                        int updatefract = Queries.UpdateContract_Fractional_Indian_ID(office);
                        string log2 = "Fractional Details:" + "ContractFractionalIndian_ID:" + ContractFractionalIndian_ID + "," + "profileid:" + Session["ProfileID"].ToString() + "," +
                            "contractno:" + contractno + "," +
                            "Resort:" + resort + "," + "Residence No:" + residence_no + "," +
                            "Residence type:" + residence_type + "," + "Fractional Interest:" + fractional_interest + "," +
                            "Entitlement:" + entitlement + "," + "1st Yr Occ:" + firstyear_Occupancy + "," +
                            "Tenure:" + tenure + "," + "last Yr Occ:" + lastyear_Occupancy + "," + "Lease Back:" + "Yes" + "," +
                            "Profperty fee:" + propertyfee + "," + "ContractDetailsID:" + sContractdetailsID;
                int insertlog2 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log2, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "New Fractional Details Added", "", log2);


            }


                    int tradeinfractionalexist = Queries.ContractDetailsIDIContract_Trade_In_Fractional_IndianExists(sContractdetailsID);
                    if (tradeinfractionalexist == 1)
                    {

                if (String.Compare(Session["otifOldcontracttype"].ToString(), ocontracttype) != 0)
                {
                    string act = "(trade in fractional) Old Contract Type changed from:" + Session["otifOldcontracttype"].ToString() + "To:" + ocontracttype;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Contract Type Updated", Session["otifOldcontracttype"].ToString(), ocontracttype);
                }
                else { }

                if (String.Compare(Session["otifRESORT"].ToString(), tpresort) != 0)
                {
                    string act = "(trade in fractional) Resort(trade in) changed from:" + Session["otifRESORT"].ToString() + "To:" + tpresort;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Resort Updated", Session["otifRESORT"].ToString(), tpresort);
                }
                else { }

                if (String.Compare(Session["otifAPT_TYPE"].ToString(), apt) != 0)
                {
                    string act = "(trade in fractional) Apt Type(trade in) changed from:" + Session["otifAPT_TYPE"].ToString() + "To:" + apt;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Apartment Type Updated", Session["otifAPT_TYPE"].ToString(), apt);
                }
                else { }

                if (String.Compare(Session["otifSEASON"].ToString(), season) != 0)
                {
                    string act = "(trade in fractional) Season(trade in) changed from:" + Session["otifSEASON"].ToString() + "To:" + season;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Season Updated", Session["otifSEASON"].ToString(), season);
                }
                else { }


                if (String.Compare(Session["otifNO_WEEKS"].ToString(), nowks) != 0)
                {
                    string act = "(trade in fractional) No. Wks(trade in) changed from:" + Session["otifNO_WEEKS"].ToString() + "To:" + nowks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "No. of Weeks Updated", Session["otifNO_WEEKS"].ToString(), nowks);
                }
                else { }
                if (String.Compare(Session["otifoldContract_No"].ToString(), tpcontno) != 0)
                {
                    string act = "(trade in fractional) cont.no (trade in) changed from:" + Session["otifoldContract_No"].ToString() + "To:" + tpcontno;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Contract No Updated", Session["otifoldContract_No"].ToString(), tpcontno);
                }
                else { }
                if (String.Compare(Session["otifNO_POINTS"].ToString(), tpptsval) != 0)
                {
                    string act = "(trade in fractional)no.of points value changed from:" + Session["otifNO_POINTS"].ToString() + "To:" + tpnopts;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Points Value Updated", Session["otifNO_POINTS"].ToString(), tpptsval);
                }
                else { }

                if (String.Compare(Session["otifPOINTS_VALUE"].ToString(), tpptsval) != 0)
                {
                    string act = "(trade in fractional) points value changed from:" + Session["otifPOINTS_VALUE"].ToString() + "To:" + tpptsval;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Points Value Updated", Session["otifPOINTS_VALUE"].ToString(), tpptsval);
                }
                else { }
                if (String.Compare(Session["oldtifmemtype"].ToString(), oldtipmemtype) != 0)
                {
                    string act = "(trade in fractional) points value changed from:" + Session["oldtifmemtype"].ToString() + "To:" + oldtipmemtype;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Old Entitlement Type Updated", Session["oldtifmemtype"].ToString(), oldtipmemtype);
                }
                else { }
              
                int updatepointscontract = Queries.UpdateContract_Trade_In_Fractional_Indian(ocontracttype, tpresort, apt, season, nowks, tpnopts, tpptsval, tpcontno,
                             sContractdetailsID, oldtipmemtype);
              
            }
                    else
                    {

                        string ContractTradeInFractionalIndian_ID = Queries.GetContract_Trade_In_Fractional_Indian_ID(office);
                        int inserttradeinfractweeks = Queries.InsertContract_Trade_In_Fractional_Indian(ContractTradeInFractionalIndian_ID, Session["ProfileID"].ToString(), contractno,
                      ocontracttype, tpresort, apt, season, nowks, tpnopts, tpptsval, tpcontno, sContractdetailsID,"");


                       

                        int updatefacttiw = Queries.UpdateContract_Trade_In_Fractional_Indian_ID(office);
                        string log6 = "trade in Fractional details:" + "TradeInFractionalIndian_ID:" + ContractTradeInFractionalIndian_ID + "," + 
                            "Profile ID:" + Session["ProfileID"].ToString() + "," + "Contract No:" + contractno + "," + "Old Contract No:" + ocontracttype + "," +
                            "Club:" + tpresort + "," + "Apt:" + apt + "," + 
                            "Season:" + season + "," + "No.Weeks:" + nowks + "," + "No.of Pts:" + tpnopts+","+
                            "Points Value:" + tpptsval+ "," + "Cont.No:" + tpcontno + "," + "contractdetailsID:" + sContractdetailsID;
                int insertlog6 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log6, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade in Details Added", "", log6);


            }
                    int fractionalpaexist = Queries.ContractDetailsIDInContract_Fractional_PA_IndianExists(sContractdetailsID);
                    if (fractionalpaexist == 1)
                    {

                if (String.Compare(Session["ofctAdmission_fees"].ToString(), adminfee) != 0)
                {
                    string act = "(trade in fractional)Admission fees changed from:" + Session["ofctAdmission_fees"].ToString() + "To:" + adminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admission Fee Updated", Session["ofctAdmission_fees"].ToString(), adminfee);
                }
                else { }
                if (String.Compare(Session["ofctadministration_fees"].ToString(), oAdministrationFees) != 0)
                {
                    string act = "(trade in fractional)Administration Fees changed from:" + Session["ofctadministration_fees"].ToString() + "To:" + oAdministrationFees;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Administration Fee Updated", Session["ofctadministration_fees"].ToString(), oAdministrationFees);
                }
                else { }
                if (String.Compare(Session["ofctCgst"].ToString(), cgst) != 0)
                {
                    string act = "(trade in fractional)CGST amt changed from:" + Session["ofctCgst"].ToString() + "To:" + cgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", Session["ofctCgst"].ToString(), cgst);
                }
                else { }
                if (String.Compare(Session["ofctSgst"].ToString(), sgst) != 0)
                {
                    string act = "(trade in fractional) SGST amt changed from:" + Session["ofctSgst"].ToString() + "To:" + sgst;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", Session["ofctSgst"].ToString(), sgst);
                }
                else { }
                if (String.Compare(Session["ofctTotal_Purchase_Price"].ToString(), totpurchprice) != 0)
                {
                    string act = "(trade in fractional)Total purchase price changed from:" + Session["ofctTotal_Purchase_Price"].ToString() + "To:" + totpurchprice;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Purchase Price Updated", Session["ofctTotal_Purchase_Price"].ToString(), totpurchprice);
                }
                else { }
                if (String.Compare(Session["ofctTotal_Price_Including_Tax"].ToString(), totalpriceInTax) != 0)
                {
                    string act = "(trade in fractional)Total price In. Tax changed from:" + Session["ofctTotal_Price_Including_Tax"].ToString() + "To:" + totalpriceInTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume(Inc Tax) Updated", Session["ofctTotal_Price_Including_Tax"].ToString(), totalpriceInTax);
                }
                else { }
                if (String.Compare(Session["ofctDeposit"].ToString(), deposit) != 0)
                {
                    string act = "(trade in fractional)Deposit changed from:" + Session["ofctDeposit"].ToString() + "To:" + deposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", Session["ofctDeposit"].ToString(), deposit);
                }
                else { }
                if (String.Compare(Session["ofctBalance"].ToString(), balance) != 0)
                {
                    string act = "(trade in fractional)balance Rate changed from:" + Session["ofctBalance"].ToString() + "To:" + balance;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Balance Updated", Session["ofctBalance"].ToString(), balance);
                }
                else { }
                if (String.Compare(Session["ofctBalance_Due_Dates"].ToString(), balancedue) != 0)
                {
                    string act = "(trade in fractional)balance due changed from:" + Session["ofctBalance_Due_Dates"].ToString() + "To:" + balancedue;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Balance Due Updated", Session["ofctBalance_Due_Dates"].ToString(), balancedue);
                }
                else { }
                if (String.Compare(Session["ofctRemarks"].ToString(), remarks) != 0)
                {
                    string act = "(trade in fractional)remarks changed from:" + Session["ofctRemarks"].ToString() + "To:" + remarks;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Remarks Updated", Session["ofctRemarks"].ToString(), remarks);
                }
                else { }

                if (String.Compare(Session["oUSDConvertedFVolume"].ToString(), USDConvertedVolume) != 0)
                {
                    string act = "(trade in fractional)USD Volume changed from:" + Session["oUSDConvertedFVolume"].ToString() + "To:" + USDConvertedVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volumne (USD) Updated", Session["oUSDConvertedFVolume"].ToString(), USDConvertedVolume);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedFAdminfee"].ToString(), USDConvertedAdminfee) != 0)
                {
                    string act = "(trade in fractional)USD Admin fee changed from:" + Session["oUSDConvertedFAdminfee"].ToString() + "To:" + USDConvertedAdminfee;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Admin Fee(USD) Updated", Session["oUSDConvertedFAdminfee"].ToString(), USDConvertedAdminfee);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedFTax"].ToString(), USDConvertedTax) != 0)
                {
                    string act = "(trade in fractional)USD Tax changed from:" + Session["oUSDConvertedFTax"].ToString() + "To:" + USDConvertedTax;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax (USD) Updated", Session["oUSDConvertedFTax"].ToString(), USDConvertedTax);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedFdeposit"].ToString(), USDConverteddeposit) != 0)
                {
                    string act = "(trade in fractional)USD Deposit changed from:" + Session["oUSDConvertedFdeposit"].ToString() + "To:" + USDConverteddeposit;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD) Updated", Session["oUSDConvertedFdeposit"].ToString(), USDConverteddeposit);
                }
                else { }
                if (String.Compare(Session["otradeinvalue"].ToString(), ftradeinvalueTextBox.Text) != 0)
                {
                    string act = "(trade in fractional)trade in changed from:" + Session["otradeinvalue"].ToString() + "To:" + ftradeinvalueTextBox.Text;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Trade In Value Amount Updated", Session["otradeinvalue"].ToString(), ftradeinvalueTextBox.Text);
                }
                else { }
                if (String.Compare(Session["ototalvalue"].ToString(), ftotalvalueTextBox.Text) != 0)
                {
                    string act = "(trade in fractional)Total Value changed from:" + Session["ototalvalue"].ToString() + "To:" + ftotalvalueTextBox.Text;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Value Amount Updated", Session["ototalvalue"].ToString(), ftotalvalueTextBox.Text);
                }
                else { }
                if (String.Compare(Session["Ftotaltax"].ToString(), TotalTaxTextBox.Text) != 0)
                {
                    string act = "(trade in fractional)Total Tax changed from:" + Session["Ftotaltax"].ToString() + "To:" + TotalTaxTextBox.Text;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Tax Updated", Session["Ftotaltax"].ToString(), TotalTaxTextBox.Text);
                }
                else { }
                if (String.Compare(Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume) != 0)
                {
                    string act = "(trade in fractional) Total Volume(Inc Tax)(USD) changed from:" + Session["oUSDConvertedTotalVolume"].ToString() + "To:" + USDConvertedTotalVolume;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Volume Inc Tax(USD) Updated", Session["oUSDConvertedTotalVolume"].ToString(), USDConvertedTotalVolume);
                }
                else { }
                if (String.Compare(Session["oexchangerate"].ToString(), dollarrate) != 0)
                {
                    string act = "(trade in fractional)Exchange Rate changed from:" + Session["oexchangerate"].ToString() + "To:" + dollarrate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Rate Updated", Session["oexchangerate"].ToString(), dollarrate);
                }
                else { }

                int updatecontractPA = Queries.UpdateContract_FractionalPA_Indian(adminfee, oAdministrationFees, totalpriceInTax, cgst, sgst, totalpriceInTax, deposit, balance, balancedue, remarks,  ftradeinvalueTextBox.Text, ftotalvalueTextBox.Text, sContractdetailsID);
                        int updatecontractpaUSD = Queries.UpdateContract_Fractional_PA_IndianUSDConversion(USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, sContractdetailsID);
                int updatecontractpaexvolusd = Queries.UpdateContract_PA_IndianVolumeUSDExchRate(USDConvertedTotalVolume, dollarrate, sContractdetailsID);

            }
                    else
                    {
                        string Contract_Fractional_PA_Id = Queries.GetContract_Fractional_PA_Indian_ID(office);

                        string balpa;
                        if (balancedueTextBox.Text == "" || balancedueTextBox.Text == null || balancedueTextBox.Text == "NaN")
                        {
                            balpa = "";
                        }
                        else
                        {
                            balpa = balancedueTextBox.Text;
                        }
                        int insertpointsPA = Queries.InsertContract_Fractional_PA_Indian(Contract_Fractional_PA_Id,

                            Session["ProfileID"].ToString(), contractno, adminfee, oAdministrationFees, cgst,
                            sgst, totalpriceInTax, totalpriceInTax, deposit,
                            balance, balpa, remarksTextBox.Text, ftradeinvalueTextBox.Text ,ftotalvalueTextBox.Text, sContractdetailsID, "", "", "", "", "", "", "", "",
                            USDConvertedVolume, USDConvertedAdminfee, USDConvertedTax, USDConverteddeposit, TotalTaxTextBox.Text, USDConvertedTotalVolume, dollarrate);
                        string log4 = "Trade in Fractional PA Details:" + "Fractional_PA_Id:" + Contract_Fractional_PA_Id + "," + "Profile:" + Session["ProfileID"].ToString() + "," +
                            "Contract no:" + contractno + "," + "Trade in value:" + ftradeinvalueTextBox.Text + "," + "Total Value:" + ftotalvalueTextBox.Text + "," +
                            "AdmissionFees:" + adminfee + "," + " AdministrationFees:" + oAdministrationFees + "," +
                            "Total tax:" + TotalTaxTextBox.Text + "," + "CGST:" + cgst + "," + "SGST:" + sgst + "," +
                            "total Purchase price:" + totpurchprice + "," + "Total Price Incl. Tax:" + totalpriceInTax +
                            "Deposit Amt:" + deposit + "," + "balance:" + balance + "," + "Balance due dates:" + balpa + "," +
                            "Remarks:" + remarksTextBox.Text + "," + "contractdetailsID:" + sContractdetailsID + "," + "Converted Vol:" + USDConvertedVolume + "," +
                            "Converted Admin fee:" + USDConvertedAdminfee + "," + "Converted Tax:" + USDConvertedTax + "," + "Converted Deposit:" + USDConverteddeposit + "," + "Total Volume(USD):" + USDConvertedTotalVolume + "," + "Exchange rate:" + dollarrate;

                int insertlog4 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log4, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Contract Purchase Agreement Details Added", "", log4);
                int updatefractpa = Queries.UpdateContract_Fractional_PA_Indian_ID(office);

                    }
                if (Queries.CheckContract_Installments_Indian_ContractNoExists(ContractdetailsIDTextBox.Text) == 1)
                {
                    if (NoinstallmentTextBox.Text == "0" || NoinstallmentTextBox.Text == "" || NoinstallmentTextBox.Text == "NaN" || NoinstallmentTextBox.Text == "Infinity")
                    {
                        int updatefin1 = Queries.UpdatefinanceStartdateIFZeroInstallment(contractno);
                    }
                    else
                    {

                        if (String.Compare(Session["ofinmonth"].ToString(), finmonth) != 0)
                        {
                            int updatefinmonth = Queries.UpdateFinanceMonth_Indian(finmonth, sContractdetailsID);
                        }
                        else
                        {
                            int updatefin = Queries.UpdatefinanceStartdate(contractno);
                        }

                    }
                }
                
              

            }//contract closing

                string msg = "Details updated for Contract :" + " " + contractno;
                Page.ClientScript.RegisterStartupScript(GetType(), "popup", "alert('" + msg + "');", true);
                LoadDocuments(ContractdetailsIDTextBox.Text, office, finance, contracttypeTextBox.Text, affiliate, mcwaiver, canxcontno, ncompanyname, StateDropDownList.SelectedItem.Text);
                Response.Redirect(Request.RawUrl);

            //}//else of contractnoindb



    
    }

   

    protected void Button5_Click(object sender, EventArgs e)
    {
        string contractno = contractnoTextBox.Text;
        string ContractType = contracttypeTextBox.Text;
         if (ContractType == "Fractional")
        {
            string printr = PrintPdfDropDownList.SelectedItem.Text;
            if (printr.Contains("BREAKUP"))// == "BREAKUP")
            {
                DataTable datatable = Queries.LoanEMIBreakupFinance(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr.Contains("RECEIPT"))// == "RECEIPT")
            {
                DataTable datatable = Queries.ReceiptPage(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr == "REP REPORT")
            {
                DataTable datatable = Queries.Rep_ReportProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            //else if (printr == "ADDITION OF NAME LETTER")
            else if (printr.Contains("ADDITION"))
            {
                DataTable datatable = Queries.AdditionalName_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("SOR"))
            {
                DataTable datatable = Queries.SOR_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

            else if (printr.Contains("AUTHORISED"))
            {
                DataTable datatable = Queries.CompanyLetterHead(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("LEASE"))// (printr== "ADDITION OF NAME LETTER")
            {
                DataTable datatable = Queries.Leaseback_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

            else if (printr.Contains("MAINTAINENCE"))// (printr== "ADDITION OF NAME LETTER")
            {
                DataTable datatable = Queries.Leaseback_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else
            {
                DataTable datatable = Queries.Fractional_PA(contractno);

                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
        }
        else if (ContractType == "Points")
        {


            string printr = PrintPdfDropDownList.SelectedItem.Text;
            if (printr.Contains("BREAKUP"))// == "BREAKUP")
            {
                DataTable datatable = Queries.LoanEMIBreakupFinance(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr.Contains("RECEIPT"))//printr == "RECEIPT")
            {
                DataTable datatable = Queries.ReceiptPage(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr == "REP REPORT")
            {
                DataTable datatable = Queries.Rep_ReportProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr.Contains("ADDITION"))
            //else if (printr == "ADDITION OF NAME LETTER")
            {
                DataTable datatable = Queries.AdditionalName_NewPointsProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("SOR"))
            {


            }

            else if (printr.Contains("AUTHORISED"))
            {
                DataTable datatable = Queries.CompanyLetterHead(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else
            {
                DataTable datatable = Queries.NewPoints_PA(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }


        }
        else if (ContractType == "Trade-In-Points")
        {


            string printr = PrintPdfDropDownList.SelectedItem.Text;

            if (printr.Contains("BREAKUP"))// == "BREAKUP")
            {
                DataTable datatable = Queries.LoanEMIBreakupFinance(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr.Contains("RECEIPT"))// == "RECEIPT")
            {
                DataTable datatable = Queries.ReceiptPage(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr == "REP REPORT")
            {
                DataTable datatable = Queries.Rep_ReportProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            // else if (printr == "ADDITION OF NAME LETTER" || printr== "TRADEIN_POINTS_ADDITION OF NAME LETTER")
            else if (printr.Contains("ADDITION"))
            {
                DataTable datatable = Queries.AdditionalName_TIPProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("SOR"))
            {
                DataTable datatable = Queries.SOR_TIPProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

            else if (printr.Contains("AUTHORISED"))
            {
                DataTable datatable = Queries.CompanyLetterHead(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else
            {
                DataTable datatable = Queries.TradeInPoints_PA(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

        }
        else if (ContractType == "Trade-In-Weeks")
        {
            string printr = PrintPdfDropDownList.SelectedItem.Text;
            if (printr.Contains("BREAKUP"))// == "BREAKUP")
            {
                DataTable datatable = Queries.LoanEMIBreakupFinance(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr.Contains("RECEIPT"))// == "RECEIPT")
            {
                DataTable datatable = Queries.ReceiptPage(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr == "REP REPORT")
            {
                DataTable datatable = Queries.Rep_ReportProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            // else if (printr == "ADDITION OF NAME LETTER" || printr == "TRADEIN_WEEKS_ADDITION OF NAME LETTER")
            else if (printr.Contains("ADDITION"))
            {
                DataTable datatable = Queries.AdditionalName_TIWProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("SOR"))
            {
                DataTable datatable = Queries.SOR_TIWProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

            else if (printr.Contains("AUTHORISED"))
            {
                DataTable datatable = Queries.CompanyLetterHead(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else
            {
                DataTable datatable = Queries.TradeInWeeks_PA(contractno);

                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export();
                crystalReport.Close();
                crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }

        }
        else if (ContractType == "Trade-In-Fractionals")
        {
            string printr = PrintPdfDropDownList.SelectedItem.Text;
            if (printr.Contains("BREAKUP"))// == "BREAKUP")
            {
                DataTable datatable = Queries.LoanEMIBreakupFinance(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr.Contains("RECEIPT"))// == "RECEIPT")
            {
                DataTable datatable = Queries.ReceiptPage(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            else if (printr == "REP REPORT")
            {
                DataTable datatable = Queries.Rep_ReportProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();
            }
            //else if (printr == "ADDITION OF NAME LETTER")
            else if (printr.Contains("ADDITION"))
            {
                DataTable datatable = Queries.AdditionalName_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("SOR"))
            {
                DataTable datatable = Queries.SOR_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

            else if (printr.Contains("AUTHORISED"))
            {
                DataTable datatable = Queries.CompanyLetterHead(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else if (printr.Contains("LEASE"))// (printr== "ADDITION OF NAME LETTER")
            {
                DataTable datatable = Queries.Leaseback_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }

            else if (printr.Contains("MAINTAINENCE"))// (printr== "ADDITION OF NAME LETTER")
            {
                DataTable datatable = Queries.Leaseback_FractionalProc(contractno);
                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
            else
            {
                DataTable datatable = Queries.Fractional_PA(contractno);

                ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
                crystalReport.Load(Server.MapPath("~/ireports/" + printr + ".rpt")); // path of report       
                crystalReport.SetDataSource(datatable);
                System.IO.FileStream fs = null;
                long FileSize = 0;
                DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
                string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
                crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                oDest.DiskFileName = ExportFileName;
                crystalReport.ExportOptions.DestinationOptions = oDest;
                crystalReport.Export(); crystalReport.Close(); crystalReport.Dispose();
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("Content-Type", "application/pdf");
                //   string fn = "test" + ".pdf";
                string fn = printr + ".pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

                fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
                FileSize = fs.Length;
                byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
                fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
                fs.Close();
                Response.BinaryWrite(bBuffer);
                Response.Flush();

            }
        }



    }


    [WebMethod]
    public static string getPointsAmoountTax(string currency)
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        sqlcon.Open();
        string JSON = "{\n \"names\":[";
        string query = "select amount,taxValue from PointsContract where currency='"+currency+"' and status='Active' ;";
        SqlCommand sql =new SqlCommand(query,sqlcon);

        SqlDataReader reader = sql.ExecuteReader();
        while (reader.Read())
        {
            double amount = reader.GetDouble(0);
            double tax = reader.GetDouble(1);
            JSON += "[\"" + amount + "\",\"" + tax + "\"],";
        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";

        return JSON;

    }
    //Code commented by gaurav 8-12-2017
    //[WebMethod]
    //public static string getContractnoOnClub(string venue, string venuegrp, string club,string nationality)
    //{

    //    string JSON = "{\n \"names\":[";
    //    if(nationality=="Indian")
    //    {
    //        SqlDataReader reader = Queries.GetIncrementValueofContractClubIndian(venue, venuegrp, club, nationality);
    //        while (reader.Read())
    //        {
    //            string code = reader.GetString(0);
    //            //  string src = reader.GetString(1);
    //            //  string inc = reader.GetString(2);
    //            //JSON += "[\"" + code + "\",\"" + src + "\",\"" + inc + "\"],";

    //            JSON += "[\"" + code + "\"],";
    //        }
    //        JSON = JSON.Substring(0, JSON.Length - 1);
    //        JSON += "] \n}";

    //    }

    //    else
    //    {
    //        SqlDataReader reader = Queries.GetIncrementValueofContractClubNonIndian(venue, venuegrp, club, nationality);
    //        while (reader.Read())
    //        {
    //            string code = reader.GetString(0);
    //            //  string src = reader.GetString(1);
    //            //  string inc = reader.GetString(2);
    //            //JSON += "[\"" + code + "\",\"" + src + "\",\"" + inc + "\"],";
    //            JSON += "[\"" + code + "\"],";
    //        }
    //        JSON = JSON.Substring(0, JSON.Length - 1);
    //        JSON += "] \n}";

    //    }


    //    return JSON;

    //}




        // new code gaurav

        //commented by muriel
  /*  [WebMethod]
        public static string getContractnoOnClub(string venue,string venuegrp,string club,string nationality)
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        sqlcon.Open();
        string JSON = "{\n \"names\":[";
        if (nationality == "Indian")
        {
            string query = "SELECT Contract_Code+'/'+ REPLACE(CONVERT(CHAR(8), GETDATE(), 3), '/', '')+'/'+Increment_Value+vg.Venue_group_Code from Contract_Club cc join Venue_Group vg on vg.Venue_ID = cc.Venue_ID join venue v on v.Venue_ID = vg.Venue_ID where v.Venue_Name ='" + venue + "' and cc.Contract_Club_Name ='" + club + "' and vg.Venue_Group_Name ='" + venuegrp + "' and cc.Nationality ='Indian'";
            SqlCommand sql = new SqlCommand(query, sqlcon);

            SqlDataReader reader = sql.ExecuteReader();
            while (reader.Read())
            {
                string code = reader.GetString(0);
                JSON += "[\"" + code + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            string query = "SELECT Contract_Code + '/' + REPLACE(CONVERT(CHAR(8), GETDATE(), 3), '/', '') + '/' + Increment_Value + vg.Venue_group_Code from Contract_Club cc join Venue_Group vg on vg.Venue_ID = cc.Venue_ID join venue v on v.Venue_ID = vg.Venue_ID where v.Venue_Name ='" + venue + "' and cc.Contract_Club_Name ='" + club + "' and vg.Venue_Group_Name ='" + venuegrp + "' and cc.Nationality !='Indian'";
            SqlCommand sql = new SqlCommand(query, sqlcon);

            SqlDataReader reader = sql.ExecuteReader();
            while (reader.Read())
            {
                string code = reader.GetString(0);
                JSON += "[\"" + code + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";

        }
           

        return JSON;
    }*/



    [WebMethod]
    public static string getFinanceNo(string venue, string finance,string type,string financevalue,string contractdetails_id)
    {
        


        string JSON = "{\n \"names\":[";
        int exists = Queries.CheckFinanceIndianDetailsExists(contractdetails_id, financevalue, finance);
        if (exists == 1)
        {
            SqlDataReader reader = Queries.getFinanceNoFromID(contractdetails_id, financevalue, finance);
            while (reader.Read())
            {
                string code = reader.GetString(0);

                JSON += "[\"" + code + "\"],";

            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            SqlDataReader reader = Queries.GetFinanceNoIncrementValue(venue, finance, type);
            string code;
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    if (type == "Fractional" || type == "Trade-In-Fractionals")
                    {
                        code = reader.GetString(0) + "Z3F";
                    }
                    else
                    {
                        code = reader.GetString(0) + "Z3";
                    }

                    JSON += "[\"" + code + "\"],";

                }
                JSON = JSON.Substring(0, JSON.Length - 1);
                JSON += "] \n}";

            }
            else
            {
                if (type == "Fractional" || type == "Trade-In-Fractionals")
                {
                    code = reader.GetString(0) + "Z3F";
                }
                else
                {
                    code = reader.GetString(0) + "Z3";
                }

                JSON += "[\"" + code + "\"],";
                JSON = JSON.Substring(0, JSON.Length - 1);
                JSON += "] \n}";
               

            }
                
        }
        return JSON;

    }
    [WebMethod]
    public static string GetfractionalResidenceType(string resort)
    {

        string JSON = "{\n \"names\":[";
        SqlDataReader reader = Queries.LoadfractionalResidencetype(resort);
        while (reader.Read())
        {
            string type = reader.GetString(0);

            JSON += "[\"" + type + "\"],";

        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";

        return JSON;

    }
    [WebMethod]
    public static string LoadfractionalResidenceNo(string resort)
    {

        string JSON = "{\n \"names\":[";


        SqlDataReader reader = Queries.LoadfractionalResidenceNo(resort);
        while (reader.Read())
        {
            string mn = reader.GetString(0);

            JSON += "[\"" + mn + "\"],";
        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";

        return JSON;
    }



    [WebMethod]
    public static string getContractnoOnResort(string venue, string club, string nationality)
    {

        string JSON = "{\n \"names\":[";
        if (nationality == "Indian")

        {
            SqlDataReader reader = Queries.GetIncrementValueofContractResortIndian(venue, club);//, nationality);
            while (reader.Read())
            {
                string code = reader.GetString(0);
                 
                JSON += "[\"" + code + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            SqlDataReader reader = Queries.GetIncrementValueofContractResortNonIndian(venue, club);//, nationality);
            while (reader.Read())
            {

                string code = reader.GetString(0);

                JSON += "[\"" + code + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        return JSON;
}


[WebMethod]
public static string LoadClubNameonContractType(string contracttype)
{

    string JSON = "{\n \"names\":[";


    SqlDataReader reader = Queries.LoadClubOnContractType(contracttype);
    while (reader.Read())
    {
        string club = reader.GetString(0);

        JSON += "[\"" + club + "\"],";
    }
    JSON = JSON.Substring(0, JSON.Length - 1);
    JSON += "] \n}";

    return JSON;
}


    [WebMethod]
    public static string getVenueOnCountry(string countryName)
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        string JSON = "{\n \"names\":[";
        sqlcon.Open();

        string query = " select venue.Venue_Name,venue.Venue_ID from venue where Venue_Country_ID in(select Venue_Country_ID from VenueCountry where Venue_Country_Name = '" + countryName + "')";
        SqlCommand sql = new SqlCommand(query, sqlcon);

        SqlDataReader reader = sql.ExecuteReader();
        while (reader.Read())
        {
            string name = reader.GetString(0);
            JSON += "[\"" + name + "\"],";
        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";

        return JSON;
    }

    [WebMethod]
    public static string getVenueGroupOnVenue(string venue)
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        string JSON = "{\n \"names\":[";
        sqlcon.Open();

        string query = "select vg.Venue_Group_ID,vg.Venue_Group_Name from Venue_Group vg where vg.Venue_ID in(select venue.Venue_ID from venue where venue.Venue_Name ='" + venue + "')";
        SqlCommand sql = new SqlCommand(query, sqlcon);

        SqlDataReader reader = sql.ExecuteReader();
        while (reader.Read())
        {
            string name = reader.GetString(1);
            JSON += "[\"" + name + "\"],";
        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";

        return JSON;
    }


    



    protected void Button6_Click(object sender, EventArgs e)
    {
        Session["oProfile_Venue_Country"] = ""; Session["oProfile_Venue"] = ""; Session["oProfile_Group_Venue"] = ""; Session["oProfile_Marketing_Program"] = "";
        Session["oProfile_Agent"] = ""; Session["oProfile_Agent_Code"] = ""; Session["oProfile_Member_Type1"] = ""; Session["oProfile_Member_Number1"] = "";
        Session["oProfile_Member_Type2"] = ""; Session["oProfile_Member_Number2"] = ""; Session["oProfile_Employment_status"] = ""; Session["oProfile_Marital_status"] = "";
        Session["oProfile_NOY_Living_as_couple"] = ""; Session["oOffice"] = ""; Session["oComments"] = ""; Session["oManager"] = "";
        Session["ophid"] = ""; Session["ocard"] = "";
        Session["SubVenue"] = ""; Session["RegTerms"] = "";
        Session["Lead_Source"] = ""; Session["Sub_Venue_Group"] = ""; Session["leadOffice"] = ""; Session["Sale_Marketing_Source"] = "";


        Session["oProfile_Primary_Title"] = ""; Session["oProfile_Primary_Fname"] = ""; Session["oProfile_Primary_Lname"] = "";
        Session["oProfile_Primary_DOB"] = ""; Session["oProfile_Primary_Nationality"] = ""; Session["oProfile_Primary_Country"] = "";
        Session["opage"] = ""; Session["opdesignation"] = ""; Session["oplang"] = "";

        Session["oProfile_Secondary_Title"] = ""; Session["oProfile_Secondary_Fname"] = ""; Session["oProfile_Secondary_Lname"] = "";
        Session["oProfile_Secondary_DOB"] = ""; Session["oProfile_Secondary_Nationality"] = ""; Session["oProfile_Secondary_Country"] = "";
        Session["osage"] = ""; Session["osdesignation"] = ""; Session["oslang"] = "";

        Session["oSub_Profile1_Title"] = ""; Session["oSub_Profile1_Fname"] = ""; Session["oSub_Profile1_Lname"] = "";
        Session["oSub_Profile1_DOB"] = ""; Session["  oSub_Profile1_Nationality"] = ""; Session["oSub_Profile1_Country"] = "";
        Session["osp1age"] = "";

        Session["oSub_Profile2_Title"] = ""; Session["oSub_Profile2_Fname"] = ""; Session["oSub_Profile2_Lname"] = "";
        Session["oSub_Profile2_DOB"] = ""; Session["  oSub_Profile2_Nationality"] = ""; Session["oSub_Profile2_Country"] = "";
        Session["osp2age"] = "";

        Session["oSub_Profile3_Title"] = ""; Session["oSub_Profile3_Fname"] = ""; Session["oSub_Profile3_Lname"] = "";
        Session["oSub_Profile3_DOB"] = ""; Session["  oSub_Profile3_Nationality"] = ""; Session["oSub_Profile3_Country"] = "";
        Session["osp3age"] = "";

        Session["oSub_Profile4_Title"] = ""; Session["oSub_Profile4_Fname"] = ""; Session["oSub_Profile4_Lname"] = "";
        Session["oSub_Profile4_DOB"] = ""; Session["  oSub_Profile4_Nationality"] = ""; Session["oSub_Profile4_Country"] = "";
        Session["osp4age"] = "";

        Session["oProfile_Address_Line1"] = ""; Session["oProfile_Address_Line2"] = ""; Session["oProfile_Address_State"] = "";
        Session["oProfile_Address_city"] = ""; Session["oProfile_Address_Postcode"] = ""; Session["oProfile_Address_Created_Date"] = "";
        Session["oProfile_Address_Expiry_Date"] = ""; Session["oProfile_Address_Country"] = "";

        Session["oProfile_CorAddress_Line1"] = ""; Session["oProfile_CorAddress_Line2"] = ""; Session["oProfile_CorAddress_State"] = "";
        Session["oProfile_CorAddress_city"] = ""; Session["oProfile_CorAddress_Postcode"] = ""; Session["oProfile_CorAddress_Created_Date"] = "";
        Session["oProfile_Address_Expiry_Date"] = ""; Session["oProfile_CorAddress_Country"] = "";

        Session["oPrimary_CC"] = ""; Session["oPrimary_Mobile"] = ""; Session["oPrimary_Alt_CC"] = "";
        Session["oPrimary_Alternate"] = ""; Session["opriOfficecc"] = ""; Session["opriOfficeno"] = "";

        Session["osecOfficecc"] = ""; Session["osecofficeno"] = ""; Session["oSecondary_CC"] = "";
        Session["oSecondary_Mobile"] = ""; Session["oSecondary_Alt_CC"] = ""; Session["oSecondary_Alternate"] = "";

        Session["oSubprofile1_CC"] = ""; Session["oSubprofile1_Mobile"] = ""; Session["oSubprofile1_Alt_CC"] = ""; Session["oSubprofile1_Alternate"] = "";
        Session["oSubprofile2_CC"] = ""; Session["oSubprofile2_Mobile"] = ""; Session["oSubprofile2_Alt_CC"] = ""; Session["oSubprofile2_Alternate"] = "";

        Session["oSubprofile3_CC"] = ""; Session["oSubprofile3_Mobile"] = ""; Session["oSubprofile3_Alt_CC"] = ""; Session["oSubprofile3_Alternate"] = "";
        Session["oSubprofile4_CC"] = ""; Session["oSubprofile4_Mobile"] = ""; Session["oSubprofile4_Alt_CC"] = ""; Session["oSubprofile4_Alternate"] = "";

        Session["oPrimary_Email"] = ""; Session["oSecondary_Email"] = ""; Session["oSubprofile1_Email"] = "";
        Session["oSubprofile2_Email"] = ""; Session["oSubprofile3_Email"] = ""; Session["oSubprofile4_Email"] = "";

        Session["oPrimary_Email2"] = ""; Session["oSecondary_Email2"] = ""; Session["oSubprofile1_Email2"] = "";
        Session["oSubprofile2_Email2"] = ""; Session["oSubprofile3_Email2"] = ""; Session["oSubprofile4_Email2"] = "";


        Session["oProfile_Stay_ID"] = ""; Session["oProfile_Stay_Resort_Name"] = ""; Session["oProfile_Stay_Resort_Room_Number"] = "";
        Session["oProfile_Stay_Arrival_Date"] = ""; Session["oProfile_Stay_Departure_Date"] = "";

        Session["oTour_Details_Guest_Status"] = ""; Session["oTour_Details_Guest_Sales_Rep"] = ""; Session["oTour_Details_Tour_Date"] = "";
        Session["tourweekno"] = ""; Session["oTour_Details_Sales_Deck_Check_In"] = ""; Session["oTour_Details_Sales_Deck_Check_Out"] = "";
        Session["oTour_Details_Taxi_In_Price"] = ""; Session["oTour_Details_Taxi_In_Ref"] = ""; Session["oTour_Details_Taxi_Out_Price"] = "";
        Session["oTour_Details_Taxi_Out_Ref"] = ""; Session["oComments"] = ""; Session["oregTerms"] = ""; Session["ocomment2"] = "";

        Session["pmobile"] = ""; Session["palternate"] = ""; Session["smobile"] = ""; Session["salternate"] = ""; Session["priOfficeno"] = "";
        Session["sp1mobile"] = ""; Session["sp1alternate"] = ""; Session["sp2mobile"] = ""; Session["sp2alternate"] = ""; Session["secOfficeno"] = "";
        Session["sp3mobile"] = ""; Session["sp3alternate"] = ""; Session["sp4mobile"] = ""; Session["sp4alternate"] = "";

        Session["pmobilec"] = ""; Session["palternatec"] = ""; Session["smobilec"] = ""; Session["salternatec"] = ""; Session["sp1mobilec"] = ""; Session["sp1alternatec"] = "";
        Session["sp2mobilec"] = ""; Session["sp2alternatec"] = ""; Session["sp3mobilec"] = ""; Session["sp3alternatec"] = ""; Session["sp4mobilec"] = ""; Session["sp4alternatec"] = "";

        Session["pcc"] = ""; Session["paltrcc"] = ""; Session["scc"] = ""; Session["saltcc"] = ""; Session["sp1cc"] = ""; Session["sp1altcc"] = ""; Session["priOfficecc"] = "";
        Session["sp2cc"] = ""; Session["sp2altccc"] = ""; Session["sp3cc"] = ""; Session["sp3altccc"] = ""; Session["sp4cc"] = ""; Session["sp4altccc"] = ""; Session["secOfficecc"] = "";

        Session["ocompanyname"] = ""; Session["pemail"] = ""; Session["semail"] = ""; Session["sp1email"] = ""; Session["sp2email"] = ""; Session["sp3email"] = ""; Session["sp4email"] = "";
        Session["pemail2"] = ""; Session["semail2"] = ""; Session["sp1email2"] = ""; Session["sp2email2"] = ""; Session["sp3email2"] = ""; Session["sp4email2"] = "";

        Session["regTerms"] = ""; Session["tourweekno"] = "";
        Session["sechomecc"] = ""; Session["sechomecc"] = "";
        Session["sechomeno"] = ""; Session["prihomeno"] = ""; Session["oprihomeno"] = ""; Session["oprihomecc"] = "";
        Session["osechomecc"] = ""; Session["osechomeno"] = "";

        //dentity table
        Session["pancardspell"] = ""; Session["cogstinospell"] = "";
        //contract details table
        Session["opan"] = "";       
        Session["ocogstin"] = ""; Session["ocompanypano"] = "";

        Session["oProfile_CorAddress_Line1"] = ""; Session["oProfile_CorAddress_Line2"] = ""; Session["oProfile_CorAddress_State"] = "";
        Session["oProfile_CorAddress_city"] = ""; Session["oProfile_CorAddress_Postcode"] = ""; Session["oProfile_CorAddress_Created_Date"] = "";
        Session["oProfile_Address_Expiry_Date"] = ""; Session["oProfile_CorAddress_Country"] = "";

        office = Queries.GetOfficeFromCountry(Session["ProfileID"].ToString());
        DataSet ds = Queries.LoadProfielDetailsFull(Session["ProfileID"].ToString());// profileidTextBox.Text);

        string sContractdetailsID = (string)Session["ContractdetailsID"];

        Session["oProfile_Venue_Country"] = ds.Tables[0].Rows[0]["Profile_Venue_Country"].ToString();
        Session["oProfile_Venue"] = ds.Tables[0].Rows[0]["Profile_Venue"].ToString();
        Session["oProfile_Group_Venue"] = ds.Tables[0].Rows[0]["Profile_Group_Venue"].ToString();
        Session["oProfile_Marketing_Program"] = ds.Tables[0].Rows[0]["Profile_Marketing_Program"].ToString();
        Session["oProfile_Agent"] = ds.Tables[0].Rows[0]["Profile_Agent"].ToString();
        Session["oProfile_Agent_Code"] = ds.Tables[0].Rows[0]["Profile_Agent_Code"].ToString();
        Session["oProfile_Member_Type1"] = ds.Tables[0].Rows[0]["Profile_Member_Type1"].ToString();
        Session["oProfile_Member_Number1"] = ds.Tables[0].Rows[0]["Profile_Member_Number1"].ToString();
        Session["oProfile_Member_Type2"] = ds.Tables[0].Rows[0]["Profile_Member_Type2"].ToString();
        Session["oProfile_Member_Number2"] = ds.Tables[0].Rows[0]["Profile_Member_Number2"].ToString();
        Session["oProfile_Employment_status"] = ds.Tables[0].Rows[0]["Profile_Employment_status"].ToString();
        Session["oProfile_Marital_status"] = ds.Tables[0].Rows[0]["Profile_Marital_status"].ToString();
        Session["oProfile_NOY_Living_as_couple"] = ds.Tables[0].Rows[0]["Profile_NOY_Living_as_couple"].ToString();
        Session["oOffice"] = ds.Tables[0].Rows[0]["Office"].ToString();
        Session["oComments"] = ds.Tables[0].Rows[0]["Comments"].ToString();
        Session["oManager"] = ds.Tables[0].Rows[0]["Manager"].ToString();
        Session["ophid"] = ds.Tables[0].Rows[0]["Photo_identity"].ToString();
        Session["ocard"] = ds.Tables[0].Rows[0]["Card_Holder"].ToString();
        Session["ocomment2"] = ds.Tables[0].Rows[0]["comment2"].ToString();
        Session["SubVenue"] = ds.Tables[0].Rows[0]["SubVenue"].ToString();
        Session["Lead_Source"] = ds.Tables[0].Rows[0]["Lead_Source"].ToString();
        Session["Sub_Venue_Group"] = ds.Tables[0].Rows[0]["Sub_Venue_Group"].ToString();
        Session["leadOffice"] = ds.Tables[0].Rows[0]["leadOffice"].ToString();

        //from identity proof table
        Session["pancardspell"] = ds.Tables[0].Rows[0]["Primary_ID_Num"].ToString();
        Session["cogstinospell"] = ds.Tables[0].Rows[0]["Primary_ID_Num2"].ToString();
        //contract table
        DataSet dsct = Queries.LoadContractNoDetailsOnContractDetails_ID(sContractdetailsID);
        Session["opan"] = dsct.Tables[0].Rows[0]["Pan_Card"].ToString();
        Session["ocogstin"] = dsct.Tables[0].Rows[0]["Client_GSTIN"].ToString();
        Session["ocompanypano"] = dsct.Tables[0].Rows[0]["Company_PanNo"].ToString();
         


        Session["oProfile_Primary_Title"] = ds.Tables[0].Rows[0]["Profile_Primary_Title"].ToString();
        Session["oProfile_Primary_Fname"] = ds.Tables[0].Rows[0]["Profile_Primary_Fname"].ToString();
        Session["oProfile_Primary_Lname"] = ds.Tables[0].Rows[0]["Profile_Primary_Lname"].ToString();
        Session["oProfile_Primary_DOB"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Primary_DOB"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Primary_DOB"].ToString()).ToString("yyyy-MM-dd");
        Session["oProfile_Primary_Nationality"] = ds.Tables[0].Rows[0]["Profile_Primary_Nationality"].ToString();
        Session["oProfile_Primary_Country"] = ds.Tables[0].Rows[0]["Profile_Primary_Country"].ToString();
        Session["opage"] = ds.Tables[0].Rows[0]["Primary_Age"].ToString();
        Session["opdesignation"] = ds.Tables[0].Rows[0]["Primary_Designation"].ToString();
        Session["oplang"] = ds.Tables[0].Rows[0]["Primary_Language"].ToString();

        Session["oProfile_Secondary_Title"] = ds.Tables[0].Rows[0]["Profile_Secondary_Title"].ToString();
        Session["oProfile_Secondary_Fname"] = ds.Tables[0].Rows[0]["Profile_Secondary_Fname"].ToString();
        Session["oProfile_Secondary_Lname"] = ds.Tables[0].Rows[0]["Profile_Secondary_Lname"].ToString();
        Session["oProfile_Secondary_DOB"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Secondary_DOB"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Secondary_DOB"].ToString()).ToString("yyyy-MM-dd");
        Session["oProfile_Secondary_Nationality"] = ds.Tables[0].Rows[0]["Profile_Secondary_Nationality"].ToString();
        Session["oProfile_Secondary_Country"] = ds.Tables[0].Rows[0]["Profile_Secondary_Country"].ToString();
        Session["osage"] = ds.Tables[0].Rows[0]["Secondary_Age"].ToString();
        Session["osdesignation"] = ds.Tables[0].Rows[0]["Secondary_Designation"].ToString();
        Session["oslang"] = ds.Tables[0].Rows[0]["Secondary_Language"].ToString();

        Session["oSub_Profile1_Title"] = ds.Tables[0].Rows[0]["Sub_Profile1_Title"].ToString();
        Session["oSub_Profile1_Fname"] = ds.Tables[0].Rows[0]["Sub_Profile1_Fname"].ToString();
        Session["oSub_Profile1_Lname"] = ds.Tables[0].Rows[0]["Sub_Profile1_Lname"].ToString();
        Session["oSub_Profile1_DOB"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile1_DOB"]);//Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile1_DOB"].ToString()).ToString("yyyy-MM-dd");
        Session["oSub_Profile1_Nationality"] = ds.Tables[0].Rows[0]["Sub_Profile1_Nationality"].ToString();
        Session["oSub_Profile1_Country"] = ds.Tables[0].Rows[0]["Sub_Profile1_Country"].ToString();
        Session["osp1age"] = ds.Tables[0].Rows[0]["Sub_Profile1_Age"].ToString();

        Session["oSub_Profile2_Title"] = ds.Tables[0].Rows[0]["Sub_Profile2_Title"].ToString();
        Session["oSub_Profile2_Fname"] = ds.Tables[0].Rows[0]["Sub_Profile2_Fname"].ToString();
        Session["oSub_Profile2_Lname"] = ds.Tables[0].Rows[0]["Sub_Profile2_Lname"].ToString();
        Session["oSub_Profile2_DOB"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile2_DOB"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile2_DOB"].ToString()).ToString("yyyy-MM-dd");
        Session["oSub_Profile2_Nationality"] = ds.Tables[0].Rows[0]["Sub_Profile2_Nationality"].ToString();
        Session["oSub_Profile2_Country"] = ds.Tables[0].Rows[0]["Sub_Profile2_Country"].ToString();
        Session["osp2age"] = ds.Tables[0].Rows[0]["Sub_Profile2_Age"].ToString();

        Session["oSub_Profile3_Title"] = ds.Tables[0].Rows[0]["Sub_Profile3_Title"].ToString();
        Session["oSub_Profile3_Fname"] = ds.Tables[0].Rows[0]["Sub_Profile3_Fname"].ToString();
        Session["oSub_Profile3_Lname"] = ds.Tables[0].Rows[0]["Sub_Profile3_Lname"].ToString();
        Session["oSub_Profile3_DOB"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile3_DOB"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile3_DOB"].ToString()).ToString("yyyy-MM-dd");
        Session["oSub_Profile3_Nationality"] = ds.Tables[0].Rows[0]["Sub_Profile3_Nationality"].ToString();
        Session["oSub_Profile3_Country"] = ds.Tables[0].Rows[0]["Sub_Profile3_Country"].ToString();
        Session["osp3age"] = ds.Tables[0].Rows[0]["Sub_Profile3_Age"].ToString();

        Session["oSub_Profile4_Title"] = ds.Tables[0].Rows[0]["Sub_Profile4_Title"].ToString();
        Session["oSub_Profile4_Fname"] = ds.Tables[0].Rows[0]["Sub_Profile4_Fname"].ToString();
        Session["oSub_Profile4_Lname"] = ds.Tables[0].Rows[0]["Sub_Profile4_Lname"].ToString();
        Session["oSub_Profile4_DOB"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Sub_Profile4_DOB"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Sub_Profile4_DOB"].ToString()).ToString("yyyy-MM-dd");
        Session["oSub_Profile4_Nationality"] = ds.Tables[0].Rows[0]["Sub_Profile4_Nationality"].ToString();
        Session["oSub_Profile4_Country"] = ds.Tables[0].Rows[0]["Sub_Profile4_Country"].ToString();
        Session["osp4age"] = ds.Tables[0].Rows[0]["Sub_Profile4_Age"].ToString();

        Session["oProfile_Address_Line1"] = ds.Tables[0].Rows[0]["Profile_Address_Line1"].ToString();
        Session["oProfile_Address_Line2"] = ds.Tables[0].Rows[0]["Profile_Address_Line2"].ToString();
        Session["oProfile_Address_State"] = ds.Tables[0].Rows[0]["Profile_Address_State"].ToString();
        Session["oProfile_Address_city"] = ds.Tables[0].Rows[0]["Profile_Address_city"].ToString();
        Session["oProfile_Address_Postcode"] = ds.Tables[0].Rows[0]["Profile_Address_Postcode"].ToString();
        Session["oProfile_Address_Created_Date"] = ds.Tables[0].Rows[0]["Profile_Address_Created_Date"].ToString();
        Session["oProfile_Address_Expiry_Date"] = ds.Tables[0].Rows[0]["Profile_Address_Expiry_Date"].ToString();
        Session["oProfile_Address_Country"] = ds.Tables[0].Rows[0]["Profile_Address_Country"].ToString();


        Session["oProfile_CorAddress_Line1"] = ds.Tables[0].Rows[0]["Address_Line1"].ToString();
        Session["oProfile_CorAddress_Line2"] = ds.Tables[0].Rows[0]["Address_Line2"].ToString();
        Session["oProfile_CorAddress_State"] = ds.Tables[0].Rows[0]["Address_State"].ToString();
        Session["oProfile_CorAddress_city"] = ds.Tables[0].Rows[0]["Address_city"].ToString();
        Session["oProfile_CorAddress_Postcode"] = ds.Tables[0].Rows[0]["Address_Postcode"].ToString();
        Session["oProfile_CorAddress_Created_Date"] = ds.Tables[0].Rows[0]["Address_Created_Date"].ToString();
        Session["oProfile_CorAddress_Expiry_Date"] = ds.Tables[0].Rows[0]["Expiry_Date"].ToString();
        Session["oProfile_CorAddress_Country"] = ds.Tables[0].Rows[0]["Address_Country"].ToString();

        Session["oPrimary_CC"] = ds.Tables[0].Rows[0]["Primary_CC"].ToString();
        Session["oPrimary_Mobile"] = ds.Tables[0].Rows[0]["Primary_Mobile"].ToString();
        Session["oPrimary_Alt_CC"] = ds.Tables[0].Rows[0]["Primary_Alt_CC"].ToString();
        Session["oPrimary_Alternate"] = ds.Tables[0].Rows[0]["Primary_Alternate"].ToString();
        Session["opriOfficecc"] = ds.Tables[0].Rows[0]["Primary_office_cc"].ToString();
        Session["opriOfficeno"] = ds.Tables[0].Rows[0]["Primary_office_num"].ToString();

        Session["oprihomecc"] = ds.Tables[0].Rows[0]["Primary_home_cc"].ToString();
        Session["oprihomeno"] = ds.Tables[0].Rows[0]["Primary_home_num"].ToString();

       

        Session["osechomecc"] = ds.Tables[0].Rows[0]["Secondary_home_cc"].ToString();
        Session["osechomeno"] = ds.Tables[0].Rows[0]["Secondary_home_num"].ToString();


        Session["osecOfficecc"] = ds.Tables[0].Rows[0]["Secondary_office_cc"].ToString();
        Session["osecofficeno"] = ds.Tables[0].Rows[0]["Secondary_office_num"].ToString();
        Session["oSecondary_CC"] = ds.Tables[0].Rows[0]["Secondary_CC"].ToString();
        Session["oSecondary_Mobile"] = ds.Tables[0].Rows[0]["Secondary_Mobile"].ToString();
        Session["oSecondary_Alt_CC"] = ds.Tables[0].Rows[0]["Secondary_Alt_CC"].ToString();
        Session["oSecondary_Alternate"] = ds.Tables[0].Rows[0]["Secondary_Alternate"].ToString();

        Session["oSubprofile1_CC"] = ds.Tables[0].Rows[0]["Subprofile1_CC"].ToString();
        Session["oSubprofile1_Mobile"] = ds.Tables[0].Rows[0]["Subprofile1_Mobile"].ToString();
        Session["oSubprofile1_Alt_CC"] = ds.Tables[0].Rows[0]["Subprofile1_Alt_CC"].ToString();
        Session["oSubprofile1_Alternate"] = ds.Tables[0].Rows[0]["Subprofile1_Alternate"].ToString();

        Session["oSubprofile2_CC"] = ds.Tables[0].Rows[0]["Subprofile2_CC"].ToString();
        Session["oSubprofile2_Mobile"] = ds.Tables[0].Rows[0]["Subprofile2_Mobile"].ToString();
        Session["oSubprofile2_Alt_CC"] = ds.Tables[0].Rows[0]["Subprofile2_Alt_CC"].ToString();
        Session["oSubprofile2_Alternate"] = ds.Tables[0].Rows[0]["Subprofile2_Alternate"].ToString();

        Session["oSubprofile3_CC"] = ds.Tables[0].Rows[0]["Subprofile3_CC"].ToString();
        Session["oSubprofile3_Mobile"] = ds.Tables[0].Rows[0]["Subprofile3_Mobile"].ToString();
        Session["oSubprofile3_Alt_CC"] = ds.Tables[0].Rows[0]["Subprofile3_Alt_CC"].ToString();
        Session["oSubprofile3_Alternate"] = ds.Tables[0].Rows[0]["Subprofile3_Alternate"].ToString();

        Session["oSubprofile4_CC"] = ds.Tables[0].Rows[0]["Subprofile4_CC"].ToString();
        Session["oSubprofile4_Mobile"] = ds.Tables[0].Rows[0]["Subprofile4_Mobile"].ToString();
        Session["oSubprofile4_Alt_CC"] = ds.Tables[0].Rows[0]["Subprofile4_Alt_CC"].ToString();
        Session["oSubprofile4_Alternate"] = ds.Tables[0].Rows[0]["Subprofile4_Alternate"].ToString();

        Session["oPrimary_Email"] = ds.Tables[0].Rows[0]["Primary_Email"].ToString();
      
        Session["oSecondary_Email"] = ds.Tables[0].Rows[0]["Secondary_Email"].ToString();
        Session["oSubprofile1_Email"] = ds.Tables[0].Rows[0]["Subprofile1_Email"].ToString();
        Session["oSubprofile2_Email"] = ds.Tables[0].Rows[0]["Subprofile2_Email"].ToString();
        Session["oSubprofile3_Email"] = ds.Tables[0].Rows[0]["Subprofile3_Email"].ToString();
        Session["oSubprofile4_Email"] = ds.Tables[0].Rows[0]["Subprofile4_Email"].ToString();

        Session["oPrimary_Email2"] = ds.Tables[0].Rows[0]["Primary_Email2"].ToString();
        Session["oSecondary_Email2"] = ds.Tables[0].Rows[0]["Secondary_Email2"].ToString();
        Session["oSubprofile1_Email2"] = ds.Tables[0].Rows[0]["Subprofile1_Email2"].ToString();
        Session["oSubprofile2_Email2"] = ds.Tables[0].Rows[0]["Subprofile2_Email2"].ToString();
        Session["oSubprofile3_Email2"] = ds.Tables[0].Rows[0]["Subprofile3_Email2"].ToString();
        Session["oSubprofile4_Email2"] = ds.Tables[0].Rows[0]["Subprofile4_Email2"].ToString();

        Session["oProfile_Stay_ID"] = ds.Tables[0].Rows[0]["Profile_Stay_ID"].ToString();
        Session["oProfile_Stay_Resort_Name"] = ds.Tables[0].Rows[0]["Profile_Stay_Resort_Name"].ToString();
        Session["oProfile_Stay_Resort_Room_Number"] = ds.Tables[0].Rows[0]["Profile_Stay_Resort_Room_Number"].ToString();
        Session["oProfile_Stay_Arrival_Date"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Stay_Arrival_Date"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Stay_Arrival_Date"].ToString()).ToString("yyyy-MM-dd");
        Session["oProfile_Stay_Departure_Date"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Profile_Stay_Departure_Date"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Profile_Stay_Departure_Date"].ToString()).ToString("yyyy-MM-dd");

        Session["oTour_Details_Guest_Status"] = ds.Tables[0].Rows[0]["Tour_Details_Guest_Status"].ToString();
        Session["oTour_Details_Guest_Sales_Rep"] = ds.Tables[0].Rows[0]["Tour_Details_Guest_Sales_Rep"].ToString();
        Session["oTour_Details_Tour_Date"] = String.Format("{0:dd-MM-yyyy}", ds.Tables[0].Rows[0]["Tour_Details_Tour_Date"]); //Convert.ToDateTime(ds.Tables[0].Rows[0]["Tour_Details_Tour_Date"].ToString()).ToString("yyyy-MM-dd");
        Session["tourweekno"] = ds.Tables[0].Rows[0]["Week_number"].ToString();
        Session["oTour_Details_Sales_Deck_Check_In"] = ds.Tables[0].Rows[0]["Tour_Details_Sales_Deck_Check_In"].ToString();
        Session["oTour_Details_Sales_Deck_Check_Out"] = ds.Tables[0].Rows[0]["Tour_Details_Sales_Deck_Check_Out"].ToString();
        Session["oTour_Details_Taxi_In_Price"] = ds.Tables[0].Rows[0]["Tour_Details_Taxi_In_Price"].ToString();
        Session["oTour_Details_Taxi_In_Ref"] = ds.Tables[0].Rows[0]["Tour_Details_Taxi_In_Ref"].ToString();
        Session["oTour_Details_Taxi_Out_Price"] = ds.Tables[0].Rows[0]["Tour_Details_Taxi_Out_Price"].ToString();
        Session["oTour_Details_Taxi_Out_Ref"] = ds.Tables[0].Rows[0]["Tour_Details_Taxi_Out_Ref"].ToString();
        Session["oComments"] = ds.Tables[0].Rows[0]["Comments"].ToString();
        Session["oregTerms"] = ds.Tables[0].Rows[0]["RegTerms"].ToString();


        Session["oProfile_CorAddress_Line1"] = ds.Tables[0].Rows[0]["Address_Line1"].ToString();
        Session["oProfile_CorAddress_Line2"] = ds.Tables[0].Rows[0]["Address_Line2"].ToString();
        Session["oProfile_CorAddress_State"] = ds.Tables[0].Rows[0]["Address_State"].ToString();
        Session["oProfile_CorAddress_city"] = ds.Tables[0].Rows[0]["Address_city"].ToString();
        Session["oProfile_CorAddress_Postcode"] = ds.Tables[0].Rows[0]["Address_Postcode"].ToString();
        Session["oProfile_CorAddress_Created_Date"] = ds.Tables[0].Rows[0]["Address_Created_Date"].ToString();
        Session["oProfile_CorAddress_Expiry_Date"] = ds.Tables[0].Rows[0]["Expiry_Date"].ToString();
        Session["oProfile_CorAddress_Country"] = ds.Tables[0].Rows[0]["Address_Country"].ToString();



        //update profile

        string user = (string)Session["username"];
        createdbyTextBox.Text = user;
        //get office of user
       // string office = Queries.GetOffice(user);

        string profile = profileidTextBox.Text;
        string createdby = createdbyTextBox.Text;
        string venuecountry = VenueCountryDropDownList.SelectedItem.Text;
        string venue = VenueDropDownList.SelectedItem.Text;
        string venuegroup = GroupVenueDropDownList.SelectedItem.Text;
        //string mktg = Request.Form["MarketingProgramDropDownList"];//MarketingProgramDropDownList.SelectedItem.Text;
        //if (mktg == "")
        //{
        //    mktg = MarketingProgramDropDownList.Items[0].Text;

        //}
        //else
        //{
        //    mktg = Request.Form["MarketingProgramDropDownList"];
        //}
        string mktg = Request.Form["MarketingProgramDropDownList"];// MarketingProgramDropDownList.SelectedItem.Text; ////
        if (venuegroup == "Coldline" || venuegroup == "COLDLINE")
        {
            if (mktg == "")
            {
                mktg = MarketingProgramDropDownList.Items[0].Text;

                // mktg = Queries.getMarketingAbbOnMarketingProgram(venue, venuegroup, mktg);

            }
            else
            {
                mktg = Request.Form["MarketingProgramDropDownList"];
            }
        }
        else
        {
            if (mktg == "")
            {
                mktg = MarketingProgramDropDownList.Items[0].Text;

                mktg = Queries.getMarketingAbbOnMarketingProgram(venue, venuegroup, mktg);

            }
            else
            {
                mktg = Request.Form["MarketingProgramDropDownList"];
                mktg = Queries.getMarketingAbbOnMarketingProgram1(venue, venuegroup, mktg);

            }
        }
        string agents = Request.Form["AgentDropDownList"];// .SelectedItem.Text;
        //string agents1;
        if (agents == "")
        {
            agents = AgentDropDownList.Items[0].Text;
        }
        else
        {
            agents = Request.Form["AgentDropDownList"];
        }
        string agentcode = Request.Form["TONameDropDownList"];// .SelectedItem.Text;
        if (agentcode == "")
        {
            agentcode = TONameDropDownList.Items[0].Text;

        }
        else
        {
            agentcode = Request.Form["TONameDropDownList"];
        }

        string mgr;

        if (venuegroup == "Coldline" || venuegroup == "COLDLINE")
        {
            mgr = Request.Form["ManagerDropDownList"];// SelectedItem.Text;
            if (mgr == "")
            {
                mgr = ManagerDropDownList.Items[0].Text;

            }
            else
            {
                mgr = Request.Form["ManagerDropDownList"];
            }

        }
        else
        {

            mgr = agentcode;
        }





        string photoidentity;
        if (Request.Form["pidentity"] == null)
        {
            photoidentity = "";
        }
        else
        {
            photoidentity = Request.Form["pidentity"];
        }
        string card;
        if (Request.Form["card"] == null)
        {
            card = "";
        }
        else
        {
            card = Request.Form["card"];
        }


        string guestRelations = "";

        if (venuecountry == "India" || venuecountry == "INDIA")
        {
            if ((venuegroup == "Inhouse" || venuegroup == "INHOUSE") && (TextBox3.Text == "CANCELLED MEMBER" || TextBox3.Text == "Cancelled Member"))
            {
                guestRelations = "";
            }
            else if ((venuegroup == "Inhouse" || venuegroup == "INHOUSE") && (TextBox3.Text == "REVOKED MEMBER" || TextBox3.Text == "Revoked Member"))
            {
                guestRelations = "MRG";

            }
            else if ((venuegroup == "Inhouse" || venuegroup == "INHOUSE") && (TextBox2.Text == "EXPIRED WD" || TextBox2.Text == "Expired WD"))
            {
                guestRelations = "WD";

            }
            else
            {
                guestRelations = "";
            }

        }


        //member details
        string membertype1 = MemType1DropDownList.SelectedItem.Text;// .SelectedItem.Text;
        string memno1 = Memno1TextBox.Text;
        if (mktg == "T/S MEMBER" || mktg == "T/S MEMBER RCI" || mktg == "FRACTIONAL OWNER" || mktg == "FRACTIONAL OWNER RCI" || mktg == "Owner" || mktg == "OWNER" || mktg == "Member" || mktg == "MEMBER")
        {
            membertype1 = MemType1DropDownList.SelectedItem.Text;
            string memno = Memno1TextBox.Text;
            if (memno == null || memno == "")
            {
                memno1 = "";
            }
            else
            {
                memno1 = Memno1TextBox.Text;
            }

        }
        else
        {
            membertype1 = MemType1DropDownList.SelectedItem.Text;
            string memno = TypeDropDownList.SelectedItem.Text;
            if (memno == null || memno == "")
            {

                memno1 = "";
            }
            else
            {

                memno1 = TypeDropDownList.SelectedItem.Text;
            }


        }



        string membertype2 = Request.Form[MemType2DropDownList.UniqueID];// .SelectedItem.Text;
        string memno2 = Memno2TextBox.Text;


        string subVenue = Request.Form["SubVenueDropDownList"];
        if (subVenue == "" || subVenue == null)
        {
            subVenue = SubVenueDropDownList.Items[0].Text;
        }
        else
        {
            subVenue = Request.Form["SubVenueDropDownList"];
        }


        string subVenueGroup = Request.Form["SubVenueGroupDropDownList"];
        if (subVenueGroup == "" || subVenueGroup == null)
        {
            subVenueGroup = SubVenueGroupDropDownList.Items[0].Value;
        }
        else
        {
            subVenueGroup = Request.Form["SubVenueGroupDropDownList"];
        }


        string leadOffice = "";
        if (venuegroup == "Inhouse" || venuegroup == "INHOUSE")
        {
            leadOffice = "";
        }
        else if (venuegroup == "FlyBuy" || venuegroup == "FLYBUY" || venuegroup == "CallCenter")
        {
            leadOffice = Request.Form["LeadOfficeDropDownList"];
            if (leadOffice == "" || leadOffice == null)
            {
                leadOffice = LeadOfficeDropDownList.Items[0].Text;
            }
            else
            {
                leadOffice = Request.Form["LeadOfficeDropDownList"];
            }
        }



        //primary profile
        string primarytitle = PrimaryTitleDropDownList.SelectedItem.Text;
        string primaryfname = pfnameTextBox.Text.ToUpper().Replace("'", "''");
        string primaylname = plnameTextBox.Text.ToUpper().Replace("'", "''");
        string primarydob = primarydobdatepicker.Text;//Convert.ToDateTime(pdobdatepicker.Text).ToString("yyyy-MM-dd");
        string primarynationality = PrimarynationalityDropDownList.SelectedItem.Text;
        string primarycountry = primarycountryDropDownList.SelectedItem.Text;
        string npage = primaryAge.Text;
        string npdesg = pdesginationTextBox.Text.ToUpper();
        string primarylanguage;


        if (Request.Form["primarylang"] == null)
        {
            primarylanguage = "";
        }
        else
        {
            primarylanguage = Request.Form["primarylang"];

        }


        Session["pcc"] = Request.Form["primarymobileDropDownList"];//primarymobileDropDownList.SelectedItem.Text;

        if (Session["pcc"].ToString() == "")
        {
            Session["pcc"] = primarymobileDropDownList.Items[0].Text;
        }
        else
        {
            Session["pcc"] = Request.Form["primarymobileDropDownList"];

        }





        Session["paltrcc"] = Request.Form["primaryalternateDropDownList"]; //primaryalternateDropDownList.SelectedItem.Text;
        if (Session["paltrcc"].ToString() == "")
        {
            Session["paltrcc"] = primaryalternateDropDownList.Items[0].Text;
        }
        else
        {
            Session["paltrcc"] = Request.Form["primaryalternateDropDownList"];
        }
        //}
        if (pmobileTextBox.Text == "" || pmobileTextBox.Text == null)
        {
            Session["pmobile"] = "";
        }
        else
        {
            Session["pmobile"] = pmobileTextBox.Text;
        }

        if (palternateTextBox.Text == "" || palternateTextBox.Text == null)
        {
            Session["palternate"] = "";
        }
        else
        {
            Session["palternate"] = palternateTextBox.Text;
        }

        if (pemailTextBox.Text == "" || pemailTextBox.Text == null)
        {
            Session["pemail"] = "";
        }
        else
        {
            Session["pemail"] = pemailTextBox.Text.ToUpper();
        }

        if (pemail2TextBox.Text == "" || pemail2TextBox.Text == null)
        {
            Session["pemail2"] = "";
        }
        else
        {
            Session["pemail2"] = pemail2TextBox.Text.ToUpper();
        }
      
        //secondary profile

        string secondarytitle = secondarytitleDropDownList.SelectedItem.Text;
        string secondaryfname = sfnameTextBox.Text.ToUpper().Replace("'", "''");
        string secondarylname = slnameTextBox.Text.ToUpper().Replace("'", "''");
        string secondarydob = secondarydobdatepicker.Text;//Convert.ToDateTime(sdobdatepicker.Text).ToString("yyyy-MM-dd"); 
        string secondarynationality = secondarynationalityDropDownList.SelectedItem.Text;
        string secondarycountry = secondarycountryDropDownList.SelectedItem.Text;
        string nsage = secondaryAge.Text;
        string nsdesg = sdesignationTextBox.Text.ToUpper();

        string secondarylanguage;
        if (Request.Form["seclang"] == null)
        {
            secondarylanguage = "";
        }
        else
        {
            secondarylanguage = Request.Form["seclang"];

        }
        Session["scc"] = Request.Form["secondarymobileDropDownList"];//secondarymobileDropDownList.SelectedItem.Text;
        if (Session["scc"].ToString() == "")
        {
            Session["scc"] = secondarymobileDropDownList.Items[0].Text;
        }
        else
        {
            Session["scc"] = Request.Form["secondarymobileDropDownList"];
        }


        Session["saltcc"] = Request.Form["secondaryalternateDropDownList"];//secondaryalternateDropDownList.SelectedItem.Text;
        if (Session["saltcc"].ToString() == "")
        {
            Session["saltcc"] = secondaryalternateDropDownList.Items[0].Text;
        }
        else
        {
            Session["saltcc"] = Request.Form["secondaryalternateDropDownList"];

        }

        Session["priOfficecc"] = Request.Form["pofficecodeDropDownList"];
        if (Session["priOfficecc"].ToString() == "")
        {
            Session["priOfficecc"] = pofficecodeDropDownList.Items[0].Text;
        }
        else
        {
            Session["priOfficecc"] = Request.Form["pofficecodeDropDownList"];
        }
        Session["priHomecc"] = Request.Form["phomecodeDropDownList"];
        if (Session["priHomecc"].ToString() == "")
        {
            Session["priHomecc"] = phomecodeDropDownList.Items[0].Text;
        }
        else
        {
            Session["priHomecc"] = Request.Form["phomecodeDropDownList"];
        }


        Session["secOfficecc"] = Request.Form["sofficecodeDropDownList"];
        if (Session["secOfficecc"].ToString() == "")
        {
            Session["secOfficecc"] = sofficecodeDropDownList.Items[0].Text;
        }
        else
        {
            Session["secOfficecc"] = Request.Form["sofficecodeDropDownList"];
        }

        Session["sechomecc"] = Request.Form["shomecodeDropDownList"];
        if (Session["sechomecc"].ToString() == "")
        {
            Session["sechomecc"] = shomecodeDropDownList.Items[0].Text;
        }
        else
        {
            Session["sechomecc"] = Request.Form["shomecodeDropDownList"];
        }

        if (smobileTextBox.Text == "" || smobileTextBox.Text == null)
        {
            Session["smobile"] = "";
        }
        else
        {
            Session["smobile"] = smobileTextBox.Text;
        }
        if (salternateTextBox.Text == "" || salternateTextBox.Text == null)
        {
            Session["salternate"] = "";
        }
        else
        {
            Session["salternate"] = salternateTextBox.Text;
        }

        if (pofficenoTextBox.Text == "" || pofficenoTextBox.Text == null)
        {
            Session["priOfficeno"] = "";
        }
        else
        {
            Session["priOfficeno"] = pofficenoTextBox.Text;
        }

        if (phomenoTextBox.Text == "" || phomenoTextBox.Text == null)
        {
            Session["prihomeno"] = "";
        }
        else
        {
            Session["prihomeno"] = phomenoTextBox.Text;
        }




        if (sofficenoTextBox.Text == "" || sofficenoTextBox.Text == null)
        {
            Session["secOfficeno"] = "";
        }
        else
        {
            Session["secOfficeno"] = sofficenoTextBox.Text;
        }
        if (shomenoTextBox.Text == "" || shomenoTextBox.Text == null)
        {
            Session["sechomeno"] = "";
        }
        else
        {
            Session["sechomeno"] = shomenoTextBox.Text;
        }


        if (semailTextBox.Text == "" || semailTextBox.Text == null)
        {
            Session["semail"] = "";
        }
        else
        {
            Session["semail"] = semailTextBox.Text.ToUpper();
        }
        if (semail2TextBox.Text == "" || semail2TextBox.Text == null)
        {
            Session["semail2"] = "";
        }
        else
        {
            Session["semail2"] = semail2TextBox.Text.ToUpper();
        }
        
        //sub profile1


        string sp1title = sp1titleDropDownList.SelectedItem.Text;
        string sp1fname = sp1fnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp1lname = sp1lnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp1dob = sp1dobdatepicker.Text;


        string sp1nationality = sp1nationalityDropDownList.SelectedItem.Text;
        string sp1country = sp1countryDropDownList.SelectedItem.Text;
        string nsp1age = subProfile1Age.Text;


        Session["sp1cc"] = Request.Form["sp1mobileDropDownList"];//sp1mobileDropDownList.SelectedItem.Text;
        if (Session["sp1cc"].ToString() == "")
        {
            Session["sp1cc"] = sp1mobileDropDownList.Items[0].Text;
        }
        else
        {

            Session["sp1cc"] = Request.Form["sp1mobileDropDownList"];

        }


        Session["sp1altcc"] = Request.Form["sp1alternateDropDownList"];// sp1alternateDropDownList.SelectedItem.Text;

        if (Session["sp1altcc"].ToString() == "")
        {
            Session["sp1altcc"] = sp1alternateDropDownList.Items[0].Text;
        }
        else
        {
            Session["sp1altcc"] = Request.Form["sp1alternateDropDownList"]; ;
        }
        //}


        if (sp1mobileTextBox.Text == "" || sp1mobileTextBox.Text == null)
        {
            Session["sp1mobile"] = "";
        }
        else
        {
            Session["sp1mobile"] = sp1mobileTextBox.Text;
        }
        if (sp1alternateTextBox.Text == "" || sp1alternateTextBox.Text == null)
        {
            Session["sp1alternate"] = "";
        }
        else
        {
            Session["sp1alternate"] = sp1alternateTextBox.Text;
        }
        if (sp1pemailTextBox.Text == "" || sp1pemailTextBox.Text == null)
        {
            Session["sp1email"] = "";
        }
        else
        {
            Session["sp1email"] = sp1pemailTextBox.Text.ToUpper();
        }

        if (sp1pemail2TextBox.Text == "" || sp1pemail2TextBox.Text == null)
        {
            Session["sp1email2"] = "";
        }
        else
        {
            Session["sp1email2"] = sp1pemail2TextBox.Text.ToUpper();
        }

        //sub profile 2
        string sp2title = sp2titleDropDownList.SelectedItem.Text;
        string sp2fname = sp2fnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp2lname = sp2lnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp2dob = sp2dobdatepicker.Text;//Convert.ToDateTime(sp2dobdatepicker.Text).ToString("yyyy-MM-dd");
        string sp2nationality = sp2nationalityDropDownList.SelectedItem.Text;
        string sp2country = sp2countryDropDownList.SelectedItem.Text;
        string nsp2age = subProfile2Age.Text;
        Session["sp2cc"] = Request.Form["sp2mobileDropDownList"];//sp2mobileDropDownList.SelectedItem.Text;
        if (Session["sp2cc"].ToString() == "")
        {
            Session["sp2cc"] = sp2mobileDropDownList.Items[0].Text;
        }
        else
        {

            Session["sp2cc"] = Request.Form["sp2mobileDropDownList"];

        }


        Session["sp2altccc"] = Request.Form["sp2alternateDropDownList"]; //sp2alternateDropDownList.SelectedItem.Text;
        if (Session["sp2altccc"].ToString() == "")
        {
            Session["sp2altccc"] = sp2alternateDropDownList.Items[0].Text;
        }
        else
        {
            Session["sp2altccc"] = Request.Form["sp2alternateDropDownList"];

        }



        if (sp2mobileTextBox.Text == "" || sp2mobileTextBox.Text == null)
        {
            Session["sp2mobile"] = "";
        }
        else
        {
            Session["sp2mobile"] = sp2mobileTextBox.Text;

        }
        if (sp2alternateTextBox.Text == "" || sp2alternateTextBox.Text == null)
        {
            Session["sp2alternate"] = "";

        }
        else
        {
            Session["sp2alternate"] = sp2alternateTextBox.Text;

        }
        if (sp2pemailTextBox.Text == "" || sp2pemailTextBox.Text == null)
        {
            Session["sp2email"] = "";
        }
        else
        {
            Session["sp2email"] = sp2pemailTextBox.Text.ToUpper();
        }
        if (sp2pemail2TextBox.Text == "" || sp2pemail2TextBox.Text == null)
        {
            Session["sp2email2"] = "";
        }
        else
        {
            Session["sp2email2"] = sp2pemail2TextBox.Text.ToUpper();
        }


        // sub profile 3//
        string sp3title = sp3titleDropDownList.SelectedItem.Text;
        string sp3fname = sp3fnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp3lname = sp3lnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp3dob = sp3dobdatepicker.Text;//Convert.ToDateTime(sp2dobdatepicker.Text).ToString("yyyy-MM-dd");
        string sp3nationality = sp3nationalityDropDownList.SelectedItem.Text;
        string sp3country = sp3countryDropDownList.SelectedItem.Text;
        string nsp3age = subProfile3Age.Text;
        Session["sp3cc"] = Request.Form["sp3mobileDropDownList"];//sp2mobileDropDownList.SelectedItem.Text;
        if (Session["sp3cc"].ToString() == "")
        {
            Session["sp3cc"] = sp3mobileDropDownList.Items[0].Text;
        }
        else
        {

            Session["sp3cc"] = Request.Form["sp3mobileDropDownList"];

        }

        Session["sp3altccc"] = Request.Form["sp3alternateDropDownList"]; //sp2alternateDropDownList.SelectedItem.Text;
        if (Session["sp3altccc"].ToString() == "")
        {
            Session["sp3altccc"] = sp3alternateDropDownList.Items[0].Text;
        }
        else
        {
            Session["sp3altccc"] = Request.Form["sp3alternateDropDownList"];

        }
        //}


        if (sp3mobileTextBox.Text == "" || sp3mobileTextBox.Text == null)
        {
            Session["sp3mobile"] = "";
        }
        else
        {
            Session["sp3mobile"] = sp3mobileTextBox.Text;

        }
        if (sp3alternateTextBox.Text == "" || sp3alternateTextBox.Text == null)
        {
            Session["sp3alternate"] = "";

        }
        else
        {
            Session["sp3alternate"] = sp3alternateTextBox.Text;

        }
        if (sp3pemailTextBox.Text == "" || sp3pemailTextBox.Text == null)
        {
            Session["sp3email"] = "";
        }
        else
        {
            Session["sp3email"] = sp3pemailTextBox.Text.ToUpper();
        }
        if (sp3pemail2TextBox.Text == "" || sp3pemail2TextBox.Text == null)
        {
            Session["sp3email2"] = "";
        }
        else
        {
            Session["sp3email2"] = sp3pemail2TextBox.Text.ToUpper();
        }


        // sub profile 4//
        string sp4title = sp4titleDropDownList.SelectedItem.Text;
        string sp4fname = sp4fnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp4lname = sp4lnameTextBox.Text.ToUpper().Replace("'", "''");
        string sp4dob = sp4dobdatepicker.Text;//Convert.ToDateTime(sp2dobdatepicker.Text).ToString("yyyy-MM-dd");
        string sp4nationality = sp4nationalityDropDownList.SelectedItem.Text;
        string sp4country = sp4countryDropDownList.SelectedItem.Text;
        string nsp4age = subProfile4Age.Text;

        Session["sp4cc"] = Request.Form["sp4mobileDropDownList"];//sp2mobileDropDownList.SelectedItem.Text;
        if (Session["sp4cc"].ToString() == "")
        {
            Session["sp4cc"] = sp4mobileDropDownList.Items[0].Text;
        }
        else
        {

            Session["sp4cc"] = Request.Form["sp4mobileDropDownList"];

        }
        //}

        //if (sp2alternateDropDownList.SelectedIndex == 0)
        //{
        //    sp2altccc = "";
        //}
        //else
        //{

        Session["sp4altccc"] = Request.Form["sp4alternateDropDownList"]; //sp2alternateDropDownList.SelectedItem.Text;
        if (Session["sp4altccc"].ToString() == "")
        {
            Session["sp4altccc"] = sp4alternateDropDownList.Items[0].Text;
        }
        else
        {
            Session["sp4altccc"] = Request.Form["sp4alternateDropDownList"];

        }
        //}


        if (sp4mobileTextBox.Text == "" || sp4mobileTextBox.Text == null)
        {
            Session["sp4mobile"] = "";
        }
        else
        {
            Session["sp4mobile"] = sp4mobileTextBox.Text;

        }
        if (sp4alternateTextBox.Text == "" || sp4alternateTextBox.Text == null)
        {
            Session["sp4alternate"] = "";

        }
        else
        {
            Session["sp4alternate"] = sp4alternateTextBox.Text;

        }
        if (sp4pemailTextBox.Text == "" || sp4pemailTextBox.Text == null)
        {
            Session["sp4email"] = "";
        }
        else
        {
            Session["sp4email"] = sp4pemailTextBox.Text.ToUpper();
        }
        if (sp4pemail2TextBox.Text == "" || sp4pemail2TextBox.Text == null)
        {
            Session["sp4email2"] = "";
        }
        else
        {
            Session["sp4email2"] = sp4pemail2TextBox.Text.ToUpper();
        }


        //address

        string address1 = address1TextBox.Text.ToUpper().Replace("'", "''");
        string address2 = address2TextBox.Text.ToUpper().Replace("'", "''");
        string state = Request.Form["StateDropDownList"];// StateDropDownList.SelectedItem.Text;
        if (state == "")
        {
            state = StateDropDownList.Items[0].Text;
        }
        else
        {
            state = Request.Form["StateDropDownList"];


        }
        string city = cityTextBox.Text.ToUpper();
        string pincode = pincodeTextBox.Text;
        string acountry = AddCountryDropDownList.SelectedItem.Text;

        //other details

        string employmentstatus = employmentstatusDropDownList.SelectedItem.Text;
        string maritalstatus = maritalstatusDropDownList.SelectedItem.Text;
        string livingyrs = livingyrsTextBox.Text;

        //stay details
        string resort = resortTextBox.Text.ToUpper();
        string roomno = roomnoTextBox.Text.ToUpper();
        string arrivaldate = arrivaldatedatepicker.Text;
        string departuredate = departuredatedatepicker.Text;

        //guest status

        string gueststatus = guestatusDropDownList.SelectedItem.Text;
        string salesrep = toursalesrepDropDownList.SelectedItem.Text;
        string timeIn = timeinTextBox.Text;
        string timeOut = timeoutTextBox.Text;
        // string tourdate = tourdatedatepicker.Text;
        string tourdate;
        int wkno;
        if (tourdatedatepicker.Text == "" || tourdatedatepicker.Text == null || tourdatedatepicker.Text == "NaN" || tourdatedatepicker.Text == "1-1-1990")
        {
            tourdate = "";
            wkno = 0;
        }
        else
        {
            tourdate = tourdatedatepicker.Text;
            wkno = Queries.GetWkNumber(Convert.ToDateTime(tourdate));
            tourdate = Convert.ToDateTime(tourdatedatepicker.Text).ToString("dd-MM-yyyy");
        }
        string taxin = inpriceTextBox.Text.ToUpper();
        string taxirefin = inrefTextBox.Text.ToUpper();
        string taxiout = outpriceTextBox.Text.ToUpper();
        string taxirefout = outrefTextBox.Text.ToUpper();
        string ProComments = commentsTextBox.Text.ToUpper().Replace("'", "''");
        string Procomment2 = comment2.Text.ToUpper().Replace("'", "''");
        string newcompanyname = companynameTextBox.Text.ToUpper().Replace("'", "''");
        if (CheckBox1.Checked)
        {


            Session["regTerms"] = "Y";
        }
        else
        {
            Session["regTerms"] = "N";

        }

        //update
        if (String.Compare(Session["ocompanyname"].ToString(), newcompanyname) != 0)
        {
            int update = Queries.UpdateProfileCompanyName(Session["ProfileID"].ToString(), newcompanyname);
            string log3 = "Company Name changed from:" + Session["ocompanyname"].ToString() + " " + "to" + newcompanyname;
            int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Company Name Updated", Session["ocompanyname"].ToString(), newcompanyname);

        }
        else
        {
        }

        if (String.Compare(Session["opan"].ToString(), PancardspellTextBox.Text) != 0)
        {

            string log3 = "(Contract)Pan card # changed from:" + Session["opan"].ToString() + " " + "to" + PancardspellTextBox.Text;
            int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Pan Card No. Updated", Session["opan"].ToString(), PancardspellTextBox.Text);

        }
        else { }
        if (String.Compare(Session["ocogstin"].ToString(), gstinTextBox.Text) != 0)
        {

            string log3 = "(Contract)Company GSTIN # changed from:" + Session["ocogstin"].ToString() + " " + "to" + gstinTextBox.Text.ToUpper();
            int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), sContractdetailsID, log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Company GSTIN No. Updated", Session["ocogstin"].ToString(), gstinTextBox.Text);

        }
        else { }


        if (String.Compare(Session["ocompanypano"].ToString(), companypanoTextBox.Text) != 0)
        {

            string log3 = "CompanyPan card # changed from:" + Session["ocompanypano"].ToString() + " " + "to" + companypanoTextBox.Text.ToUpper();
            int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Compnay Pan Card No Updated", Session["ocompanypano"].ToString(), companypanoTextBox.Text);

        }
        else { }

        int identityexists = Queries.Identity_Proof_DetailsExists(Session["ProfileID"].ToString());
        string profileidnote = "Profile ID Details Added";
        if (identityexists == 1)
        {
            //yes
            //updated
            if (String.Compare(Session["pancardspell"].ToString(), PancardspellTextBox.Text) != 0)
            {

                string log3 = "(ID Proof)Pan card # changed from:" + Session["pancardspell"].ToString() + " " + "to" + companynameTextBox.Text.ToUpper();
                int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "(ID Proof)Pan Card No. Updated", Session["opan"].ToString(), PancardspellTextBox.Text);

            }
            else { }
            if (String.Compare(Session["cogstinospell"].ToString(), gstinTextBox.Text) != 0)
            {

                string log3 = "(ID Proof)Company GSTIN # changed from:" + Session["cogstinospell"].ToString() + " " + "to" + gstinTextBox.Text.ToUpper();
                int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log3, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "(ID Proof)Company GSTIN No.Updated", Session["ocogstin"].ToString(), gstinTextBox.Text);

            }
            else { }

            //update idenitty
            int updateproof = Queries.UpdateIdentity_Proof_Details(Session["ProfileID"].ToString(), PancardspellTextBox.Text.ToUpper(), gstinTextBox.Text.ToUpper());

        }
        else
        {
            //no
            //insert
            
            
                int insertrow = Queries.InsertIdentity_Proof_Details(Session["ProfileID"].ToString(), "", PancardspellTextBox.Text.ToUpper(), "", gstinTextBox.Text.ToUpper(), DateTime.Now.ToString());
                string log4c = "Identity Proof Details:" + " " + "Profile ID:" + Session["ProfileID"].ToString() + "," + "Pancard #:" + PancardspellTextBox.Text.ToUpper() + "," + "Co GSTIN NO:" + gstinTextBox.Text.ToUpper() + "," + "Inserted date:" + DateTime.Now.ToString();

            int insertlog4c = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log4c, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", profileidnote, "", log4c);



        }
            int updatcontractseproof = Queries.UpdateContractDetails_IndianIDProofDetails(sContractdetailsID, PancardspellTextBox.Text.ToUpper(), gstinTextBox.Text.ToUpper(), companypanoTextBox.Text.ToUpper());

        
          




        string conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        string valg = Request.Form["giftoptionDropDownList"];
        string giftdelnote = "Gift Details Deleted"; string giftaddnote = "Gift Details Added";

        SqlConnection sqlcon4 = new SqlConnection(conn);

        string query4 = "select Gift_ID_Option+'-'+GiftItem from gift where Profile_ID='" + Session["ProfileID"].ToString() + "'";//Session["ProfileID"].ToString()
        sqlcon4.Open();
        SqlCommand cmd4 = new SqlCommand(query4, sqlcon4);
        SqlDataReader reader4 = cmd4.ExecuteReader();
        while (reader4.Read())
        {
            string name = reader4.GetString(0);
            string act1 = "Deleted:" + name;
            int insertlog2 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act1, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", giftdelnote, name, "");
        }

        reader4.Close();
        sqlcon4.Close();

        SqlConnection sqlcon2 = new SqlConnection(conn);
        string query2 = "delete from gift where Profile_ID='" + Session["ProfileID"].ToString() + "'";//Session["ProfileID"].ToString()
        sqlcon2.Open();
        SqlCommand cmd2 = new SqlCommand(query2, sqlcon2);
        cmd2.ExecuteNonQuery();
        sqlcon2.Close();

        // }



        string val = Request.Form["giftoptionDropDownList"];
        if (val == "" || val == null)
        {

        }
        else
        {


            string[] value = val.Split(new Char[] { ',', '-' },
                                       StringSplitOptions.RemoveEmptyEntries);




            for (int i = 0; i < value.Length; i = i + 2)
            {
                conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
                SqlConnection sqlcon = new SqlConnection(conn);
                string query = "select Gift_Option_Name,Item from Gift_Option where Gift_Option_Name='" + value[i] + "' and Item='" + value[i + 1] + "'";
                sqlcon.Open();
                SqlCommand cmd = new SqlCommand(query, sqlcon);
                SqlDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    string giftname = reader.GetString(0);
                    string item = reader.GetString(1);


                    SqlConnection sqlcon1 = new SqlConnection(conn);
                    string query1 = "select distinct Profile_ID from Gift where Profile_ID='" + Session["ProfileID"].ToString() + "'";
                    sqlcon1.Open();
                    SqlCommand cmd1 = new SqlCommand(query1, sqlcon1);
                    SqlDataReader reader1 = cmd1.ExecuteReader();
                    if (reader1.HasRows)
                    {
                        while (reader1.Read())
                        {



                            int year = DateTime.Now.Year;
                            string giftid = Queries.GetProfileGift(office);
                            int insert = Queries.InsertGiftOption(giftid, giftname.Trim(), TextBox13.Text, TextBox22.Text, Session["ProfileID"].ToString(), item.Trim(), "");
                            int updategift = Queries.UpdateGiftValue(office, year);
                            string log11 = "gift Details:" + "gift ID:" + giftid + "," + "Gift Option:" + giftname + "," + "Voucherno:" + TextBox13.Text + "," + "Comments:" + TextBox22.Text + "," + "Profile id:" + Session["ProfileID"].ToString() + "," + "Item:" + item;
                            int insertlog11 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log11, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", giftaddnote, "", log11);



                        }
                    }
                    else
                    {


                        int year = DateTime.Now.Year;
                        string giftid = Queries.GetProfileGift(office);
                        int insert = Queries.InsertGiftOption(giftid, giftname.Trim(), TextBox13.Text, TextBox22.Text, Session["ProfileID"].ToString(), item.Trim(), "");
                        int updategift = Queries.UpdateGiftValue(office, year);
                        string log11 = "gift Details:" + "gift ID:" + giftid + "," + "Gift Option:" + giftname + "," + "Voucherno:" + TextBox13.Text + "," + "Comments:" + TextBox22.Text + "," + "Profile id:" + Session["ProfileID"].ToString() + "," + "Item:" + item;
                        int insertlog11 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log11, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", giftaddnote, "", log11);

                    }

                    reader1.Close();
                    sqlcon1.Close();


                }
                reader.Close();
                sqlcon.Close();

            }
        }

        if (String.Compare(Session["oProfile_Venue_Country"].ToString(), venuecountry) != 0)
        {
            string act = "venue country changed from:" + Session["oProfile_Venue_Country"].ToString() + "To:" + venuecountry;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Country Updated", Session["oProfile_Venue_Country"].ToString(), venuecountry);
        }
        else { }
        if (String.Compare(Session["oProfile_Venue"].ToString(), venue) != 0)
        {
            string act = "venue changed from:" + Session["oProfile_Venue"].ToString() + "To:" + venue;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Venue Updated", Session["oProfile_Venue"].ToString(), venue);
        }
        else { }
        if (String.Compare(Session["oProfile_Group_Venue"].ToString(), venuegroup) != 0)
        {
            string act = "venue group changed from:" + Session["oProfile_Group_Venue"].ToString() + "To:" + venuegroup;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Venue Group Updated", Session["oProfile_Group_Venue"].ToString(), venuegroup);
        }
        else { }
        if (String.Compare(Session["oProfile_Marketing_Program"].ToString(), mktg) != 0)
        {
            string act = "marketing prgm changed from:" + Session["oProfile_Marketing_Program"].ToString() + "To:" + mktg;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Marketing Program Updated", Session["oProfile_Marketing_Program"].ToString(), mktg);
        }
        else { }
        if (String.Compare(Session["oProfile_Agent"].ToString(), agents) != 0)
        {
            string act = "agent name changed from:" + Session["oProfile_Agent"].ToString() + "To:" + agents;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Telemarketing Agent Updated", Session["oProfile_Agent"].ToString(), agents);
        }
        else { }
        if (String.Compare(Session["oProfile_Agent_Code"].ToString(), agentcode) != 0)
        {
            string act = "To Name changed from:" + Session["oProfile_Agent_Code"].ToString() + "To:" + agentcode;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "TO Name Updated", Session["oProfile_Agent_Code"].ToString(), agentcode);
        }
        else { }
        if (String.Compare(Session["oManager"].ToString(), mgr) != 0)
        {
            string act = "manager changed from:" + Session["oManager"].ToString() + "To:" + mgr;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Manager Updated", Session["oManager"].ToString(), mgr);
        }
        else { }
        if (String.Compare(Session["oProfile_Member_Type1"].ToString(), membertype1) != 0)
        {
            string act = "membertype1 changed from:" + Session["oProfile_Member_Type1"].ToString() + "To:" + membertype1;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Member Type1 Updated", Session["oProfile_Member_Type1"].ToString(), membertype1);
        }
        else { }
        if (String.Compare(Session["ophid"].ToString(), photoidentity) != 0)
        {
            string act = "Photo Identity changed from:" + Session["ophid"].ToString() + "To:" + photoidentity;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Photo Identity Updated", Session["ophid"].ToString(), photoidentity);
        }
        else { }
        if (String.Compare(Session["ocard"].ToString(), card) != 0)
        {
            string act = "Card Holder value changed from:" + Session["ocard"].ToString() + "To:" + card;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Card Holder Updated", Session["ocard"].ToString(), card);
        }
        else { }
        if (String.Compare(Session["oProfile_Member_Number1"].ToString(), memno1) != 0)
        {
            string act = "memno1 changed from:" + Session["oProfile_Member_Number1"].ToString() + "To:" + memno1;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Member No 1 Updated", Session["oProfile_Member_Number1"].ToString(), memno1);
        }
        else { }
        if (String.Compare(Session["oProfile_Member_Type2"].ToString(), membertype2) != 0)
        {
            string act = "membertype2 changed from:" + Session["oProfile_Member_Type2"].ToString() + "To:" + membertype2;
         //   int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Member Type2 Updated", Session["oProfile_Member_Type2"].ToString(), membertype2);
        }
        else { }
        if (String.Compare(Session["oProfile_Member_Number2"].ToString(), memno2) != 0)
        {
            string act = "memno2 changed from:" + Session["oProfile_Member_Number2"].ToString() + "To:" + memno2;
          //  int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Profile Member No 2 Updated", Session["oProfile_Member_Number2"].ToString(), memno2);
        }
        else { }
        if (String.Compare(Session["oProfile_Primary_Title"].ToString(), primarytitle) != 0)
        {
            string act = "primary title changed from:" + Session["oProfile_Primary_Title"].ToString() + "To:" + primarytitle;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Title Updated", Session["oProfile_Primary_Title"].ToString(), primarytitle);
        }
        else { }
        if (String.Compare(Session["oProfile_Primary_Fname"].ToString(), primaryfname) != 0)
        {
            string act = "primary fname changed from:" + Session["oProfile_Primary_Fname"].ToString() + "To:" + primaryfname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary First Name Updated", Session["oProfile_Primary_Fname"].ToString(), primaryfname);
        }
        else { }
        if (String.Compare(Session["oProfile_Primary_Lname"].ToString(), primaylname) != 0)
        {
            string act = "primay lname changed from:" + Session["oProfile_Primary_Lname"].ToString() + "To:" + primaylname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Last Name Updated", Session["oProfile_Primary_Lname"].ToString(), primaylname);
        }
        else { }
        if (String.Compare(Session["oProfile_Primary_DOB"].ToString(), primarydob) != 0)
        {
            string act = "primary dob changed from:" + Session["oProfile_Primary_DOB"].ToString() + "To:" + primarydob;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary DOB Updated", Session["oProfile_Primary_DOB"].ToString(), primarydob);
        }
        else { }
        if (String.Compare(Session["oProfile_Primary_Nationality"].ToString(), primarynationality) != 0)
        {
            string act = "primary nationality changed from:" + Session["oProfile_Primary_Nationality"].ToString() + "To:" + primarynationality;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Nationlaity Updated", Session["oProfile_Primary_Nationality"].ToString(), primarynationality);
        }
        else { }
        if (String.Compare(Session["oProfile_Primary_Country"].ToString(), primarycountry) != 0)
        {
            string act = "primary country changed from:" + Session["oProfile_Primary_Country"].ToString() + "To:" + primarycountry;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Country Updated", Session["oProfile_Primary_Country"].ToString(), primarycountry);
        }
        else { }
        if (String.Compare(Session["opage"].ToString(), npage) != 0)
        {
            string act = "primary age changed from:" + Session["opage"].ToString() + "To:" + npage;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Age Updated", Session["opage"].ToString(), npage);
        }
        else { }
        if (String.Compare(Session["opdesignation"].ToString(), npdesg) != 0)
        {
            string act = "primary designation changed from:" + Session["opdesignation"].ToString() + "To:" + npdesg;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Designation Updated", Session["opdesignation"].ToString(), npdesg);
        }
        else { }
        if (String.Compare(Session["oplang"].ToString(), primarylanguage) != 0)
        {
            string act = "primary Language changed from:" + Session["oplang"].ToString() + "To:" + primarylanguage;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Language Updated", Session["oplang"].ToString(), primarylanguage);
        }
        else { }
        if (String.Compare(Session["oPrimary_CC"].ToString(), Session["pcc"].ToString()) != 0)
        {
            string act = "primary mobile code changed from:" + Session["oPrimary_CC"].ToString() + "To:" + Session["pcc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Mobile Code Updated", Session["oPrimary_CC"].ToString(), Session["pcc"].ToString());
        }
        else { }
        if (String.Compare(Session["oPrimary_Mobile"].ToString(), Session["pmobile"].ToString()) != 0)
        {
            string act = "primary mobile no changed from:" + Session["oPrimary_Mobile"].ToString() + "To:" + Session["pmobile"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Mobile No Updated", Session["oPrimary_Mobile"].ToString(), Session["pmobile"].ToString());
        }
        else { }
        if (String.Compare(Session["oPrimary_Alt_CC"].ToString(), Session["paltrcc"].ToString()) != 0)
        {
            string act = "primary mobile changed from:" + Session["oPrimary_Alt_CC"].ToString() + "To:" + Session["paltrcc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Alternate Code Updated", Session["oPrimary_Alt_CC"].ToString(), Session["paltrcc"].ToString());
        }
        else { }
        if (String.Compare(Session["oPrimary_Alternate"].ToString(), Session["palternate"].ToString()) != 0)
        {
            string act = "primary alternate no changed from:" + Session["oPrimary_Alternate"].ToString() + "To:" + Session["palternate"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Alternate No. Updated", Session["oPrimary_Alternate"].ToString(), Session["palternate"].ToString());
        }
        else { }

        if (String.Compare(Session["opriOfficecc"].ToString(), Session["priOfficecc"].ToString()) != 0)
        {
            string act = "primary office cc changed from:" + Session["opriOfficecc"].ToString() + "To:" + Session["priOfficecc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Office Code Updated", Session["opriOfficecc"].ToString(), Session["priOfficecc"].ToString());
        }
        else { }


        if (String.Compare(Session["oprihomecc"].ToString(), Session["priHomecc"].ToString()) != 0)
        {
            string act = "primary Home cc changed from:" + Session["oprihomecc"].ToString() + "To:" + Session["priHomecc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Home Code Updated", Session["oprihomecc"].ToString(), Session["priHomecc"].ToString());
        }
        else { }



        if (String.Compare(Session["opriOfficeno"].ToString(), Session["priOfficeno"].ToString()) != 0)
        {
            string act = "primary office no changed from:" + Session["opriOfficeno"].ToString() + "To:" + Session["priOfficeno"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Office No. Updated", Session["opriOfficeno"].ToString(), Session["priOfficeno"].ToString());
        }
        else { }


        if (String.Compare(Session["oprihomeno"].ToString(), Session["prihomeno"].ToString()) != 0)
        {
            string act = "primary home no changed from:" + Session["oprihomeno"].ToString() + "To:" + Session["prihomeno"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Home No. Updated", Session["oprihomeno"].ToString(), Session["prihomeno"].ToString());
        }
        else { }


        if (String.Compare(Session["oPrimary_Email"].ToString(), Session["pemail"].ToString()) != 0)
        {
            string act = "primary email changed from:" + Session["oPrimary_Email"].ToString() + "To:" + Session["pemail"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Email1 Updated", Session["oPrimary_Email"].ToString(), Session["pemail"].ToString());
        }
        else { }
        if (String.Compare(Session["oPrimary_Email2"].ToString(), Session["pemail2"].ToString()) != 0)
        {
            string act = "primary email2 changed from:" + Session["oPrimary_Email2"].ToString() + "To:" + Session["pemail2"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Email2 Updated", Session["oPrimary_Email2"].ToString(), Session["pemail2"].ToString());
        }
        else { }

        if (String.Compare(Session["oProfile_Secondary_Title"].ToString(), secondarytitle) != 0)
        {
            string act = "secondary title changed from:" + Session["oProfile_Secondary_Title"].ToString() + "To:" + secondarytitle;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Title Updated", Session["oProfile_Secondary_Title"].ToString(), secondarytitle);
        }
        else { }
        if (String.Compare(Session["oProfile_Secondary_Fname"].ToString(), secondaryfname) != 0)
        {
            string act = "secondary fname changed from:" + Session["oProfile_Secondary_Fname"].ToString() + "To:" + secondaryfname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary First Name Updated", Session["oProfile_Secondary_Fname"].ToString(), secondaryfname);
        }
        else { }
        if (String.Compare(Session["oProfile_Secondary_Lname"].ToString(), secondarylname) != 0)
        {
            string act = "secondary lname changed from:" + Session["oProfile_Secondary_Lname"].ToString() + "To:" + secondarylname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Last Name Updated", Session["oProfile_Secondary_Lname"].ToString(), secondarylname);
        }
        else { }
        if (String.Compare(Session["oProfile_Secondary_DOB"].ToString(), secondarydob) != 0)
        {
            string act = "secondary dob changed from:" + Session["oProfile_Secondary_DOB"].ToString() + "To:" + secondarydob;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary DOB Updated", Session["oProfile_Secondary_DOB"].ToString(), secondarydob);
        }
        else { }

        if (String.Compare(Session["oProfile_Secondary_Nationality"].ToString(), secondarynationality) != 0)
        {
            string act = "secondary nationality changed from:" + Session["oProfile_Secondary_Nationality"].ToString() + "To:" + secondarynationality;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Nationality Updated", Session["oProfile_Secondary_Nationality"].ToString(), secondarynationality);
        }
        else { }
        if (String.Compare(Session["osage"].ToString(), nsage) != 0)
        {
            string act = "secondary age changed from:" + Session["osage"].ToString() + "To:" + nsage;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Age Updated", Session["osage"].ToString(), nsage);
        }
        else { }
        if (String.Compare(Session["osdesignation"].ToString(), nsdesg) != 0)
        {
            string act = "secondary designation changed from:" + Session["osdesignation"].ToString() + "To:" + nsdesg;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Designation Updated", Session["osdesignation"].ToString(), nsdesg);
        }
        else { }
        if (String.Compare(Session["oslang"].ToString(), secondarylanguage) != 0)
        {
            string act = "secondary Language changed from:" + Session["oslang"].ToString() + "To:" + secondarylanguage;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Language Updated", Session["oslang"].ToString(), secondarylanguage);
        }
        else { }
        if (String.Compare(Session["oProfile_Secondary_Country"].ToString(), secondarycountry) != 0)
        {
            string act = "secondary country changed from:" + Session["oProfile_Secondary_Country"].ToString() + "To:" + secondarycountry;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Country Updated", Session["oProfile_Secondary_Country"].ToString(), secondarycountry);
        }
        else { }
        if (String.Compare(Session["oSecondary_CC"].ToString(), Session["scc"].ToString()) != 0)
        {
            string act = "secondary mobile code changed from:" + Session["oSecondary_CC"].ToString() + "To:" + Session["scc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Mobile Code Updated", Session["oSecondary_CC"].ToString(), Session["scc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSecondary_Mobile"].ToString(), Session["smobile"].ToString()) != 0)
        {
            string act = "secondary mobile no changed from:" + Session["oSecondary_Mobile"].ToString() + "To:" + Session["smobile"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Mobile No. Updated", Session["oSecondary_Mobile"].ToString(), Session["smobile"].ToString());

        }
        else { }
        if (String.Compare(Session["oSecondary_Alt_CC"].ToString(), Session["saltcc"].ToString()) != 0)
        {
            string act = "secondary alternaet num code changed from:" + Session["oSecondary_Alt_CC"].ToString() + "To:" + Session["saltcc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Alternate Code Updated", Session["oSecondary_Alt_CC"].ToString(), Session["saltcc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSecondary_Alternate"].ToString(), Session["salternate"].ToString()) != 0)
        {
            string act = "secondary alternate no changed from:" + Session["oSecondary_Alternate"].ToString() + "To:" + Session["salternate"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Alternate No Updated", Session["oSecondary_Alternate"].ToString(), Session["salternate"].ToString());
        }
        else { }

        if (String.Compare(Session["osecOfficecc"].ToString(), Session["secOfficecc"].ToString()) != 0)
        {
            string act = "secondary office cc changed from:" + Session["osecOfficecc"].ToString() + "To:" + Session["secOfficecc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Office Code Updated", Session["osecOfficecc"].ToString(), Session["secOfficecc"].ToString());
        }
        else { }

        if (String.Compare(Session["osechomecc"].ToString(), Session["sechomecc"].ToString()) != 0)
        {
            string act = "secondary home cc changed from:" + Session["osechomecc"].ToString() + "To:" + Session["sechomecc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Home Code Updated", Session["osechomecc"].ToString(), Session["sechomecc"].ToString());
        }
        else { }


        if (String.Compare(Session["osecofficeno"].ToString(), Session["secOfficeno"].ToString()) != 0)
        {
            string act = "secondary office no changed from:" + Session["osecofficeno"].ToString() + "To:" + Session["secOfficeno"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Office No. Updated", Session["osecofficeno"].ToString(), Session["secOfficeno"].ToString());
        }
        else { }

        if (String.Compare(Session["osechomeno"].ToString(), Session["sechomeno"].ToString()) != 0)
        {
            string act = "secondary home no changed from:" + Session["osechomeno"].ToString() + "To:" + Session["sechomeno"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Home No. Updated", Session["osechomeno"].ToString(), Session["sechomeno"].ToString());
        }
        else { }

        if (String.Compare(Session["oSecondary_Email"].ToString(), Session["semail"].ToString()) != 0)
        {
            string act = "secondary email changed from:" + Session["oSecondary_Email"].ToString() + "To:" + Session["semail"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Email1 Updated", Session["oSecondary_Email"].ToString(), Session["semail"].ToString());
        }
        else { }
        if (String.Compare(Session["oSecondary_Email2"].ToString(), Session["semail2"].ToString()) != 0)
        {
            string act = "secondary email2 changed from:" + Session["oSecondary_Email"].ToString() + "To:" + Session["semail2"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Secondary Email2 Updated", Session["oSecondary_Email2"].ToString(), Session["semail2"].ToString());
        }
        else { }
        if (String.Compare(Session["oSub_Profile1_Title"].ToString(), sp1title) != 0)
        {
            string act = "subprofile1 title changed from:" + Session["oSub_Profile1_Title"].ToString() + "To:" + sp1title;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Title Updated", Session["oSub_Profile1_Title"].ToString(), sp1title);
        }
        else { }
        if (String.Compare(Session["oSub_Profile1_Fname"].ToString(), sp1fname) != 0)
        {
            string act = "subprofile1 fname changed from:" + Session["oSub_Profile1_Fname"].ToString() + "To:" + sp1fname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 First Name Updated", Session["oSub_Profile1_Fname"].ToString(), sp1fname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile1_Lname"].ToString(), sp1lname) != 0)
        {
            string act = "subprofile1 lname changed from:" + Session["oSub_Profile1_Lname"].ToString() + "To:" + sp1lname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Last Name Updated", Session["oSub_Profile1_Lname"].ToString(), sp1lname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile1_DOB"].ToString(), sp1dob) != 0)
        {
            string act = "subprofile1 dob changed from:" + Session["oSub_Profile1_DOB"].ToString() + "To:" + sp1dob;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 DOB Updated", Session["oSub_Profile1_DOB"].ToString(), sp1dob);
        }
        else { }
        if (String.Compare(Session["oSub_Profile1_Nationality"].ToString(), sp1nationality) != 0)
        {
            string act = "subprofile1 nationality changed from:" + Session["oSub_Profile1_Nationality"].ToString() + "To:" + sp1nationality;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Nationlaity Updated", Session["oSub_Profile1_Nationality"].ToString(), sp1nationality);
        }
        else { }
        if (String.Compare(Session["osp1age"].ToString(), nsp1age) != 0)
        {
            string act = "subprofile1 age changed from:" + Session["osp1age"].ToString() + "To:" + nsp1age;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Age Updated", Session["osp1age"].ToString(), nsp1age);
        }
        else { }
        if (String.Compare(Session["oSub_Profile1_Country"].ToString(), sp1country) != 0)
        {
            string act = "subprofile1 country changed from:" + Session["oSub_Profile1_Country"].ToString() + "To:" + sp1country;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Country Updated", Session["oSub_Profile1_Country"].ToString(), sp1country);
        }
        else { }
        if (String.Compare(Session["oSubprofile1_CC"].ToString(), Session["sp1cc"].ToString()) != 0)
        {
            string act = "subprofile1 mobile code changed from:" + Session["oSubprofile1_CC"].ToString() + "To:" + Session["sp1cc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Mobile Code Updated", Session["oSubprofile1_CC"].ToString(), Session["sp1cc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile1_Mobile"].ToString(), Session["sp1mobile"].ToString()) != 0)
        {
            string act = "subprofile1 mobile no changed from:" + Session["oSubprofile1_Mobile"].ToString() + "To:" + Session["sp1mobile"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Mobile No Updated", Session["oSubprofile1_Mobile"].ToString(), Session["sp1mobile"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile1_Alt_CC"].ToString(), Session["sp1altcc"].ToString()) != 0)
        {
            string act = "subprofile1 alternate no code changed from:" + Session["oSubprofile1_Alt_CC"].ToString() + "To:" + Session["sp1altcc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Alternate Code Updated", Session["oSubprofile1_Alt_CC"].ToString(), Session["sp1altcc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile1_Alternate"].ToString(), Session["sp1alternate"].ToString()) != 0)
        {
            string act = "subprofile1 alternate changed from:" + Session["oSubprofile1_Alternate"].ToString() + "To:" + Session["sp1alternate"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Alternate No Updated", Session["oSubprofile1_Alternate"].ToString(), Session["sp1alternate"].ToString());
        }
        else { }


        if (String.Compare(Session["oSubprofile1_Email"].ToString(), Session["sp1email"].ToString()) != 0)
        {
            string act = "subprofile1 email changed from:" + Session["oSubprofile1_Email"].ToString() + "To:" + Session["sp1email"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Email1 Updated", Session["oSubprofile1_Email"].ToString(), Session["sp1email"].ToString());
        }
        else { }

        if (String.Compare(Session["oSubprofile1_Email2"].ToString(), Session["sp1email2"].ToString()) != 0)
        {
            string act = "subprofile1 email2 changed from:" + Session["oSubprofile1_Email2"].ToString() + "To:" + Session["sp1email2"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile1 Email2 Updated", Session["oSubprofile1_Email2"].ToString(), Session["sp1email2"].ToString());
        }
        else { }

        if (String.Compare(Session["oSub_Profile2_Title"].ToString(), sp2title) != 0)
        {
            string act = "subprofile2 title changed from:" + Session["oSub_Profile2_Title"].ToString() + "To:" + sp2title;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Title Updated", Session["oSub_Profile2_Title"].ToString(), sp2title);
        }
        else { }
        if (String.Compare(Session["oSub_Profile2_Fname"].ToString(), sp2fname) != 0)
        {
            string act = "subprofile2 fname changed from:" + Session["oSub_Profile2_Fname"].ToString() + "To:" + sp2fname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 First Name Updated", Session["oSub_Profile2_Fname"].ToString(), sp2fname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile2_Lname"].ToString(), sp2lname) != 0)
        {
            string act = "subprofile2 lname changed from:" + Session["oSub_Profile2_Lname"].ToString() + "To:" + sp2lname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Last Name Updated", Session["oSub_Profile2_Lname"].ToString(), sp2lname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile2_DOB"].ToString(), sp2dob) != 0)
        {
            string act = "subprofile2 dob changed from:" + Session["oSub_Profile2_DOB"].ToString() + "To:" + sp2dob;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 DOB Updated", Session["oSub_Profile2_DOB"].ToString(), sp2dob);
        }
        else { }
        if (String.Compare(Session["oSub_Profile2_Nationality"].ToString(), sp2nationality) != 0)
        {
            string act = "subprofile2 nationality changed from:" + Session["oSub_Profile2_Nationality"].ToString() + "To:" + sp2nationality;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Nationlaity Updated", Session["oSub_Profile2_Nationality"].ToString(), sp2nationality);
        }
        else { }
        if (String.Compare(Session["osp2age"].ToString(), nsp2age) != 0)
        {
            string act = "subprofile2 age changed from:" + Session["osp2age"].ToString() + "To:" + nsp2age;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Age Updated", Session["osp2age"].ToString(), nsp2age);
        }
        else { }
        if (String.Compare(Session["oSub_Profile2_Country"].ToString(), sp2country) != 0)

        {
            string act = "subprofile2 country changed from:" + Session["oSub_Profile2_Country"].ToString() + "To:" + sp2country;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Country Updated", Session["oSub_Profile2_Country"].ToString(), sp2country);
        }
        else { }
        if (String.Compare(Session["oSubprofile2_CC"].ToString(), Session["sp2cc"].ToString()) != 0)
        {
            string act = "subprofile2 mobile code changed from:" + Session["oSubprofile2_CC"].ToString() + "To:" + Session["sp2cc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Mobile Code Updated", Session["oSubprofile2_CC"].ToString(), Session["sp2cc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile2_Mobile"].ToString(), Session["sp2mobile"].ToString()) != 0)
        {
            string act = "subprofile2 mobile no changed from:" + Session["oSubprofile2_Mobile"].ToString() + "To:" + Session["sp2mobile"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Mobile No. Updated", Session["oSubprofile2_Mobile"].ToString(), Session["sp2mobile"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile2_Alt_CC"].ToString(), Session["sp2altccc"].ToString()) != 0)
        {
            string act = "subprofile2 alternate no code changed from:" + Session["oSubprofile2_Alt_CC"].ToString() + "To:" + Session["sp2altccc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Alternate Code Updated", Session["oSubprofile2_Alt_CC"].ToString(), Session["sp2altccc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile2_Alternate"].ToString(), Session["sp2alternate"].ToString()) != 0)
        {
            string act = "subprofile2 alternate no changed from:" + Session["oSubprofile2_Alternate"].ToString() + "To:" + Session["sp2alternate"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Alternate No. Updated", Session["oSubprofile2_Alternate"].ToString(), Session["sp2alternate"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile2_Email"].ToString(), Session["sp2email"].ToString()) != 0)
        {
            string act = "subprofile2 email changed from:" + Session["oSubprofile2_Email"].ToString() + "To:" + Session["sp2email"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Email1 Updated", Session["oSubprofile2_Email"].ToString(), Session["sp2email"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile2_Email2"].ToString(), Session["sp2email2"].ToString()) != 0)
        {
            string act = "subprofile2 email2 changed from:" + Session["oSubprofile2_Email2"].ToString() + "To:" + Session["sp2email2"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile2 Email2 Updated", Session["oSubprofile2_Email2"].ToString(), Session["sp2email2"].ToString());
        }
        else { }

        // sub profile 3//
        if (String.Compare(Session["oSub_Profile3_Title"].ToString(), sp3title) != 0)
        {
            string act = "subprofile3 title changed from:" + Session["oSub_Profile3_Title"].ToString() + "To:" + sp3title;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Title Updated", Session["oSub_Profile3_Title"].ToString(), sp3title);
        }
        else { }
        if (String.Compare(Session["oSub_Profile3_Fname"].ToString(), sp3fname) != 0)
        {
            string act = "subprofile3 fname changed from:" + Session["oSub_Profile3_Fname"].ToString() + "To:" + sp3fname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 First Name Updated", Session["oSub_Profile3_Fname"].ToString(), sp3fname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile3_Lname"].ToString(), sp3lname) != 0)
        {
            string act = "subprofile3 lname changed from:" + Session["oSub_Profile3_Lname"].ToString() + "To:" + sp3lname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Last Name Updated", Session["oSub_Profile3_Lname"].ToString(), sp3lname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile3_DOB"].ToString(), sp3dob) != 0)
        {
            string act = "subprofile3 dob changed from:" + Session["oSub_Profile3_DOB"].ToString() + "To:" + sp3dob;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 DOB Updated", Session["oSub_Profile3_DOB"].ToString(), sp3dob);
        }
        else { }
        if (String.Compare(Session["oSub_Profile3_Nationality"].ToString(), sp3nationality) != 0)
        {
            string act = "subprofile3 nationality changed from:" + Session["oSub_Profile3_Nationality"].ToString() + "To:" + sp3nationality;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Nationlaity Updated", Session["oSub_Profile3_Nationality"].ToString(), sp3nationality);
        }
        else { }
        if (String.Compare(Session["osp3age"].ToString(), nsp3age) != 0)
        {
            string act = "subprofile3 age changed from:" + Session["osp3age"].ToString() + "To:" + nsp3age;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Age Updated", Session["osp3age"].ToString(), nsp3age);
        }
        else { }
        if (String.Compare(Session["oSub_Profile3_Country"].ToString(), sp3country) != 0)

        {
            string act = "subprofile3 country changed from:" + Session["oSub_Profile3_Country"].ToString() + "To:" + sp3country;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Country Updated", Session["oSub_Profile3_Country"].ToString(), sp3country);
        }
        else { }
        if (String.Compare(Session["oSubprofile3_CC"].ToString(), Session["sp3cc"].ToString()) != 0)
        {
            string act = "subprofile3 mobile code changed from:" + Session["oSubprofile3_CC"].ToString() + "To:" + Session["sp3cc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Mobile Code Updated", Session["oSubprofile3_CC"].ToString(), Session["sp3cc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile3_Mobile"].ToString(), Session["sp3mobile"].ToString()) != 0)
        {
            string act = "subprofile3 mobile no changed from:" + Session["oSubprofile3_Mobile"].ToString() + "To:" + Session["sp3mobile"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Mobile No. Updated", Session["oSubprofile3_Mobile"].ToString(), Session["sp3mobile"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile3_Alt_CC"].ToString(), Session["sp3altccc"].ToString()) != 0)
        {
            string act = "subprofile3 alternate no code changed from:" + Session["oSubprofile3_Alt_CC"].ToString() + "To:" + Session["sp3altccc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Alternate Code Updated", Session["oSubprofile3_Alt_CC"].ToString(), Session["sp3altccc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile3_Alternate"].ToString(), Session["sp3alternate"].ToString()) != 0)
        {
            string act = "subprofile3 alternate no changed from:" + Session["oSubprofile3_Alternate"].ToString() + "To:" + Session["sp3alternate"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Alternate No. Updated", Session["oSubprofile3_Alternate"].ToString(), Session["sp3alternate"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile3_Email"].ToString(), Session["sp3email"].ToString()) != 0)
        {
            string act = "subprofile3 email changed from:" + Session["oSubprofile3_Email"].ToString() + "To:" + Session["sp3email"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Email1 Updated", Session["oSubprofile3_Email"].ToString(), Session["sp3email"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile3_Email2"].ToString(), Session["sp3email2"].ToString()) != 0)
        {
            string act = "subprofile3 email2 changed from:" + Session["oSubprofile3_Email2"].ToString() + "To:" + Session["sp3email2"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile3 Email2 Updated", Session["oSubprofile3_Email2"].ToString(), Session["sp3email2"].ToString());
        }
        else { }

        // sub profile 4//
        if (String.Compare(Session["oSub_Profile4_Title"].ToString(), sp4title) != 0)
        {
            string act = "subprofile4 title changed from:" + Session["oSub_Profile4_Title"].ToString() + "To:" + sp4title;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Title Updated", Session["oSub_Profile4_Title"].ToString(), sp4title);
        }
        else { }
        if (String.Compare(Session["oSub_Profile4_Fname"].ToString(), sp4fname) != 0)
        {
            string act = "subprofile4 fname changed from:" + Session["oSub_Profile4_Fname"].ToString() + "To:" + sp4fname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 First Name Updated", Session["oSub_Profile4_Fname"].ToString(), sp4fname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile4_Lname"].ToString(), sp4lname) != 0)
        {
            string act = "subprofile4 lname changed from:" + Session["oSub_Profile4_Lname"].ToString() + "To:" + sp4lname;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Last Name Updated", Session["oSub_Profile4_Lname"].ToString(), sp4lname);
        }
        else { }
        if (String.Compare(Session["oSub_Profile4_DOB"].ToString(), sp4dob) != 0)
        {
            string act = "subprofile4 dob changed from:" + Session["oSub_Profile4_DOB"].ToString() + "To:" + sp4dob;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 DOB Updated", Session["oSub_Profile4_DOB"].ToString(), sp4dob);
        }
        else { }
        if (String.Compare(Session["oSub_Profile4_Nationality"].ToString(), sp4nationality) != 0)
        {
            string act = "subprofile4 nationality changed from:" + Session["oSub_Profile4_Nationality"].ToString() + "To:" + sp4nationality;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Nationality Updated", Session["oSub_Profile4_Nationality"].ToString(), sp4nationality);
        }
        else { }
        if (String.Compare(Session["osp4age"].ToString(), nsp4age) != 0)
        {
            string act = "subprofile4 age changed from:" + Session["osp4age"].ToString() + "To:" + nsp4age;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Age Updated", Session["osp4age"].ToString(), nsp4age);
        }
        else { }
        if (String.Compare(Session["oSub_Profile4_Country"].ToString(), sp4country) != 0)

        {
            string act = "subprofile4 country changed from:" + Session["oSub_Profile4_Country"].ToString() + "To:" + sp4country;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Country Updated", Session["oSub_Profile4_Country"].ToString(), sp4country);
        }
        else { }
        if (String.Compare(Session["oSubprofile4_CC"].ToString(), Session["sp4cc"].ToString()) != 0)
        {
            string act = "subprofile4 mobile code changed from:" + Session["oSubprofile4_CC"].ToString() + "To:" + Session["sp4cc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Mobile Code Updated", Session["oSubprofile4_CC"].ToString(), Session["sp4cc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile4_Mobile"].ToString(), Session["sp4mobile"].ToString()) != 0)
        {
            string act = "subprofile4 mobile no changed from:" + Session["oSubprofile4_Mobile"].ToString() + "To:" + Session["sp4mobile"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Mobile No. Updated", Session["oSubprofile4_Mobile"].ToString(), Session["sp4mobile"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile4_Alt_CC"].ToString(), Session["sp4altccc"].ToString()) != 0)
        {
            string act = "subprofile4 alternate no code changed from:" + Session["oSubprofile4_Alt_CC"].ToString() + "To:" + Session["sp4altccc"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Alternate Code Updated", Session["oSubprofile4_Alt_CC"].ToString(), Session["sp4altccc"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile4_Alternate"].ToString(), Session["sp4alternate"].ToString()) != 0)
        {
            string act = "subprofile4 alternate no changed from:" + Session["oSubprofile4_Alternate"].ToString() + "To:" + Session["sp4alternate"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Alternate No. Updated", Session["oSubprofile4_Alternate"].ToString(), Session["sp4alternate"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile4_Email"].ToString(), Session["sp4email"].ToString()) != 0)
        {
            string act = "subprofile4 email changed from:" + Session["oSubprofile4_Email"].ToString() + "To:" + Session["sp4email"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Email1 Updated", Session["oSubprofile4_Email"].ToString(), Session["sp4email"].ToString());
        }
        else { }
        if (String.Compare(Session["oSubprofile4_Email2"].ToString(), Session["sp4email2"].ToString()) != 0)
        {
            string act = "subprofile4 email2 changed from:" + Session["oSubprofile4_Email2"].ToString() + "To:" + Session["sp4email2"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Profile4 Email2 Updated", Session["oSubprofile4_Email2"].ToString(), Session["sp4email2"].ToString());
        }
        else { }



        if (String.Compare(Session["oProfile_Address_Line1"].ToString(), address1) != 0)

        {
            string act = "address1 changed from:" + Session["oProfile_Address_Line1"].ToString() + "To:" + address1;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Address Line 1 Updated", Session["oProfile_Address_Line1"].ToString(), address1);
        }
        else { }
        if (String.Compare(Session["oProfile_Address_Line2"].ToString(), address2) != 0)
        {
            string act = "address2 changed from:" + Session["oProfile_Address_Line2"].ToString() + "To:" + address2;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Address Line 2 Updated", Session["oProfile_Address_Line2"].ToString(), address2);
        }
        else { }
        if (String.Compare(Session["oProfile_Address_State"].ToString(), state) != 0)
        {
            string act = "state changed from:" + Session["oProfile_Address_State"].ToString() + "To:" + state;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "State Updated", Session["oProfile_Address_State"].ToString(), state);
        }
        else { }
        if (String.Compare(Session["oProfile_Address_city"].ToString(), city) != 0)
        {
            string act = "city changed from:" + Session["oProfile_Address_city"].ToString() + "To:" + city;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "City Updated", Session["oProfile_Address_city"].ToString(), city);
        }
        else { }
        if (String.Compare(Session["oProfile_Address_Postcode"].ToString(), pincode) != 0)
        {
            string act = "pincode changed from:" + Session["oProfile_Address_Postcode"].ToString() + "To:" + pincode;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Postal Code Updated", Session["oProfile_Address_Postcode"].ToString(), pincode);
        }
        else { }
        if (String.Compare(Session["oProfile_Address_Country"].ToString(), acountry) != 0)
        {
            string act = "Address Country changed from:" + Session["oProfile_Address_Country"].ToString() + "To:" + acountry;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Country Updated", Session["oProfile_Address_Country"].ToString(), acountry);
        }
        else { }
        if (String.Compare(Session["oProfile_Employment_status"].ToString(), employmentstatus) != 0)
        {
            string act = "employment status changed from:" + Session["oProfile_Employment_status"].ToString() + "To:" + employmentstatus;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Primary Employment status Updated", Session["oProfile_Employment_status"].ToString(), employmentstatus);
        }
        else { }
        if (String.Compare(Session["oProfile_Marital_status"].ToString(), maritalstatus) != 0)
        {
            string act = "marital status changed from:" + Session["oProfile_Marital_status"].ToString() + "To:" + maritalstatus;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Martial Status Updated", Session["oProfile_Marital_status"].ToString(), maritalstatus);
        }
        else { }
        if (String.Compare(Session["oProfile_NOY_Living_as_couple"].ToString(), livingyrs) != 0)
        {
            string act = "livingyrs changed from:" + Session["oProfile_NOY_Living_as_couple"].ToString() + "To:" + livingyrs;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Living Years Updated", Session["oProfile_NOY_Living_as_couple"].ToString(), livingyrs);
        }
        else { }
        if (String.Compare(Session["oProfile_Stay_Resort_Name"].ToString(), resort) != 0)
        {
            string act = "resort changed from:" + Session["oProfile_Stay_Resort_Name"].ToString() + "To:" + resort;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Resort Name Updated", Session["oProfile_Stay_Resort_Name"].ToString(), resort);
        }
        else { }
        if (String.Compare(Session["oProfile_Stay_Resort_Room_Number"].ToString(), roomno) != 0)
        {
            string act = "roomno changed from:" + Session["oProfile_Stay_Resort_Room_Number"].ToString() + "To:" + roomno;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Resort Room No Updated", Session["oProfile_Stay_Resort_Room_Number"].ToString(), roomno);
        }
        else { }
        if (String.Compare(Session["oProfile_Stay_Arrival_Date"].ToString(), arrivaldate) != 0)
        {
            string act = "arrival date changed from:" + Session["oProfile_Stay_Arrival_Date"].ToString() + "To:" + arrivaldate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Arrival Date Updated", Session["oProfile_Stay_Arrival_Date"].ToString(), arrivaldate);
        }
        else { }
        if (String.Compare(Session["oProfile_Stay_Departure_Date"].ToString(), departuredate) != 0)
        {
            string act = "departure date changed from:" + Session["oProfile_Stay_Departure_Date"].ToString() + "To:" + departuredate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Departure Date Updated", Session["oProfile_Stay_Departure_Date"].ToString(), departuredate);
        }
        else { }
        if (String.Compare(Session["oTour_Details_Guest_Status"].ToString(), gueststatus) != 0)
        {
            string act = "guest status changed from:" + Session["oTour_Details_Guest_Status"].ToString() + "To:" + gueststatus;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Guest Status Updated", Session["oTour_Details_Guest_Status"].ToString(), gueststatus);
        }
        else { }
        if (String.Compare(Session["oTour_Details_Guest_Sales_Rep"].ToString(), salesrep) != 0)

        {
            string act = "salesrep changed from:" + Session["oTour_Details_Guest_Sales_Rep"].ToString() + "To:" + salesrep;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sales Rep Updated", Session["oTour_Details_Guest_Sales_Rep"].ToString(), salesrep);
        }
        else { }
        if (String.Compare(Session["oTour_Details_Sales_Deck_Check_In"].ToString(), timeIn) != 0)
        {
            string act = "time In changed from:" + Session["oTour_Details_Sales_Deck_Check_In"].ToString() + "To:" + timeIn;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "CheckIn Time Updated", Session["oTour_Details_Sales_Deck_Check_In"].ToString(), timeIn);
        }
        else { }

        if (String.Compare(Session["oTour_Details_Sales_Deck_Check_Out"].ToString(), timeOut) != 0)
        {
            string act = "time Out changed from:" + Session["oTour_Details_Sales_Deck_Check_Out"].ToString() + "To:" + timeOut;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "CheckOut Time Updated", Session["oTour_Details_Sales_Deck_Check_Out"].ToString(), timeOut);
        }
        else { }
        if (String.Compare(Session["oTour_Details_Tour_Date"].ToString(), tourdate) != 0)
        {
            string act = "tour date changed from:" + Session["oTour_Details_Tour_Date"].ToString() + "To:" + tourdate;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Tour Date Updated", Session["oTour_Details_Tour_Date"].ToString(), tourdate);
        }
        else { }
        if (String.Compare(Session["tourweekno"].ToString(), wkno.ToString()) != 0)
        {
            string act = "week num changed from:" + Session["tourweekno"].ToString() + "To:" + wkno.ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Week No. Updated", Session["tourweekno"].ToString(), wkno.ToString());
        }
        else { }
        if (String.Compare(Session["oTour_Details_Taxi_In_Price"].ToString(), taxin) != 0)
        {
            string act = "taxi in price changed from:" + Session["oTour_Details_Taxi_In_Price"].ToString() + "To:" + taxin;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Taxi In Price Updated", Session["oTour_Details_Taxi_In_Price"].ToString(), taxin);
        }
        else { }
        if (String.Compare(Session["oTour_Details_Taxi_In_Ref"].ToString(), taxirefin) != 0)
        {
            string act = "taxi reference in changed from:" + Session["oTour_Details_Taxi_In_Ref"].ToString() + "To:" + taxirefin;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Taxi In Ref Updated", Session["oTour_Details_Taxi_In_Ref"].ToString(), taxirefin);
        }
        else { }
        if (String.Compare(Session["oTour_Details_Taxi_Out_Price"].ToString(), taxiout) != 0)
        {
            string act = "taxi outprice changed from:" + Session["oTour_Details_Taxi_Out_Price"].ToString() + "To:" + taxiout;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Taxi Out Price Updated", Session["oTour_Details_Taxi_Out_Price"].ToString(), taxiout);
        }
        else { }

        if (String.Compare(Session["oTour_Details_Taxi_Out_Ref"].ToString(), taxirefout) != 0)
        {
            string act = "taxi reference out changed from:" + Session["oTour_Details_Taxi_Out_Ref"].ToString() + "To:" + taxirefout;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Taxi Out Ref Updated", Session["oTour_Details_Taxi_Out_Ref"].ToString(), taxirefout);
        }
        else { }

        if (String.Compare(Session["oComments"].ToString(), ProComments) != 0)
        {
            string act = "Profile Comments changed from:" + Session["oComments"].ToString() + "To:" + ProComments;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Comments Updated", Session["oComments"].ToString(), ProComments);
        }
        else { }


        if (String.Compare(Session["ocomment2"].ToString(), Procomment2) != 0)
        {
            string act = "Profile Comment2 changed from:" + Session["ocomment2"].ToString() + "To:" + Procomment2;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Comments2 Updated", Session["ocomment2"].ToString(), Procomment2);
        }
        else { }

        if (String.Compare(Session["oregTerms"].ToString(), Session["regTerms"].ToString()) != 0)
        {
            string act = "Registration Terms changed from:" + Session["oregTerms"].ToString() + "To:" + Session["regTerms"].ToString();
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Reg Terms1 Updated", Session["oregTerms"].ToString(), Session["regTerms"].ToString());
        }
        else { }
        if (String.Compare(Session["SubVenue"].ToString(), subVenue) != 0)
        {
            string act = "Sub Venue changed from:" + Session["SubVenue"].ToString() + "To:" + subVenue;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Lead Source Updated", Session["Lead_Source"].ToString(), subVenue);
        }
        else { }
        if (String.Compare(Session["Lead_Source"].ToString(), guestRelations) != 0)
        {
            string act = "Lead Source changed from:" + Session["Lead_Source"].ToString() + "To:" + guestRelations;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Lead Source Updated", Session["Lead_Source"].ToString(), guestRelations);
        }
        else { }

        if (String.Compare(Session["Sub_Venue_Group"].ToString(), subVenueGroup) != 0)
        {
            string act = "Sub Venue Group changed from:" + Session["Sub_Venue_Group"].ToString() + "To:" + subVenueGroup;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Sub Venue Group Updated", Session["Sub_Venue_Group"].ToString(), subVenueGroup);
        }
        else { }
        if (String.Compare(Session["leadOffice"].ToString(), leadOffice) != 0)
        {
            string act = "Lead Office changed from:" + Session["leadOffice"].ToString() + "To:" + leadOffice;
            int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Lead Office Updated", Session["leadOffice"].ToString(), leadOffice);
        }
        else { }

        if (GroupVenueDropDownList.SelectedItem.Text == "Coldline")
        {

        }
        else
        {

            //update profile
            int updateprofile = Queries.UpdateProfile(Session["ProfileID"].ToString(), venuecountry, venue, venuegroup, mktg, agents, agentcode, membertype1, memno1, membertype2, memno2, employmentstatus, maritalstatus, livingyrs, mgr, photoidentity, card, ProComments, "", subVenue, Session["regTerms"].ToString(), "", Procomment2, subVenueGroup, leadOffice);
            int updateLeadSource = Queries.leadSource(Session["ProfileID"].ToString(), guestRelations);
            int tour = Queries.UpdateTourDetailsInhouse(Session["ProfileID"].ToString(), gueststatus, salesrep, tourdate, timeIn, timeOut, wkno);
        }
        int primary = Queries.UpdateProfilePrimary(Session["ProfileID"].ToString(), primarytitle, primaryfname, primaylname, primarydob, primarynationality, primarycountry, npage, npdesg, primarylanguage);
        string secondarypnote1 = "Secondary Profile Details Added";
        string sp1note1 = "Sub Profile1 Details Added"; string sp2note1 = "Sub Profile2 Details Added";
        string sp3note1 = "Sub Profile3 Details Added"; string sp4note1 = "Sub Profile4 Details Added";
        if (secondarytitle == "")
        {

        }
        else
        {
            string connn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(connn);

            string query = "select * from Profile_Secondary where Profile_ID = '" + Session["ProfileID"].ToString() + "'";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.HasRows)
            {
                int secondary = Queries.UpdateProfileSecondary(Session["ProfileID"].ToString(), secondarytitle, secondaryfname, secondarylname, secondarydob, secondarynationality, secondarycountry, nsage, nsdesg, secondarylanguage);
            }
            else
            {
                int year = DateTime.Now.Year;
                string secondaryprofileid = Queries.GetSecondaryProfileID(office);
                int secondary = Queries.InsertSecondaryProfile(secondaryprofileid, secondarytitle, secondaryfname, secondarylname, secondarydob, secondarynationality, secondarycountry, Session["ProfileID"].ToString(), nsage, nsdesg, secondarylanguage);
                int updates = Queries.UpdateSecondaryValue(office, year);

                string log3 = "secondary details:" + "secondary id:" + secondaryprofileid + "," + "title:" + secondarytitle + "," + "Fname:" + secondaryfname + "," + "Lname:" + secondarylname + "," + "DOB:" + secondarydob + "," + "nationality:" + secondarynationality + "," + "Country:" + secondarycountry + "," + "Profiel ID:" + Session["ProfileID"].ToString() + "Age:" + nsage + "," + "Designation:" + nsdesg + "," + "Languages spoken:" + secondarylanguage;
                int insertlog3 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log3, user, DateTime.Now.ToString(), "Indian_contracts.aspx", secondarypnote1, "", log3);

            }
            reader.Close();
            sqlcon.Close();
        }
            
            if (sp1title == "")
        {

        }
        else
        {
            string connn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(connn);

            string query = "select * from Sub_Profile1 where Profile_ID = '" + Session["ProfileID"].ToString() + "'";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.HasRows)
            {
                int sp1 = Queries.UpdateSubProfile1(Session["ProfileID"].ToString(), sp1title, sp1fname, sp1lname, sp1dob, sp1nationality, sp1country, nsp1age);
            }
            else
            {
                int year = DateTime.Now.Year;
                string subprofile1id = Queries.GetSubProfile1ID(office);
                int subprofielid = Queries.InsertSub_Profile1(subprofile1id, sp1title, sp1fname, sp1lname, sp1dob, sp1nationality, sp1country, Session["ProfileID"].ToString(), nsp1age);
                int updatesp1 = Queries.UpdateSubprofile1Value(office, year);


                string log5 = "sub profile1 details:" +   "sp1 id:" + subprofile1id + "," + "title:" + sp1title + "," + "Fname:" + sp1fname + "," + "Lname:" + sp1lname + "," + "DOB:" + sp1dob + "," + "nationality:" + sp1nationality + "," + "Country:" + sp1country + "," + "Profiel ID:" + Session["ProfileID"].ToString();
                int insertlog5 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log5, user, DateTime.Now.ToString(), "Indian_contracts.aspx", sp1note1, "", log5);
            }
            reader.Close();
            sqlcon.Close();
        }

         
            if (sp2title == "")
        {

        }
        else
        {
            string connn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(connn);

            string query = "select * from Sub_Profile2 where Profile_ID = '" + Session["ProfileID"].ToString() + "'";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.HasRows)
            {
                int sp2 = Queries.UpdateSubProfile2(Session["ProfileID"].ToString(), sp2title, sp2fname, sp2lname, sp2dob, sp2nationality, sp2country, nsp2age);
            }
            else
            {
                int year = DateTime.Now.Year;
                string subprofile2id = Queries.GetSubProfile2ID(office);
                int subprofielid2 = Queries.InsertSub_Profile2(subprofile2id, sp2title, sp2fname, sp2lname, sp2dob, sp2nationality, sp2country, Session["ProfileID"].ToString(), nsp2age);
                int updatesp2 = Queries.UpdateSubprofile2Value(office, year);

                string log6 = "sub profile2 details:" + " " + "sp2 id:" + subprofile2id + "," + "title:" + sp2title + "," + "Fname:" + sp2fname + "," + "Lname:" + sp2lname + "," + "DOB:" + sp2dob + "," + "nationality:" + sp2nationality + "," + "Country:" + sp2country + "," + "Profiel ID:" + Session["ProfileID"].ToString();
                int insertlog6 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log6, user, DateTime.Now.ToString(), "Indian_contracts.aspx", sp2note1, "", log6);
            }
            reader.Close();
            sqlcon.Close();
        }

        
            if (sp3title == "")
        {

        }
        else
        {
            string connn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(connn);

            string query = "select * from Sub_Profile3 where Profile_ID = '" + Session["ProfileID"].ToString() + "'";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.HasRows)
            {
                int sp3 = Queries.UpdateSubProfile3(Session["ProfileID"].ToString(), sp3title, sp3fname, sp3lname, sp3dob, sp3nationality, sp3country, nsp3age);

            }
            else
            {
                int year = DateTime.Now.Year;
                string subprofile3id = Queries.GetSubProfile3ID(office);
                int subprofielid3 = Queries.InsertSub_Profile3(subprofile3id, sp3title, sp3fname, sp3lname, sp3dob, sp3nationality, sp3country, Session["ProfileID"].ToString(), nsp3age);
                int updatesp3 = Queries2.UpdateSubprofile3Value(office, year);

                string log12 = "sub profile3 details:" + " " + "sp3 id:" + subprofile3id + "," + "title:" + sp3title + "," + "Fname:" + sp3fname + "," + "Lname:" + sp3lname + "," + "DOB:" + sp3dob + "," + "nationality:" + sp3nationality + "," + "Country:" + sp3country + "," + "Profiel ID:" + Session["ProfileID"].ToString();
                int insertlog12 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log12, user, DateTime.Now.ToString(), "Indian_contracts.aspx", sp3note1, "", log12);
            }
            reader.Close();
            sqlcon.Close();
        }
            if (sp4title == "")
        {

        }
        else
        {
            string connn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(connn);

            string query = "select * from Sub_Profile4 where Profile_ID = '" + Session["ProfileID"].ToString() + "'";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.HasRows)
            {
                int sp4 = Queries.UpdateSubProfile4(Session["ProfileID"].ToString(), sp4title, sp4fname, sp4lname, sp4dob, sp4nationality, sp4country, nsp4age);
            }
            else
            {
                int year = DateTime.Now.Year;
                string subprofile4id = Queries.GetSubProfile4ID(office);
                int subprofielid4 = Queries.InsertSub_Profile4(subprofile4id, sp4title, sp4fname, sp4lname, sp4dob, sp4nationality, sp4country, Session["ProfileID"].ToString(), nsp4age);
                int updatesp4 = Queries2.UpdateSubprofile4Value(office, year);


                string log13 = "sub profile4 details:" + " " + "sp4 id:" + subprofile4id + "," + "title:" + sp4title + "," + "Fname:" + sp4fname + "," + "Lname:" + sp4lname + "," + "DOB:" + sp4dob + "," + "nationality:" + sp4nationality + "," + "Country:" + sp4country + "," + "Profiel ID:" + Session["ProfileID"].ToString();
                int insertlog13 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log13, user, DateTime.Now.ToString(), "Indian_contracts.aspx", sp4note1, "", log13);
            }
            reader.Close();
            sqlcon.Close();
        }
           

            int address = Queries.UpdateProfileAddress(Session["ProfileID"].ToString(), address1, address2, state, city, pincode, acountry);
        // int phone = Queries.UpdatePhone(Session["ProfileID"].ToString(), Session["pcc"].ToString(), Session["pmobile"].ToString(), Session["paltrcc"].ToString(), Session["palternate"].ToString(), Session["scc"].ToString(), Session["smobile"].ToString(), Session["saltcc"].ToString(), Session["salternate"].ToString(), Session["sp1cc"].ToString(), Session["sp1mobile"].ToString(), Session["sp1altcc"].ToString(), Session["sp1alternate"].ToString(), Session["sp2cc"].ToString(), Session["sp2mobile"].ToString(), Session["sp2altccc"].ToString(), Session["sp2alternate"].ToString(), Session["sp3cc"].ToString(), Session["sp3mobile"].ToString(), Session["sp4cc"].ToString(), Session["sp4mobile"].ToString(), Session["sp3altccc"].ToString(), Session["sp3alternate"].ToString(), Session["sp4altccc"].ToString(), Session["sp4alternate"].ToString(), Session["priOfficecc"].ToString(), Session["priOfficeno"].ToString(), Session["secOfficecc"].ToString(), Session["secOfficeno"].ToString(),"","","","");
        int phone = Queries.UpdatePhone(profile, Session["pcc"].ToString(), Session["pmobile"].ToString(), Session["paltrcc"].ToString(), Session["palternate"].ToString(), Session["scc"].ToString(), Session["smobile"].ToString(), Session["saltcc"].ToString(), Session["salternate"].ToString(), Session["sp1cc"].ToString(), Session["sp1mobile"].ToString(), Session["sp1altcc"].ToString(), Session["sp1alternate"].ToString(), Session["sp2cc"].ToString(), Session["sp2mobile"].ToString(), Session["sp2altccc"].ToString(), Session["sp2alternate"].ToString(), Session["sp3cc"].ToString(), Session["sp3mobile"].ToString(), Session["sp4cc"].ToString(), Session["sp4mobile"].ToString(), Session["sp3altccc"].ToString(), Session["sp3alternate"].ToString(), Session["sp4altccc"].ToString(), Session["sp4alternate"].ToString(), Session["priOfficecc"].ToString(), Session["priOfficeno"].ToString(), Session["secOfficecc"].ToString(), Session["secOfficeno"].ToString(), Session["priHomecc"].ToString(), Session["prihomeno"].ToString(), Session["sechomecc"].ToString(), Session["sechomeno"].ToString());
        int email = Queries.UpdateEmail(Session["ProfileID"].ToString(), Session["pemail"].ToString(), Session["semail"].ToString(), Session["sp1email"].ToString(), Session["sp2email"].ToString(), Session["pemail2"].ToString(), Session["semail2"].ToString(), Session["sp1email2"].ToString(), Session["sp2email2"].ToString(), Session["sp3email"].ToString(), Session["sp3email2"].ToString(), Session["sp4email"].ToString(), Session["sp4email2"].ToString());
        int stay = Queries.UpdateProfileStay(Session["ProfileID"].ToString(), resort, roomno, arrivaldate, departuredate);
     //   int tour = Queries.UpdateTourDetails(Session["ProfileID"].ToString(), gueststatus, salesrep, tourdate, timeIn, timeOut, taxin, taxirefin, taxiout, taxirefout, "", wkno);

        string cadd1 = cadd1TextBox.Text.Replace("'", "''");
        string cadd2 = cadd2TextBox.Text.Replace("'", "''");

        string ccity = ccityTextBox.Text;
        string cpincode = cpincodeTextBox.Text;
        string cornote1 = "Correspondence Address Details Added";
        string ccountry = ccountryDropDownList.SelectedItem.Text;//.SelectedItem.Text;
        string cstate = Request.Form["cstateDropDownList"];
        if (cstate == "" || cstate == null)
        {
            cstate = cstateDropDownList.Items[0].Text;
        }
        else
        {
            cstate = Request.Form["cstateDropDownList"];


        }

        if (cadd1 == "" && cadd2 == "" && ccity == "" && cpincode == "" && ccountry == "" && (cstate == null || cstate == ""))
        {

        }
        else
        {
            int correxists = Queries.Contract_Correspondence_AddressExists(Session["ProfileID"].ToString());
            if (correxists == 1)
            {
                if (String.Compare(Session["oProfile_CorAddress_Line1"].ToString(), cadd1) != 0)

                {
                    string act = "Correspondence address1 changed from:" + Session["oProfile_CorAddress_Line1"].ToString() + "To:" + cadd1;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Correspondence Address Line 1 Updated", Session["oProfile_CorAddress_Line1"].ToString(), cadd1);
                }
                else { }
                if (String.Compare(Session["oProfile_CorAddress_Line2"].ToString(), cadd2) != 0)
                {
                    string act = "Correspondence address2 changed from:" + Session["oProfile_CorAddress_Line2"].ToString() + "To:" + cadd2;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Correspondence Address Line 2 Updated", Session["oProfile_CorAddress_Line2"].ToString(), cadd2);
                }
                else { }
                if (String.Compare(Session["oProfile_CorAddress_State"].ToString(), cstate) != 0)
                {
                    string act = "Correspondence state changed from:" + Session["oProfile_CorAddress_State"].ToString() + "To:" + cstate;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Correspondence Address State Updated", Session["oProfile_CorAddress_State"].ToString(), cstate);
                }
                else { }
                if (String.Compare(Session["oProfile_CorAddress_city"].ToString(), ccity) != 0)
                {
                    string act = "Correspondence city changed from:" + Session["oProfile_CorAddress_city"].ToString() + "To:" + ccity;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Correspondence Address City Updated", Session["oProfile_CorAddress_city"].ToString(), ccity);
                }
                else { }
                if (String.Compare(Session["oProfile_CorAddress_Postcode"].ToString(), cpincode) != 0)
                {
                    string act = "Correspondence pincode changed from:" + Session["oProfile_CorAddress_Postcode"].ToString() + "To:" + cpincode;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Correspondence Address Post Code Updated", Session["oProfile_CorAddress_Postcode"].ToString(), cpincode);
                }
                else { }
                if (String.Compare(Session["oProfile_CorAddress_Country"].ToString(), ccountry) != 0)
                {
                    string act = "Correspondence Address Country changed from:" + Session["oProfile_CorAddress_Country"].ToString() + "To:" + ccountry;
                    int insertlog1 = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", act, user, DateTime.Now.ToString(), "Indian_contracts.aspx", "Correspondence Address Country Updated", Session["oProfile_CorAddress_Country"].ToString(), ccountry);
                }
                else { }

                int addressCoress = Queries.UpdateProfileAddressCorres(profile, cadd1, cadd2, cstate, ccity, cpincode, ccountry);
                int updatecontid = Queries.UpdateProfileAddressCorresContractdetailsID(profile, sContractdetailsID);
            }
            else
            {
                string caddress_ID = Queries.GetContract_Correspondence_Address_ID(office);
                int corraddress = Queries.InsertContract_Correspondence_Address(caddress_ID, cadd1, cadd2, cstate, ccity, cpincode, ccountry, Session["ProfileID"].ToString(), sContractdetailsID, DateTime.Now, "");
                string log4c = "Correspondence Address details:" + " " + "address  id:" + caddress_ID + "," + "address1:" + cadd1 + "," + "address2:" + cadd2 + "," + "state:" + cstate + "," + "city:" + ccity + "," + "pincode:" + cpincode + "," + "Country: " + ccountry + "," + "Created Date:" + DateTime.Now + "," + "Profile ID:" + Session["ProfileID"].ToString() + "Contractdetails_ID:"+sContractdetailsID;
                int insertlog4c = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), "", log4c, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", cornote1, "", log4c);
                int updatepointgeno = Queries.UpdateContract_Correspondence_Address_ID(office);
            }
        }




            Response.Redirect(Request.RawUrl);



    }
    protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GridView1.EditIndex = e.NewEditIndex;
       // gvbind();
    }
    protected void GridView1_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //int installmentid = Convert.ToInt32(GridView1.DataKeys[e.RowIndex].Value.ToString());
        //GridViewRow row = (GridViewRow)GridView1.Rows[e.RowIndex];

        //Label lblID = (Label)row.FindControl("lblID");
        ////TextBox txtname=(TextBox)gr.cell[].control[];  
        //TextBox textName = (TextBox)row.Cells[0].Controls[0];
        //TextBox textadd = (TextBox)row.Cells[1].Controls[0];
        //TextBox textc = (TextBox)row.Cells[2].Controls[0];
        ////TextBox textadd = (TextBox)row.FindControl("txtadd");  
        ////TextBox textc = (TextBox)row.FindControl("txtc");  
        //GridView1.EditIndex = -1;
        //string stor_id = GridView1.DataKeys[e.RowIndex].Values["stor_id"].ToString();
        //TextBox   stor_name = (TextBox)GridView1.Rows[e.RowIndex].FindControl("stor_name");
        //TextBox stor_address = (TextBox)GridView1.Rows[e.RowIndex].FindControl("txtaddress");
        //TextBox city = (TextBox)gridView.Rows[e.RowIndex].FindControl("txtcity");
        //TextBox state = (TextBox)gridView.Rows[e.RowIndex].FindControl("txtstate");
        //TextBox zip = (TextBox)gridView.Rows[e.RowIndex].FindControl("txtzip");
        //////SqlCommand cmd = new SqlCommand("SELECT * FROM detail", conn);  
        ////SqlCommand cmd = new SqlCommand("update detail set name='" + textName.Text + "',address='" + textadd.Text + "',country='" + textc.Text + "'where id='" + userid + "'", conn);
        ////cmd.ExecuteNonQuery();
        ////conn.Close();
        ////gvbind();

    }
    protected void GridView1_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
     //   GridView1.PageIndex = e.NewPageIndex;
        //gvbind();
    }
    protected void GridView1_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
       // GridView1.EditIndex = -1;
        //gvbind();
    }
    [WebMethod]
    public static string primaryl(string prid)
    {
       
        string JSON = "{\n \"names\":[";
      
        
        SqlDataReader reader = Queries.LoadPrimaryLang(prid);
      if(reader.HasRows)
        {
            while (reader.Read())
            {
                string name = reader.GetString(0);

                string[] arr = name.Split(',');
                for (int i = 0; i < arr.Length; i++)
                {

                    JSON += "[\"" + arr[i] + "\"],";
                }
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";

        }
      else
        {
            JSON += "[\"" + "" + "\"],";
         
              JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";


        }
        

        return JSON;
    }

    [WebMethod]
    public static string Secondarylang(string prid)
    {

        string JSON = "{\n \"names\":[";
        SqlDataReader reader = Queries.LoadSecLang(prid);
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string name = reader.GetString(0);

                string[] arr = name.Split(',');
                for (int i = 0; i < arr.Length; i++)
                {

                    JSON += "[\"" + arr[i] + "\"],";
                }
            }

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" +"" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
            return JSON;
    }


    [WebMethod]
    public static string PhotoIdentity(string prid)
    {

        string JSON = "{\n \"names\":[";
        SqlDataReader reader = Queries.LoadPhotoID(prid);
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string name = reader.GetString(0);

                string[] arr = name.Split(',');
                for (int i = 0; i < arr.Length; i++)
                {

                    JSON += "[\"" + arr[i] + "\"],";
                }
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";


        }

        return JSON;
    }
    [WebMethod]
    public static string CardType(string prid)
    {

        string JSON = "{\n \"names\":[";
        SqlDataReader reader = Queries.LoadCardType(prid);
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string name = reader.GetString(0);

                string[] arr = name.Split(',');
                for (int i = 0; i < arr.Length; i++)
                {

                    JSON += "[\"" + arr[i] + "\"],";
                }
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";


        }

        return JSON;
    }



    [WebMethod]
    public static string getMarketingProgram(string venue, string venueGroup, string profileID)
    {
        if (venueGroup == "Coldline" || venueGroup == "COLDLINE")
        {
            String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(conn);
            string JSON = "{\n \"names\":[";
            sqlcon.Open();

            string query = "select distinct Marketing_Program_Name from Marketing_Program join Venue_Group vg on vg.Venue_group_ID=Marketing_Program.Venue_Group_ID join venue v on v.Venue_ID= vg.Venue_ID where Marketing_Program_Status = 'active' and Marketing_Program_Name not in(select Profile_Marketing_Program   from Profile where Profile_ID ='" + profileID + "' ) and vg.Venue_Group_Name='" + venueGroup + "' and v.Venue_Name= '" + venue + "'";
            SqlCommand sql = new SqlCommand(query, sqlcon);

            SqlDataReader reader = sql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    string name = reader.GetString(0);
                    JSON += "[\"" + name + "\",\"" + name + "\"],";
                }
                JSON = JSON.Substring(0, JSON.Length - 1);
                JSON += "] \n}";
            }
            else
            {
                JSON += "[\"" + "" + "\"],";
                JSON = JSON.Substring(0, JSON.Length - 1);
                JSON += "] \n}";
            }

            sqlcon.Close();
            return JSON;
        }
        else
        {


            String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
            SqlConnection sqlcon = new SqlConnection(conn);
            string JSON = "{\n \"names\":[";
            sqlcon.Open();

            string query = "select distinct Marketing_Program_Name,Marketing_Program_abbrv from Marketing_Program join Venue_Group vg on vg.Venue_group_ID=Marketing_Program.Venue_Group_ID join venue v on v.Venue_ID= vg.Venue_ID where Marketing_Program_Status = 'active' and Marketing_Program_Name not in(select Profile_Marketing_Program   from Profile where Profile_ID ='" + profileID + "' ) and vg.Venue_Group_Name='" + venueGroup + "' and v.Venue_Name= '" + venue + "'";
            SqlCommand sql = new SqlCommand(query, sqlcon);

            SqlDataReader reader = sql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    string name = reader.GetString(0);
                    string Marketing_Program_abbrv = reader.GetString(1);
                    JSON += "[\"" + name + "\",\"" + Marketing_Program_abbrv + "\"],";
                }
                JSON = JSON.Substring(0, JSON.Length - 1);
                JSON += "] \n}";
            }
            else
            {
                JSON += "[\"" + "" + "\"],";
                JSON = JSON.Substring(0, JSON.Length - 1);
                JSON += "] \n}";
            }

            sqlcon.Close();
            return JSON;
        }
    }

    [WebMethod]
    public static string getSubVenue(string venue, string venueGroup)
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        string query = "select svi.SVenue_India_Name from sub_venue_india svi join Venue_Group vg on vg.Venue_Group_ID = svi.GroupVenue_ID join venue v on v.Venue_ID = vg.Venue_ID where vg.Venue_Group_Name = '" + venueGroup + "' and v.Venue_Name = '" + venue + "' and svi.SVenue_India_Status = 'Active' order by 1; ";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string SVenue_India_Name = reader.GetString(0);
                JSON += "[\"" + SVenue_India_Name + "\"],";


            }

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }

        sqlcon.Close();
        return JSON;



    }

    [WebMethod]
    public static string getAffiliate()
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        string JSON = "{\n \"names\":[";
        sqlcon.Open();

        string query = "select Affiliate_Type,currency from Finance_Details_Indian where ContractNo='"+HttpContext.Current.Session["contractno"].ToString()+ "'";
        SqlCommand sql = new SqlCommand(query, sqlcon);

        SqlDataReader reader = sql.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string name = reader.GetString(0);
                JSON += "[\"" + name + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
       
        sqlcon.Close();
        return JSON;
    }

    [WebMethod]
    public static string LoadManagersOnVenue(string venue)
    {

        string JSON = "{\n \"names\":[";


        SqlDataReader reader = Queries.LoadManagersOnVenue1(venue,office);
        if(reader.HasRows)
        {
            while (reader.Read())
            {
                string mn = reader.GetString(0);

                JSON += "[\"" + mn + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
       

        return JSON;
    }

    [WebMethod]
    public static string LoadAgentsOnVenuegrp(string venue, string vgrp)
    {

        string JSON = "{\n \"names\":[";

        if (vgrp == "Coldline")
        {
            SqlDataReader reader = Queries.LoadAgentsOnVenue1(venue,office);
            while (reader.Read())
            {
                string ag = reader.GetString(0);

                JSON += "[\"" + ag + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            SqlDataReader reader = Queries.GetSalesRepOnlyVenue(venue);
            while (reader.Read())
            {
                string ag = reader.GetString(0);

                JSON += "[\"" + ag + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }

        return JSON;
    }



    [WebMethod]
    public static string LoadTOOnVenueNVGrp(string venue, string vgrp)
    {

        string JSON = "{\n \"names\":[";

        if (vgrp == "Coldline")
        {
            SqlDataReader reader = Queries.LoadTOOPCOnVenue1(venue,office);
            while (reader.Read())
            {
                string tom = reader.GetString(0);

                JSON += "[\"" + tom + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";

            return JSON;
        }
        else
        {
            SqlDataReader reader = Queries.LoadTOOPCOnVenueNGrp(venue);
            while (reader.Read())
            {
                string tom = reader.GetString(0);

                JSON += "[\"" + tom + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";

            return JSON;

        }
    }


    [WebMethod]
    public static string LoadCountryCode(string country)
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        string query = " select Country_Code from Country  where country_name ='" + country + "' union all select Country_Code from Country  where country_name !='" + country + "';";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {

                string countryCode = reader.GetString(0);



                JSON += "[\"" + countryCode + "\"],";


            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
       
        sqlcon.Close();
        return JSON;



    }
    [WebMethod]
    public static string LoadAllCountryCode(string country)
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        string query = " select Country_Code from Country  where country_name ='" + country + "' union all select Country_Code from Country  where country_name !='" + country + "';";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        while (reader.Read())
        {

            string countryCode = reader.GetString(0);



            JSON += "[\"" + countryCode + "\"],";


        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";
        sqlcon.Close();
        return JSON;



    }


    [WebMethod]
    public static string LoadStates(string country)
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        string query = "select s.State_Name from state s join Country c on s.State_Country=c.Country_Name where c.Country_Name='" + country + "'";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {

                string stateName = reader.GetString(0);



                JSON += "[\"" + stateName + "\"],";


            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";


        }
        sqlcon.Close();
        return JSON;





    }


    [WebMethod]
    public static string LoadSalesRepOnVenue(string venue, string country)
    {
        string JSON = "{\n \"names\":[";


        SqlDataReader reader = Queries.GetSalesRepOnVenue(venue, country);
        if(reader.HasRows)
        {
            while (reader.Read())
            {
                string sr = reader.GetString(0);

                JSON += "[\"" + sr + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
       else
        {
            JSON += "[\"" + "" + "\"],";

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }

        return JSON;

    }


    [WebMethod]
    public static string loadRegTerms()
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        string query = "select RegTerms from profile p where Profile_ID='" +HttpContext.Current.Session["ProfileID"].ToString() + "';";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {

                string RegTerms = reader.GetString(0);



                JSON += "[\"" + RegTerms + "\"],";


            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";


        }
        sqlcon.Close();
        return JSON;



    }
    [WebMethod]
    public static string LoadFinancemethod( string ContractDetails_ID)
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
      
        string query = "select distinct Finance_Name from FinanceMethod where Finance_Status = 'active' and office = '" + office + "' and Finance_Name not in(select Finance_Type from Finance_Details_Indian where ContractDetails_ID = '" + ContractDetails_ID + "') ";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string sr = reader.GetString(0);

                JSON += "[\"" + sr + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
       
        sqlcon.Close();
        return JSON;

    }

    [WebMethod]
    public static string LoadFinancemethod1(string ContractDetails_ID,string finance_type)
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        int q = Queries.CheckFinanceIndianDetailsExists1(ContractDetails_ID);//, finance_type);
        if (q == 1)
        {
            string query = "select Finance_Type,finance_method from Finance_Details_Indian where ContractDetails_ID='" + ContractDetails_ID + "' union  select distinct Finance_Name, 'Finance' from FinanceMethod where Finance_Status = 'active' and office = '" + office + "' and Finance_Name not in(select Finance_Type from Finance_Details_Indian where ContractDetails_ID = '" + ContractDetails_ID + "')  ";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                string sr = reader.GetString(0);
                string sr1 = reader.GetString(1);
                JSON += "[\"" + sr + "\",\"" + sr1 + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
            sqlcon.Close();

        }
        else
        {
            string query = "select Finance_Type from Finance_Details_Indian where ContractDetails_ID='" + ContractDetails_ID + "' union  select distinct Finance_Name from FinanceMethod where Finance_Status = 'active' and office = '" + office + "' and Finance_Name not in(select Finance_Type from Finance_Details_Indian where ContractDetails_ID = '" + ContractDetails_ID + "') order by Finance_Type desc";
            sqlcon.Open();
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                string sr = reader.GetString(0);

                JSON += "[\"" + sr + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
            sqlcon.Close();
        }
       
        return JSON;

    }

    [WebMethod]
    public static string LoadManagementCharges(string club, string year, string curr)
    {
            
        String JSON = "{\n \"names\":[";

        SqlDataReader reader = Queries.LoadMCChartTimeshare(club, year, curr);
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string sr1 = reader.GetString(0);
                string sr2 = reader.GetString(1);
                string sr3 = reader.GetString(2);
                string sr4 = reader.GetString(3);

                JSON += "[\"" + sr1 + "\",\"" + sr2 + "\",\"" + sr3 + "\",\"" + sr4 + "\"],";
               
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
      
        return JSON;

    }

    [WebMethod]
    public static string LoadManagementChargesFract(string club, string year, string curr, string wk, string type)
    {

        String JSON = "{\n \"names\":[";

        SqlDataReader reader = Queries.LoadMCChartfractionalOnEdit(club, year, curr, wk, type);
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string sr1 = reader.GetString(0);
                string sr2 = reader.GetString(1);
                string sr3 = reader.GetString(2);
                string sr4 = reader.GetString(3);

                JSON += "[\"" + sr1 + "\",\"" + sr2 + "\",\"" + sr3 + "\",\"" + sr4 + "\"],";
                
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
     
        return JSON;

    }
    protected void Button7_Click(object sender, EventArgs e)
    {
        DataSet dsct = Queries.LoadContractNoDetails(contractnoTextBox.Text);
        SOR_AdditionalName(ContractdetailsIDTextBox.Text);
     
        DataSet dsfd = Queries.LoadFinanceContractDetails(ContractdetailsIDTextBox.Text);
        string Finance_Details = dsfd.Tables[0].Rows[0]["Finance_Method"].ToString();
        DataSet ds = Queries.LoadProfielDetailsFull(Session["ProfileID"].ToString());// profileidTextBox.Text);
        string aftype = dsfd.Tables[0].Rows[0]["Affiliate_Type"].ToString();
        string mc = dsct.Tables[0].Rows[0]["MCWaiver"].ToString();
        string companyname = ds.Tables[0].Rows[0]["Company_Name"].ToString().ToUpper();
        string statename = ds.Tables[0].Rows[0]["Profile_Address_State"].ToString();
        office = Queries.GetOfficeFromCountry(Session["ProfileID"].ToString());// profileidTextBox.Text);
        LoadDocuments(ContractdetailsIDTextBox.Text, office, Finance_Details,contracttypeTextBox.Text , aftype, mc, CanxContractNoTextBox.Text, companyname, statename);
        string script = "<script> $(function() {$('#tabs').tabs({ disabled: [5] });  $( '#tabs' ).tabs({ active: 4 }); });</script> ";
        ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", script, false);
    }

    //protected void GridView2_RowCommand(object sender, GridViewCommandEventArgs e)
    //{
    //    if(e.CommandName=="EditRow")
    //    {
    //        int rowindex = ((GridViewRow)((LinkButton)e.CommandSource).NamingContainer).RowIndex;
    //        GridView2.EditIndex = rowindex;
    //        DataSet dsor = Queries.LoadContractNo_Othernames(ContractdetailsIDTextBox.Text);
    //        GridView2.DataSource = dsor;
    //        GridView2.DataBind();
    //    }
    //    else if(e.CommandName == "DeleteRow")
    //    {

    //    }
    //    else if (e.CommandName == "UpdateRow")
    //    {
    //        DataSet dsor = Queries.LoadContractNo_Othernames(ContractdetailsIDTextBox.Text);
    //        GridView2.DataSource = dsor;
    //        GridView2.DataBind();

    //    }
    //    else if (e.CommandName == "CancelUpdate")
    //    {
    //        GridView2.EditIndex = -1;
    //        DataSet dsor = Queries.LoadContractNo_Othernames(ContractdetailsIDTextBox.Text);
    //        GridView2.DataSource = dsor;
    //        GridView2.DataBind();
    //    }
    //}

    protected void Button8_Click(object sender, EventArgs e)
    {
        string user = (string)Session["username"];
        string foreigncurrency;
        office = Queries.GetOfficeFromCountry(Session["ProfileID"].ToString());// profileidTextBox.Text);
        string contractreceiptnote = "Contract Receipt Details Added";
 
        double floodcess = 0;
       
        string PRRproductcode = "PRESTIGE ROYAL RESIDENCES";
        string KRRproductcode = "KARMA ROYAL RESIDENCES";
        string productcode = "SALE OF POINTS (HOLIDAY OWNERSHIP)";
        string SAC = "996311";
        string GSTpercent = "9%";
        if (depositmethodaddDropDownList.SelectedItem.Text == "FNTC")
        {
            string invoiceno = "";
            if (contracttypeTextBox.Text == "Fractional" || contracttypeTextBox.Text == "Trade-In-Fractionals")
            {
                if (oldcanxamtTextBox.Text == "" || oldcanxamtTextBox.Text == "0" || oldcanxamtTextBox.Text == null)
                {
                    if (currencyDropDownList.SelectedItem.Text == "USD")
                    {
                        double indeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        double gst = 0;
                        double taxableamt = 0;
                        string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text,
                            invoiceno, DateTime.Now.ToShortDateString(), "N/A", "N/A",
                            "N/A", KRRproductcode, SAC, taxableamt.ToString(), taxableamt.ToString(), "0", gst.ToString(), "0", gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text,
                            currencyDropDownList.SelectedItem.Text, "N/A", "0", "", ReceiptamtTextBox.Text, receipttypeDropDownList.SelectedItem.Text, ReceiptamtTextBox.Text, totaldeposit.ToString(), "0",floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:"
                            + "N/A" + "State:" + "N/A" + "," +
                            "State Code:" + "N/A" + "," + "Product Code:" + KRRproductcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + "0" + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + "0" + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "N/A" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + "" + "," + 
                            "Actual Amt:" + ReceiptamtTextBox.Text + "," + "contractdetailsID:" + ContractdetailsIDTextBox.Text + "Type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Status: Active" + "," +
                            "Total Deposit:" + ReceiptamtTextBox.Text + "," + "Total deposit USD:" + totaldeposit.ToString() + "," + "Previous Amt:" + "0"+ "," + "Flood Cess @1%:" + floodcess.ToString();
                        int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);

                    }
                }
                else
                {

                    double oldamt = Convert.ToDouble(oldcanxamtTextBox.Text);
                    double fulldeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                    double indeposit1 = fulldeposit - oldamt;
                    double indeposit = Math.Round(Convert.ToDouble(indeposit1), 0);
                    double gst = 0;
                    double taxableamt = 0;
                    double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                    string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                    int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text,
                        invoiceno, DateTime.Now.ToShortDateString(), "N/A",
                        "N/A", "N/A",
                       KRRproductcode, SAC, taxableamt.ToString(), taxableamt.ToString(), "0", gst.ToString(),
                        "0", gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, currencyDropDownList.SelectedItem.Text, "N/A",
                        "0", "", indeposit1.ToString(), receipttypeDropDownList.SelectedItem.Text, fulldeposit.ToString(), totaldeposit.ToString(), oldamt.ToString(),floodcess.ToString());
                    string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" +
                        ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," +
                        "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:" + "N/A" +
                        "State:" + "N/A" + "," + "State Code:" + "N/A" + "," +
                        "Product Code:" + KRRproductcode+ "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," +
                        "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + "0" + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + "0" + "," +
                        "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," +
                        "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," +
                        "Converted Currency:" + "N/A" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + "" + "," +
                        "Actual Amt:" + indeposit1.ToString() + "," + "Receipt type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Receipt status:" + "Active" + "," +
                        "Total Deposit:" + fulldeposit.ToString() + "," + "Total Deposit in USD: " + totaldeposit.ToString() + "," + "Previous Amt:" + oldamt.ToString() + "," + "Flood Cess @1%:" + floodcess.ToString(); 
                      int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                    int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);


                }
            }
            else
            {
                if (oldcanxamtTextBox.Text == "" || oldcanxamtTextBox.Text == "0" || oldcanxamtTextBox.Text == null)
                {
                    if (currencyDropDownList.SelectedItem.Text == "USD")
                    {
                        double indeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        double gst = 0;
                        double taxableamt = 0;
                        string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text,
                            invoiceno, DateTime.Now.ToShortDateString(), "N/A", "N/A",
                            "N/A", productcode, SAC, taxableamt.ToString(), taxableamt.ToString(), "0", gst.ToString(), "0", gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text,
                            currencyDropDownList.SelectedItem.Text, "N/A", "0", "", ReceiptamtTextBox.Text, receipttypeDropDownList.SelectedItem.Text, ReceiptamtTextBox.Text, totaldeposit.ToString(), "0",floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:"
                            + "N/A" + "State:" + "N/A" + "," +
                            "State Code:" + "N/A" + "," + "Product Code:" +productcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + "0" + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + "0" + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," +
                            "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "N/A" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + "" + "," + "Actual Amt:" + ReceiptamtTextBox.Text + "," + "contractdetailsID:" + ContractdetailsIDTextBox.Text + "Type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Status: Active" + "," + "Total Deposit:" + ReceiptamtTextBox.Text + "," + "Total deposit USD:" + totaldeposit.ToString() + "," + "Previous Amt:" + "0" + "," + "Flood Cess @1%:" + floodcess.ToString(); 
                          int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);

                    }
                }
                else
                {

                    double oldamt = Convert.ToDouble(oldcanxamtTextBox.Text);
                    double fulldeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                    double indeposit1 = fulldeposit - oldamt;
                    double indeposit = Math.Round(Convert.ToDouble(indeposit1), 0);
                    double gst = 0;
                    double taxableamt = 0;
                    double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                    string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                    int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text,
                        invoiceno, DateTime.Now.ToShortDateString(), "N/A",
                        "N/A", "N/A",
                        productcode,SAC, taxableamt.ToString(), taxableamt.ToString(), "0", gst.ToString(),
                        "0", gst.ToString(), indeposit.ToString(),depositmethodaddDropDownList.SelectedItem.Text, currencyDropDownList.SelectedItem.Text, "N/A",
                        "0", "", indeposit1.ToString(), receipttypeDropDownList.SelectedItem.Text, fulldeposit.ToString(), totaldeposit.ToString(), oldamt.ToString(),floodcess.ToString());
                    string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" +
                        ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," +
                        "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:" + "N/A" +
                        "State:" + "N/A" + "," + "State Code:" + "N/A" + "," +
                        "Product Code:" + productcode + "," + "SAC:" +SAC + "," + "Amount:" + taxableamt.ToString() + "," +
                        "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + "0" + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + "0" + "," +
                        "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," +
                        "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," +
                        "Converted Currency:" + "N/A" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + "" + "," +
                        "Actual Amt:" + indeposit1.ToString() + "," + "Receipt type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Receipt status:" + "Active" + "," +
                        "Total Deposit:" + fulldeposit.ToString() + "," + "Total Deposit in USD: " + totaldeposit.ToString() + "," + "Previous Amt:" + oldamt.ToString() + "," + "Flood Cess @1%:" + floodcess.ToString(); 
                      int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                    int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);


                }
            }

        }//depositmethodaddDropDownList.SelectedItem.Text=="FNTC"
        else
        { 
        if (foreigncurrencyTextBox.Text == "" || foreigncurrencyTextBox.Text == "0" || foreigncurrencyTextBox.Text == null || foreigncurrencyTextBox.Text == "NaN")
        {
            foreigncurrency = "60";
        }
        else
        {
            foreigncurrency = foreigncurrencyTextBox.Text;
        }
        if (ReceiptamtTextBox.Text == "" || ReceiptamtTextBox.Text == "0" || ReceiptamtTextBox.Text == null || ReceiptamtTextBox.Text == "NaN")

        {
        }
        else
        {

            DataSet dsrecp = Queries.LoadIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                string supplyplace = dsrecp.Tables[0].Rows[0]["SupplyPlace"].ToString();
                string state = dsrecp.Tables[0].Rows[0]["State"].ToString();
                string statecode = dsrecp.Tables[0].Rows[0]["StateCode"].ToString();
                int CurrentYear = DateTime.Today.Year;
            int PreviousYear = DateTime.Today.Year - 1;
            int NextYear = DateTime.Today.Year + 1;
            string PreYear = PreviousYear.ToString();
            string NexYear = NextYear.ToString();
            string CurYear = CurrentYear.ToString();
            int cyr = Convert.ToInt32(CurYear) % 100;
            string cyr1 = cyr.ToString("yy");
            int tpyr = Convert.ToInt32(PreYear) % 100;
            int nxyr = Convert.ToInt32(NexYear) % 100;
            string FinYear = null;
            if (DateTime.Today.Month > 3)
            {

                FinYear = CurrentYear + "-" + nxyr;
            }
            else
            {

                FinYear = PreviousYear + "-" + cyr;

            }
            DataSet exrds = Queries.LoadExchange_Rate();
            string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
            string invoiceno = dsrecp.Tables[0].Rows[0]["ReceiptStart"].ToString() + "/" + FinYear + "/" + dsrecp.Tables[0].Rows[0]["ReceiptGen_Code"].ToString();

            if (contracttypeTextBox.Text == "Fractional" || contracttypeTextBox.Text == "Trade-In-Fractionals")
            {
                if (oldcanxamtTextBox.Text == "" || oldcanxamtTextBox.Text == "0" || oldcanxamtTextBox.Text == null)
                {
                    if (currencyDropDownList.SelectedItem.Text == "INR")
                    {
                        double indeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                        double gst = Math.Round(indeposit / 118 * 18 / 2);
                        double taxableamt = Math.Round(indeposit / 118 * 100);
                            if (VenueDropDownList.SelectedItem.Text == "KERALA" || VenueDropDownList.SelectedItem.Text == "Kerala")
                            {
                                floodcess = 0;// Math.Round(taxableamt * 0.01);

                            }
                            else
                            {
                                floodcess = 0;
                            }
                            string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);

                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(),
                           supplyplace, state,statecode, PRRproductcode, SAC, taxableamt.ToString(), taxableamt.ToString(), GSTpercent, gst.ToString(), GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text,
                           "", "", "", "", "", receipttypeDropDownList.SelectedItem.Text, indeposit.ToString(), totaldeposit.ToString(), "0",floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," +
                                "Supply Place:" + supplyplace + "State:" + state + "," +
                                "State Code:" + statecode + "," + "Product Code:" + PRRproductcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + GSTpercent + "," + "CGST Amt.:" + gst.ToString() + "," +
                                "SGST:" + GSTpercent + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + DateTime.Now.ToShortDateString() + "," + "Actual Amt:" + " " + "," + "contractdetailsID:" + ContractdetailsIDTextBox.Text + "Type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Status: Active" + "," +
                                "total deposit:" + indeposit.ToString() + "," + "Total depsoit in USD:" + totaldeposit.ToString() + "," + "Previous Amt:" + "0" + "," + "Flood Cess @1%:" + floodcess.ToString(); 
                          int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);
                    }
                    else
                    {
                        double currentrate = Convert.ToDouble(foreigncurrency);

                        double indeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text) * currentrate);
                        double gst = 0;
                        double taxableamt = 0;
                        string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(),
                           supplyplace, state, statecode, KRRproductcode,SAC, taxableamt.ToString(), taxableamt.ToString(), "", gst.ToString(), "", gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, 
                           currencyDropDownList.SelectedItem.Text, "INR", currentrate.ToString(),DateTime.Now.ToShortDateString(), ReceiptamtTextBox.Text, 
                           receipttypeDropDownList.SelectedItem.Text, ReceiptamtTextBox.Text, totaldeposit.ToString(), "0",floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," +
                                "Supply Place:" + supplyplace + "State:" + state + "," +"State Code:" + statecode + "," +"Product Code:" + KRRproductcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + "" + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + "" + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," +
                                "Converted Currency:" + "Rs." + "," + "Current rate:" + currentrate.ToString() + "," + "Exchanged date:" + DateTime.Now.ToShortDateString() + "," + "Actual Amt:" + ReceiptamtTextBox.Text + "," + "contractdetailsID:" + ContractdetailsIDTextBox.Text + "Type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Status: Active" + "," +
                                "Total Deposit:" + ReceiptamtTextBox.Text + "," + "Total deposit USD:" + totaldeposit.ToString() + "," + "Previous Amt:" + "0" + "," + "Flood Cess @1%:" + floodcess.ToString(); 
                          int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);
                    }
                }
                else
                {
                    if (currencyDropDownList.SelectedItem.Text == "INR")
                    {
                        double oldamt = Convert.ToDouble(oldcanxamtTextBox.Text);
                        double fulldeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                        double indeposit = fulldeposit - oldamt;
                        double gst = Math.Round(indeposit / 118 * 18 / 2);
                        double taxableamt = Math.Round(indeposit / 118 * 100);
                            if (VenueDropDownList.SelectedItem.Text == "KERALA" || VenueDropDownList.SelectedItem.Text == "Kerala")
                            {
                                floodcess = 0;// Math.Round(taxableamt * 0.01);

                            }
                            else
                            {
                                floodcess = 0;
                            }
                            string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(), supplyplace, state, statecode, PRRproductcode, SAC, taxableamt.ToString(),
                            taxableamt.ToString(), GSTpercent, gst.ToString(), GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, "", "", "", "", "", receipttypeDropDownList.SelectedItem.Text, fulldeposit.ToString(), totaldeposit.ToString(), oldamt.ToString(),floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," +
                                 "Supply Place:" + supplyplace + "State:" + state + "," + "State Code:" + statecode + "," + "Product Code:" + productcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + GSTpercent  + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + GSTpercent  + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + "" + "," + "Converted Currency:" + "" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + "" + "," + "Actual Amt:" + " " + "," 
                                + "Receipt type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Receipt status:" + "Active" + "," + "Total Deposit:" + fulldeposit.ToString() + "," + "Total Deposit in USD: " + totaldeposit.ToString() + "," + "Previous Amt:" + oldamt.ToString() + "," + "Flood Cess @1%:" + floodcess.ToString();
                            int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);
                    }
                    else
                    {
                        double currentrate = Convert.ToDouble(foreigncurrency);
                        double oldamt = Convert.ToDouble(oldcanxamtTextBox.Text);
                        double fulldeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                        double indeposit1 = fulldeposit - oldamt;
                        double indeposit = Math.Round(Convert.ToDouble(indeposit1) * currentrate);
                        double gst = 0;
                        double taxableamt = 0;
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(),
                           supplyplace, state, statecode, KRRproductcode, SAC,
                            taxableamt.ToString(), taxableamt.ToString(), GSTpercent, gst.ToString(), GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, currencyDropDownList.SelectedItem.Text, "Rs.", currentrate.ToString(), DateTime.Now.ToString(), indeposit1.ToString(), receipttypeDropDownList.SelectedItem.Text, fulldeposit.ToString(), totaldeposit.ToString(), oldamt.ToString(),floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," +
                                "Supply Place:" + supplyplace + "State:" + state + "," + "State Code:" + statecode + "," + "Product Code:" + KRRproductcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + GSTpercent + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" +GSTpercent + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "Rs." + "," + "Current rate:" + currentrate.ToString() + "," + "Exchanged date:" + DateTime.Now.ToShortDateString() + "," + "Actual Amt:" + indeposit1.ToString() + "," + "Receipt type:" + "Deposit" + "," + "Receipt status:" + "Active" + "," + "Total Deposit:" + fulldeposit.ToString() + "," + "Total Deposit in USD: " + totaldeposit.ToString() + "," + "Previous Amt:" + oldamt.ToString() + "," + "Flood Cess @1%:" + floodcess.ToString();
                            int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);

                    }

                }


            }
            else
            {
                if (oldcanxamtTextBox.Text == "" || oldcanxamtTextBox.Text == "0" || oldcanxamtTextBox.Text == null)
                {


                    if (currencyDropDownList.SelectedItem.Text == "INR")
                    {
                        double indeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                        double gst = Math.Round(indeposit / 118 * 18 / 2);
                        double taxableamt = Math.Round(indeposit / 118 * 100);
                            if (VenueDropDownList.SelectedItem.Text == "KERALA" || VenueDropDownList.SelectedItem.Text == "Kerala")
                            {
                                floodcess = 0;// Math.Round(taxableamt * 0.01);

                            }
                            else
                            {
                                floodcess = 0;
                            }
                            string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(), supplyplace,state,statecode,productcode, SAC, taxableamt.ToString(), taxableamt.ToString(), GSTpercent, gst.ToString(),GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, "", "", "", "", "", receipttypeDropDownList.SelectedItem.Text, indeposit.ToString(), totaldeposit.ToString(), "0",floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:" + supplyplace  + "State:" + state  + "," + "State Code:"+  statecode + "," + "Product Code:" + productcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + GSTpercent + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + GSTpercent + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + DateTime.Now.ToShortDateString() + "," + "Actual Amt:" + " " + "," + "contractdetailsID:" + ContractdetailsIDTextBox.Text + " Type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Status: Active" + "," + "total depsoit:" + indeposit.ToString() + "," + "Total deposit in USD:" + totaldeposit.ToString() + "," + "Previous Amt:" + "0" + "," + "Flood Cess @1%:" + floodcess.ToString();
                            int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);
                    }
                    else
                    {
                        double currentrate = Convert.ToDouble(foreigncurrency);

                        double indeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text) * currentrate);
                        double gst = 0;
                        double taxableamt = 0;
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);
                        string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(),supplyplace,state,statecode, productcode, SAC, taxableamt.ToString(), taxableamt.ToString(), GSTpercent, gst.ToString(), GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, currencyDropDownList.SelectedItem.Text, "INR", currentrate.ToString(), DateTime.Now.ToShortDateString(), ReceiptamtTextBox.Text, receipttypeDropDownList.SelectedItem.Text, ReceiptamtTextBox.Text, totaldeposit.ToString(), "0",floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:" +supplyplace + "State:" + state + "," + "State Code:" + statecode+ "," + "Product Code:" + productcode + "," + "SAC:" + SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" +GSTpercent + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" +GSTpercent + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "Rs." + "," + "Current rate:" + currentrate.ToString() + "," + "Exchanged date:" + DateTime.Now.ToShortDateString() + "," + "Actual Amt:" + ReceiptamtTextBox.Text + "," + "contractdetailsID:" + ContractdetailsIDTextBox.Text + "Type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Status: Active" + "," + "total deposit:" + indeposit.ToString() + "," + "Total depsoit in USD:" + totaldeposit.ToString() + "," + "Previous Amt:" + "0" + "," + "Flood Cess @1%:" + floodcess.ToString();
                            int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);
                    }
                }
                else
                {
                    if (currencyDropDownList.SelectedItem.Text == "INR")
                    {
                        double oldamt = Convert.ToDouble(oldcanxamtTextBox.Text);
                        double fulldeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                        double indeposit = fulldeposit - oldamt;
                        double gst = Math.Round(indeposit / 118 * 18 / 2);
                        double taxableamt = Math.Round(indeposit / 118 * 100);
                            if (VenueDropDownList.SelectedItem.Text == "KERALA" || VenueDropDownList.SelectedItem.Text == "Kerala")
                            {
                                floodcess = 0;// Math.Round(taxableamt * 0.01);

                            }
                            else
                            {
                                floodcess = 0;
                            }

                            string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text) / Convert.ToDouble(dollarrate), 0);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(), supplyplace, state,statecode, productcode, SAC, taxableamt.ToString(), taxableamt.ToString(), GSTpercent, gst.ToString(), GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, "", "", "", "", "", "Deposit", fulldeposit.ToString(), totaldeposit.ToString(), oldamt.ToString(),floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:" + supplyplace + "," + "State:" + state + "State Code:" + statecode + "," + "Product Code:" + productcode + "," + "SAC:" +SAC + "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" +GSTpercent + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + GSTpercent + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + "" + "," + "Converted Currency:" + "" + "," + "Current rate:" + "0" + "," + "Exchanged date:" + "" + "," + "Actual Amt:" + " " + "," + "Receipt type:" + "Deposit" + "," + "Receipt status:" + "Active" + "," + "Total Deposit:" + fulldeposit.ToString() + "," + "Total Deposit in USD: " + totaldeposit.ToString() + "," + "Previous Amt:" + oldamt.ToString() + "," + "Flood Cess @1%:" + floodcess.ToString();
                            int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);
                    }
                    else
                    {
                        double currentrate = Convert.ToDouble(foreigncurrency);
                        double oldamt = Convert.ToDouble(oldcanxamtTextBox.Text);
                        double fulldeposit = Convert.ToDouble(ReceiptamtTextBox.Text);
                        double indeposit1 = fulldeposit - oldamt;
                        double indeposit = Math.Round(Convert.ToDouble(indeposit1) * currentrate);
                        double gst = 0;
                        double taxableamt = 0;
                        double totaldeposit = Math.Round(Convert.ToDouble(ReceiptamtTextBox.Text), 0);

                        string Contract_Indian_Deposit_ReceiptID = Queries.GetContract_Indian_Deposit_Receipt_ID(office);
                        int receipt = Queries.InsertContract_Indian_Deposit_Receipt(Contract_Indian_Deposit_ReceiptID, ContractdetailsIDTextBox.Text, contractnoTextBox.Text, invoiceno, DateTime.Now.ToShortDateString(), supplyplace, state, statecode, productcode, SAC, taxableamt.ToString(), taxableamt.ToString(), GSTpercent, gst.ToString(), GSTpercent, gst.ToString(), indeposit.ToString(), depositmethodaddDropDownList.SelectedItem.Text, currencyDropDownList.SelectedItem.Text, "Rs.", currentrate.ToString(), DateTime.Now.ToString(), indeposit1.ToString(), receipttypeDropDownList.SelectedItem.Text, fulldeposit.ToString(), totaldeposit.ToString(), oldamt.ToString(),floodcess.ToString());
                        string logr = "Invoice Details:" + "Deposit_ReceiptID:" + Contract_Indian_Deposit_ReceiptID + "," + "contractdetails ID:" + ContractdetailsIDTextBox.Text + "," + "Contractno:" + contractnoTextBox.Text + "," + "Invoice No:" + invoiceno + "," + "Date:" + DateTime.Now.ToShortDateString() + "," + "Supply Place:" + supplyplace+ "State:" + state + "," + "State Code:" +statecode + "," + "Product Code:" + productcode + "," + "SAC:" + SAC+ "," + "Amount:" + taxableamt.ToString() + "," + "Taxable value:" + taxableamt.ToString() + "," + "CGST:" + GSTpercent + "," + "CGST Amt.:" + gst.ToString() + "," + "SGST:" + GSTpercent + "," + "SGST Amt:" + gst.ToString() + "," + "Total Amount:" + indeposit.ToString() + "," + "Deposit Payment mode:" + depositmethodaddDropDownList.SelectedItem.Text + "," + "Actual currency:" + currencyDropDownList.SelectedItem.Text + "," + "Converted Currency:" + "Rs." + "," + "Current rate:" + currentrate.ToString() + "," + "Exchanged date:" + DateTime.Now.ToShortDateString() + "," + "Actual Amt:" + indeposit1.ToString() + "," + "Receipt type:" + receipttypeDropDownList.SelectedItem.Text + "," + "Receipt status:" + "Active" + "," + "Total Deposit:" + fulldeposit.ToString() + "," + "Total Deposit in USD: " + totaldeposit.ToString() + "," + "Previous Amt:" + oldamt.ToString() + "," + "Flood Cess @1%:" + floodcess.ToString();
                            int insertlogr = Queries.InsertContractLogs_India(Session["ProfileID"].ToString(), ContractdetailsIDTextBox.Text, logr, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", contractreceiptnote, "", logr);
                        int updategenno = Queries.UpdateContract_Indian_Deposit_Receipt_ID(office);
                        //update receiptgen no
                        int updaterecno = Queries.UpdateIndian_ReceiptGeneration(VenueDropDownList.SelectedItem.Text);
                        int updaterecno1 = Queries.UpdateIndian_ReceiptGenerationFinancialYear(VenueDropDownList.SelectedItem.Text);

                    }
                }

            }


        }
        // commented by gaurav //
        //---   ReceiptamtTextBox.Text = "";
        //---  DataSet dsreceipt = Queries.LoadContract_Indian_Deposit_ReceiptDetails(ContractdetailsIDTextBox.Text);
        //---   GridView3.DataSource = dsreceipt;
        //---  GridView3.DataBind();

        // -- end --//
        depositmethodaddDropDownList.SelectedIndex = 0;
        ReceiptamtTextBox.Text = "";
        receipttypeDropDownList.SelectedIndex = 0;
    }

    }
    //protected void Linkbtn1Click(object sender, EventArgs e)
    //{

    //    GridViewRow gdrow = (GridViewRow)((LinkButton)sender).NamingContainer;
    //    string profileID = gdrow.Cells[0].Text;
    //    string name1 = gdrow.Cells[1].Text;
    //    string r = gdrow.Cells[2].Text;
    //    string h = gdrow.Cells[3].Text;
    //}
    
    protected void GridView2_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        //LinkButton lnkView = (LinkButton)e.CommandSource;
        //string id = lnkView.CommandArgument;

        //DataSet ds = Queries.LoadContractNo_OthernamesOnID(id);

        //string type = ds.Tables[0].Rows[0]["type"].ToString();
        //if (type == "SOR Name")
        //{

        //    OnlySORLoadVisibility();
        //    DataSet ds1 = Queries.LoadContractNo_OthernamesOnID(id);

        //    soranameTextBox.Text = ds1.Tables[0].Rows[0]["Name"].ToString();
        //    soraaddressTextBox.Text = ds1.Tables[0].Rows[0]["Address"].ToString();
        //    sorastateTextBox.Text = ds1.Tables[0].Rows[0]["State"].ToString();

        //    soracountryTextBox.Text = ds1.Tables[0].Rows[0]["Country"].ToString();
        //    sorapincodeTextBox.Text = ds1.Tables[0].Rows[0]["Postcode"].ToString();


        //}
        //else if (type == "Additional Name")
        //{


        //    OnlyAddltionalLoadVisibility();
        //    DataSet ds1 = Queries.LoadContractNo_OthernamesOnID(id);
        //    soranameTextBox.Text = ds1.Tables[0].Rows[0]["Name"].ToString();
        //}
        string  othernamesid = e.CommandArgument.ToString();
        if (e.CommandName == "Delete")
        {
            // Response.Write("test"+ othernamesid);

            // Bind_grid();
            int update = Queries.UpdateContractNo_OthernamesStatus(othernamesid);

            //-- commented by gaurav --//
              //-- DataSet dsor = Queries.LoadContractNo_Othernames(ContractdetailsIDTextBox.Text);
              //--  GridView2.DataSource = dsor;
              //--  GridView2.DataBind();
              // ---- end  -----//
 

           
        }
    }
    protected void GridView2_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }
    // commented by gaurav //
    //protected void GridView3_RowCommand(object sender, GridViewCommandEventArgs e)
    //{
         
    //    string reciptno = e.CommandArgument.ToString();
    //    if (e.CommandName == "Delete")
    //    {
    //    //   Response.Write("test" + reciptno);
    //      int update=Queries.UpdateReceiptTableStatus(reciptno);
           
    //        DataSet dsreceiptdetails = Queries.LoadContract_Indian_Deposit_ReceiptDetails(ContractdetailsIDTextBox.Text);
    //        GridView3.DataSource = dsreceiptdetails;
    //        GridView3.DataBind();
    //    }
    //}

        // ------------------ commented by gaurav------------------//
    protected void GridView3_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }





    //protected void GridView2_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //     string type =   GridView2.SelectedRow.Cells[2].Text;

    //    if (type == "SOR Name")
    //    {
    //        string id = GridView2.SelectedRow.Cells[8].Text;
    //        OnlySORLoadVisibility();
    //        DataSet ds1 = Queries.LoadContractNo_OthernamesOnID(id);

    //        soranameTextBox.Text = ds1.Tables[0].Rows[0]["Name"].ToString();
    //        soraaddressTextBox.Text = ds1.Tables[0].Rows[0]["Address"].ToString();
    //        sorastateTextBox.Text = ds1.Tables[0].Rows[0]["State"].ToString();

    //        soracountryTextBox.Text = ds1.Tables[0].Rows[0]["Country"].ToString();
    //        sorapincodeTextBox.Text = ds1.Tables[0].Rows[0]["Postcode"].ToString();


    //    }
    //    else if (type == "Additional Name")
    //    {
    //        string id = GridView2.SelectedRow.Cells[8].Text;

    //        OnlyAddltionalLoadVisibility();
    //        DataSet ds1 = Queries.LoadContractNo_OthernamesOnID(id);
    //        soranameTextBox.Text = ds1.Tables[0].Rows[0]["Name"].ToString();
    //    }
    //}
    public string getReceiptDetails()
    {
        string user = HttpContext.Current.Session["username"].ToString();
        string htmlstr = "";
        string conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        string query = "select Deposit_Receipt_Id,ContractNo,Receipt_No,convert(varchar(50),Receipt_Date,105),taxable_value,totalamt,Payment_Mode,actual_currency, converted_currency, Converted_rate,Actual_Amt,Previous_DepositAmt, ContractDetails_ID,receipttype,floodcess from Contract_Indian_Deposit_Receipt where  ContractDetails_ID='" + ContractdetailsIDTextBox.Text + "' and Receipt_Status='Active'";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string Deposit_Receipt_Id = reader.GetString(0);
                string ContractNo = reader.GetString(1);
                string receiptNo = reader.GetString(2);
                string date = reader.GetString(3);
                string taxableAmt = reader.GetString(4);
                double totalAmt = reader.GetDouble(5);
                string paymentMode = reader.GetString(6);
                string actualCurrency = reader.GetString(7);
                string convertedCurrency = reader.GetString(8);
                string convertedRate = reader.GetString(9);
                string actualAmt = reader.GetString(10);
                string receiptType = reader.GetString(13);
                string PreviousDeposit = reader.GetString(11);
                string floodcess = reader.GetString(12);

                htmlstr += "<tr><td>"+ Deposit_Receipt_Id + "</td><td>" + ContractNo + "</td><td>" + receiptNo + "</td><td>" + date + "</td><td>" + taxableAmt + "</td><td>" + totalAmt + "</td><td>" + paymentMode + "</td><td>" + receiptType + "</td><td>" + actualCurrency + "</td><td>" + convertedCurrency + "</td><td>" + convertedRate + "</td><td>" + actualAmt + "</td><td>"+PreviousDeposit+"</td> <td><button id='btn-edit' type='button'>Edit</button></td><td><button id='btn-delete' type='button'>Delete</button></td></tr>";
                //<td>" + PreviousDeposit + "</td>
            }
        }
        else
        {
          
        }
        reader.Close();
        sqlcon.Close();
        return htmlstr;
    }


    [WebMethod]
    public static void deleteReceipts(string receiptID,string contractNO,string receiptNO)

    {
        HttpContext.Current.Session["receiptID"] = "";
        HttpContext.Current.Session["receiptNO"] = "";
        HttpContext.Current.Session["receiptID"] = receiptID;
        HttpContext.Current.Session["receiptNO"] = receiptNO;
        string contractreceiptnote1 = "Contract Receipt Deleted";
        string user = HttpContext.Current.Session["username"].ToString();
        DataSet dsrecdel = Queries.LoadContract_Indian_Deposit_ReceiptOnDeposit_Receipt_Id(HttpContext.Current.Session["receiptID"].ToString());
        string Deposit_Receipt_Id = dsrecdel.Tables[0].Rows[0]["Deposit_Receipt_Id"].ToString();
        string ContractDetails_ID = dsrecdel.Tables[0].Rows[0]["ContractDetails_ID"].ToString();
        DataSet dsid = Queries.LoadContractDetailsOnID(ContractDetails_ID);
        string profile= dsid.Tables[0].Rows[0]["profileID"].ToString();
        string ContractNo = dsrecdel.Tables[0].Rows[0]["ContractNo"].ToString();
        string Receipt_No = dsrecdel.Tables[0].Rows[0]["Receipt_No"].ToString();
        string Receipt_Date = dsrecdel.Tables[0].Rows[0]["Receipt_Date"].ToString();
        string place_supply = dsrecdel.Tables[0].Rows[0]["place_supply"].ToString();
        string state = dsrecdel.Tables[0].Rows[0]["state"].ToString();
        string state_code = dsrecdel.Tables[0].Rows[0]["state_code"].ToString();
        string Product_Name = dsrecdel.Tables[0].Rows[0]["Product_Name"].ToString();
        string SAC = dsrecdel.Tables[0].Rows[0]["SAC"].ToString();
        string Amount = dsrecdel.Tables[0].Rows[0]["Amount"].ToString();
        string taxable_value = dsrecdel.Tables[0].Rows[0]["taxable_value"].ToString();
        string cgstrate = dsrecdel.Tables[0].Rows[0]["cgstrate"].ToString();
        string cgstamt = dsrecdel.Tables[0].Rows[0]["cgstamt"].ToString();
        string sgstrate = dsrecdel.Tables[0].Rows[0]["sgstrate"].ToString();
        string sgstamt = dsrecdel.Tables[0].Rows[0]["sgstamt"].ToString();
        string totalamt = dsrecdel.Tables[0].Rows[0]["totalamt"].ToString();
        string Payment_Mode = dsrecdel.Tables[0].Rows[0]["Payment_Mode"].ToString();
        string actual_currency = dsrecdel.Tables[0].Rows[0]["actual_currency"].ToString();
        string converted_currency = dsrecdel.Tables[0].Rows[0]["converted_currency"].ToString();
        string Converted_rate = dsrecdel.Tables[0].Rows[0]["Converted_rate"].ToString();
        string ExchangedValue_date = dsrecdel.Tables[0].Rows[0]["ExchangedValue_date"].ToString();
        string Actual_Amt = dsrecdel.Tables[0].Rows[0]["Actual_Amt"].ToString();
        string Receipt_Status = dsrecdel.Tables[0].Rows[0]["Receipt_Status"].ToString();
        string receipttype = dsrecdel.Tables[0].Rows[0]["receipttype"].ToString();
        string payment_date = dsrecdel.Tables[0].Rows[0]["payment_date"].ToString();
        string total_deposit = dsrecdel.Tables[0].Rows[0]["Total_deposit"].ToString();
        string total_depositinusd = dsrecdel.Tables[0].Rows[0]["USDTotal_deposit"].ToString();
        string previousamt = dsrecdel.Tables[0].Rows[0]["Previous_DepositAmt"].ToString();
        string floodcess = dsrecdel.Tables[0].Rows[0]["floodcess"].ToString();
        int exists =Queries.CheckDeposit_Receipt_IdExists(HttpContext.Current.Session["receiptID"].ToString());
        if (exists == 1)
        {
            int delrecp = Queries.DeleteContract_Indian_Deposit_ReceiptOnDeposit(HttpContext.Current.Session["receiptID"].ToString());
           // string pageName = "Indian Contract Edit";
            string details = "Receipt ID:" + HttpContext.Current.Session["receiptID"].ToString() + " Receipt No: " + HttpContext.Current.Session["receiptNO"].ToString() + " deleted";
            //  int insertlog1 = Queries.admin_Log(pageName, details, user, DateTime.Now.ToString());
            int insertcontractlog = Queries.InsertContractLogs_India(profile, HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_Contract_Edit.aspx", contractreceiptnote1, details, "");
        }
        else
        {


            int receiptdelete = Queries.InsertContract_Indian_Deposit_Receipt_Deleted(Deposit_Receipt_Id, ContractDetails_ID, ContractNo, Receipt_No, Receipt_Date,
                  place_supply, state, state_code, Product_Name, SAC, Amount, taxable_value, cgstrate, cgstamt, sgstrate, sgstamt,
                totalamt, Payment_Mode, actual_currency, converted_currency, Converted_rate, ExchangedValue_date, Actual_Amt, Receipt_Status,
                receipttype, payment_date,total_deposit,total_depositinusd, previousamt, floodcess);

            int delrecp = Queries.DeleteContract_Indian_Deposit_ReceiptOnDeposit(HttpContext.Current.Session["receiptID"].ToString());

          

           // string pageName = "Indian Contract Edit";
            string details = "Receipt ID:" + HttpContext.Current.Session["receiptID"].ToString() + " Receipt No: " + HttpContext.Current.Session["receiptNO"].ToString() + " deleted";
            //int insertlog1 = Queries.admin_Log(pageName, details, user, DateTime.Now.ToString());
            int insertcontractlog = Queries.InsertContractLogs_India(profile, HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_Contract_Edit.aspx", contractreceiptnote1, details, "");
        }

    }



    public string getsorAdditionalDetails()
    {
        int i = 0;
        string user = HttpContext.Current.Session["username"].ToString();
        string htmlstr = "";
        string conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        string query = "select otherNamesID,ContractNo,Type,Name,Address,State,Country,Postcode,Acceptance,Enrollment from ContractNo_Othernames where ContractDetails_ID='" + ContractdetailsIDTextBox.Text + "' and status='Active'";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string otherNamesID = reader.GetString(0);
                string ContractNo = reader.GetString(1);
                string Type = reader.GetString(2);
                string Name = reader.GetString(3);
                string Address = reader.GetString(4);
                string State = reader.GetString(5);
                string Country = reader.GetString(6);
                string Postcode = reader.GetString(7);
                string acceptance = reader.GetString(8);
                string enrollment = reader.GetString(9);

                string acceptanceval = "";
                string acceptanceval1 = "";

                if (acceptance == "pending")
                {
                    acceptanceval = "checked";
                }
                else if (acceptance == "collected")
                {
                    acceptanceval1 = "checked";
                }
                else
                {
                    acceptanceval = "";
                    acceptanceval1 = "";
                }


                string enrollval = "";
                string enrollval1 = "";

                if (enrollment == "pending")
                {
                    enrollval = "checked";
                }
                else if (enrollment == "collected")
                {
                    enrollval1 = "checked";
                }
                else
                {
                    enrollval = "";
                    enrollval1 = "";
                }

                if (Type == "Additional Name")
                {
                    htmlstr += "<tr><td>" + otherNamesID + "</td><td>" + ContractNo + "</td><td>" + Type + "</td><td>" + Name + "</td><td>" + Address + "</td><td>" + State + "</td><td>" + Country + "</td><td>" + Postcode + "</td><td style='width:100%'> <input type='radio' name='acceptance" + i + "' id='acceptance' value='pending' " + acceptanceval + ">Pending<br><input type='radio' name='acceptance" + i + "' id='acceptance' value='collected' " + acceptanceval1 + ">Collected</td><td style='width:100%'> <input type='radio' name='enrollment" + i + "' value='pending' " + enrollval + ">Pending<br><input type='radio' name='enrollment" + i + "' value='collected' " + enrollval1 + ">Collected</td><td><button id='btn-delete1' type='button'>Delete</button></td></tr>";
                    i++;
                }
                else
                {
                    htmlstr += "<tr><td>" + otherNamesID + "</td><td>" + ContractNo + "</td><td>" + Type + "</td><td>" + Name + "</td><td>" + Address + "</td><td>" + State + "</td><td>" + Country + "</td><td>" + Postcode + "</td><td style='width:100%'> <input type='radio' name='documentStatus" + i + "' id='documentStatus' value='pending' " + acceptanceval + ">Pending<br><input type='radio' name='documentStatus" + i + "' id='documentStatus' value='collected' " + acceptanceval1 + ">Collected</td><td></td><td><button id='btn-delete1' type='button'>Delete</button></td></tr>";
                    i++;
                }


            }
        }
        else
        {
            this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Warning", "Func()", true);
        }
        reader.Close();
        sqlcon.Close();
        return htmlstr;

    }

    [WebMethod]
    public static void deleteSorAdd(string sorID, string contractNO, string type)
    {
        HttpContext.Current.Session["sorID"] = "";
        HttpContext.Current.Session["type"] = "";
        HttpContext.Current.Session["sorID"] = sorID;
        HttpContext.Current.Session["type"] = type;

        string saddonnote1 = "Additional/SOR Name Details Deleted";

        string user = HttpContext.Current.Session["username"].ToString();
        string conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        //DataSet ds1 = Queries.LoadContractDetailsOnOthersID(HttpContext.Current.Session["sorID"].ToString());
        //string ContractDetails_ID = ds1.Tables[0].Rows[0]["ContractDetails_ID"].ToString();         
        //string profile = ds1.Tables[0].Rows[0]["profileID"].ToString();
        DataSet dsid = Queries.LoadContractDetailsOnID(HttpContext.Current.Session["ContractdetailsID"].ToString());
        string profile = dsid.Tables[0].Rows[0]["profileID"].ToString();
        SqlConnection sqlcon = new SqlConnection(conn);
        string query = "update ContractNo_Othernames set Status='Inactive' where otherNamesID='"+ HttpContext.Current.Session["sorID"].ToString() + "'";
        sqlcon.Open();
        SqlCommand cmd2 = new SqlCommand(query, sqlcon);
        cmd2.ExecuteNonQuery();
        sqlcon.Close();

      //  string pageName = "Indian Contract Edit";
        string details = "ID:" + HttpContext.Current.Session["sorID"].ToString() + " type: " + HttpContext.Current.Session["type"].ToString() + " deleted";
        //  int insertlog1 = Queries.admin_Log(pageName, details, user, DateTime.Now.ToString());
        int insertcontractlog = Queries.InsertContractLogs_India(profile, HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_Contract_Edit.aspx", saddonnote1, details, "");


    }

    [WebMethod]
    public static string ContractnoExists(string contractno)
    {

        String JSON = "{\n \"names\":[";

        SqlDataReader reader = Queries.CheckContractNo(contractno);
        if (reader.HasRows)
        {
            
            JSON += "[\"" + "1" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "0" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
      
        return JSON;

    }
    [WebMethod]
    public static string LoadCoressCountry()
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        String JSON = "{\n \"names\":[";
        string query = "select distinct country_name   from country order by 1;";
        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        SqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {

                string country_name = reader.GetString(0);
                JSON += "[\"" + country_name + "\"],";


            }

            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }

        sqlcon.Close();
        return JSON;



    }

    [WebMethod]
    public static void updateReceipt(string receiptID, string depositMethod, string type, string amount, string receiptNum, string oldcanxamt, string curr, string foreigncurr)
    {
        string user = HttpContext.Current.Session["username"].ToString();
        HttpContext.Current.Session["totalamt"] = "";
        HttpContext.Current.Session["receipttype"] = "";
        HttpContext.Current.Session["Payment_Mode"] = "";
        HttpContext.Current.Session["taxable_value"] = "";
        HttpContext.Current.Session["cgstamt"] = "";
        HttpContext.Current.Session["sgstamt"] = "";
        HttpContext.Current.Session["Amount"] = "";
        HttpContext.Current.Session["receiptNo"] = "";
        HttpContext.Current.Session["Previous_DepositAmt"] = "";
        HttpContext.Current.Session["USDTotal_deposit"] = "";
        HttpContext.Current.Session["Converted_rate"] = "";
        HttpContext.Current.Session["Total_deposit"] = "";
        HttpContext.Current.Session["actual_currency"] = "";
        HttpContext.Current.Session["converted_currency"] = "";
        HttpContext.Current.Session["ExchangedValue_date"] = "";
        HttpContext.Current.Session["Actual_Amt"] = "";
        HttpContext.Current.Session["floodcess"] = "";

        DataSet exrds = Queries.LoadExchange_Rate();
        string dollarrate = exrds.Tables[0].Rows[0]["ERates_USD"].ToString();
        double floodcess = 0;
        string conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon1 = new SqlConnection(conn);
        sqlcon1.Open();

        string query1 = "select distinct totalamt,receipttype,Payment_Mode,taxable_value,cgstamt,sgstamt,Amount,Receipt_No,Previous_DepositAmt,USDTotal_deposit,Converted_rate,Total_deposit,actual_currency,	converted_currency,	ExchangedValue_date,	Actual_Amt,floodcess,p.Profile_Venue from Contract_Indian_Deposit_Receipt cdr join ContractDetails_Indian cd on cd.ContractDetails_ID=cdr.ContractDetails_ID join profile p on p.Profile_ID = cd.ProfileID  where Deposit_Receipt_Id='" + receiptID + "'";
        SqlCommand cmd = new SqlCommand(query1, sqlcon1);
        SqlDataReader reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            HttpContext.Current.Session["totalamt"] = reader.GetDouble(0);
            HttpContext.Current.Session["receipttype"] = reader.GetString(1);
            HttpContext.Current.Session["Payment_Mode"] = reader.GetString(2);
            HttpContext.Current.Session["taxable_value"] = reader.GetString(3);
            HttpContext.Current.Session["cgstamt"] = reader.GetString(4);
            HttpContext.Current.Session["sgstamt"] = reader.GetString(5);
            HttpContext.Current.Session["Amount"] = reader.GetString(6);
            HttpContext.Current.Session["receiptNo"] = reader.GetString(7);
            HttpContext.Current.Session["Previous_DepositAmt"] = reader.GetString(8);
            HttpContext.Current.Session["USDTotal_deposit"] = reader.GetString(9);
            HttpContext.Current.Session["Converted_rate"] = reader.GetString(10);
            HttpContext.Current.Session["Total_deposit"] = reader.GetString(11);
            HttpContext.Current.Session["actual_currency"] = reader.GetString(12);
            HttpContext.Current.Session["converted_currency"] = reader.GetString(13);
            HttpContext.Current.Session["ExchangedValue_date"] = reader.GetString(14);
            HttpContext.Current.Session["Actual_Amt"] = reader.GetString(15);
            HttpContext.Current.Session["floodcess"] = reader.GetString(16);
            HttpContext.Current.Session["pvenue"] = reader.GetString(17);
        }
        if (depositMethod == "FNTC")
        { }
         else
        { 
        if (curr == "INR")
        {
            if (oldcanxamt == "0" || oldcanxamt == "" || oldcanxamt == null)
            {
                double gst = Math.Round(double.Parse(amount) / 118 * 18 / 2);
                double taxableamount = Math.Round(double.Parse(amount) / 118 * 100);
                double totaldeposit = Math.Round(Convert.ToDouble(amount) / Convert.ToDouble(dollarrate), 0);
                    if (HttpContext.Current.Session["pvenue"].ToString() == "KERALA" || HttpContext.Current.Session["pvenue"].ToString() == "Kerala")
                    {
                        floodcess = Math.Round(taxableamount * 0.01);

                    }
                    else
                    {
                        floodcess = 0;
                    }

                    if (HttpContext.Current.Session["totalamt"].ToString().Equals(amount))
                { }
                else
                {
                    //string pageName = "Indian Edit Contract";
                    string details = "Total Amount changed from: " + HttpContext.Current.Session["totalamt"].ToString() + "To: " + amount;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Amount Updated", HttpContext.Current.Session["totalamt"].ToString(), amount);

                    }
                if (HttpContext.Current.Session["Total_deposit"].ToString().Equals(amount))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Total Deposit changed from: " + HttpContext.Current.Session["Total_deposit"].ToString() + "To: " + amount;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", HttpContext.Current.Session["Total_deposit"].ToString(), amount);

                    }

                if (HttpContext.Current.Session["receipttype"].ToString().Equals(type))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "Receipt Type changed from: " + HttpContext.Current.Session["receipttype"].ToString() + "To: " + type;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt Type Updated", HttpContext.Current.Session["receipttype"].ToString(), type);

                    }

                if (HttpContext.Current.Session["Payment_Mode"].ToString().Equals(depositMethod))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Payment Mode changed from: " + HttpContext.Current.Session["Payment_Mode"].ToString() + "To: " + depositMethod;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Payment Mode Updated", HttpContext.Current.Session["Payment_Mode"].ToString(), depositMethod);

                    }

                if (HttpContext.Current.Session["taxable_value"].ToString().Equals(taxableamount.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "taxable value changed from: " + HttpContext.Current.Session["taxable_value"].ToString() + "To: " + taxableamount.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Taxable Amount Updated", HttpContext.Current.Session["taxable_value"].ToString(), taxableamount.ToString());

                    }

                if (HttpContext.Current.Session["cgstamt"].ToString().Equals(gst.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "cgst amt changed from: " + HttpContext.Current.Session["cgstamt"].ToString() + "To: " + gst.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", HttpContext.Current.Session["cgstamt"].ToString(), gst.ToString());

                    }

                if (HttpContext.Current.Session["sgstamt"].ToString().Equals(gst.ToString()))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "sgst amt changed from: " + HttpContext.Current.Session["sgstamt"].ToString() + "To: " + gst.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", HttpContext.Current.Session["sgstamt"].ToString(), gst.ToString());

                    }

                if (HttpContext.Current.Session["Amount"].ToString().Equals(taxableamount.ToString()))
                { }
                else
                {
                    //string pageName = "Indian Edit Contract";
                    string details = "Amount changed from: " + HttpContext.Current.Session["Amount"].ToString() + "To: " + taxableamount.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Amount Updated", HttpContext.Current.Session["Amount"].ToString(), taxableamount.ToString());

                    }

                if (HttpContext.Current.Session["receiptNo"].ToString().Equals(receiptNum))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "Receipt No changed from: " + HttpContext.Current.Session["receiptNo"].ToString() + "To: " + receiptNum;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt No Updated", HttpContext.Current.Session["receiptNo"].ToString(), receiptNum);

                    }
                if (HttpContext.Current.Session["USDTotal_deposit"].ToString().Equals(totaldeposit.ToString()))
                { }
                else
                {
                //    string pageName = "Indian Edit Contract";
                    string details = "Total deposit in USD Amount changed from: " + HttpContext.Current.Session["USDTotal_deposit"].ToString() + "To: " + totaldeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD)Updated", HttpContext.Current.Session["USDTotal_deposit"].ToString(), totaldeposit.ToString());

                    }
                    if (HttpContext.Current.Session["floodcess"].ToString().Equals(floodcess.ToString()))
                    { }
                    else
                    {
                        
                        string details = "Flood cess value changed from: " + HttpContext.Current.Session["floodcess"].ToString() + "To: " + floodcess.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD)Updated", HttpContext.Current.Session["floodcess"].ToString(), floodcess.ToString());

                    }

                    //update all details of receipt when no previous amt n curr=inr
                    int updaterow = Queries.UpdateContractDepositDetails(amount, type, depositMethod, taxableamount.ToString(), gst.ToString(), receiptNum, oldcanxamt, totaldeposit.ToString(), receiptID);
                    int updaterow1 = Queries.UpdateContractDepositDetailsFloodCess(floodcess.ToString(), receiptID);
                }//oldcanxamt=0
            else
            {
                double oldamt = Convert.ToDouble(oldcanxamt);
                double fulldeposit = Convert.ToDouble(amount);
                double indeposit = fulldeposit - oldamt;
                double gst = Math.Round(indeposit / 118 * 18 / 2);
                double taxableamount = Math.Round(indeposit / 118 * 100);
                double totaldeposit = Math.Round(Convert.ToDouble(amount) / Convert.ToDouble(dollarrate), 0);
                    if (HttpContext.Current.Session["pvenue"].ToString() == "KERALA" || HttpContext.Current.Session["pvenue"].ToString() == "Kerala")
                    {
                        floodcess =   Math.Round(taxableamount * 0.01);

                    }
                    else
                    {
                        floodcess = 0;
                    }
                    if (HttpContext.Current.Session["totalamt"].ToString().Equals(indeposit.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Total Amount changed from: " + HttpContext.Current.Session["totalamt"].ToString() + "To: " + indeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Amount Updated", HttpContext.Current.Session["totalamt"].ToString(), indeposit.ToString());

                    }
                if (HttpContext.Current.Session["Total_deposit"].ToString().Equals(fulldeposit.ToString()))
                { }
                else
                {
                 //   string pageName = "Indian Edit Contract";
                    string details = "Total Amount changed from: " + HttpContext.Current.Session["Total_deposit"].ToString() + "To: " + fulldeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", HttpContext.Current.Session["Total_deposit"].ToString(), fulldeposit.ToString());

                    }

                if (HttpContext.Current.Session["receipttype"].ToString().Equals(type))
                { }
                else
                {
                //    string pageName = "Indian Edit Contract";
                    string details = "Receipt Type changed from: " + HttpContext.Current.Session["receipttype"].ToString() + "To: " + type;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt Type Updated", HttpContext.Current.Session["receipttype"].ToString(), type);

                    }

                if (HttpContext.Current.Session["Payment_Mode"].ToString().Equals(depositMethod))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Payment Mode changed from: " + HttpContext.Current.Session["Payment_Mode"].ToString() + "To: " + depositMethod;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Payment Mode Updated", HttpContext.Current.Session["Payment_Mode"].ToString(), depositMethod);

                    }

                if (HttpContext.Current.Session["taxable_value"].ToString().Equals(taxableamount.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "taxable value changed from: " + HttpContext.Current.Session["taxable_value"].ToString() + "To: " + taxableamount.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Taxable Amount Updated", HttpContext.Current.Session["taxable_value"].ToString(), taxableamount.ToString());

                    }

                if (HttpContext.Current.Session["cgstamt"].ToString().Equals(gst.ToString()))
                { }
                else
                {
                 //   string pageName = "Indian Edit Contract";
                    string details = "cgst amt changed from: " + HttpContext.Current.Session["cgstamt"].ToString() + "To: " + gst.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", HttpContext.Current.Session["cgstamt"].ToString(), gst.ToString());

                    }

                if (HttpContext.Current.Session["sgstamt"].ToString().Equals(gst.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "sgst amt changed from: " + HttpContext.Current.Session["sgstamt"].ToString() + "To: " + gst.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", HttpContext.Current.Session["sgstamt"].ToString(), gst.ToString());

                    }

                if (HttpContext.Current.Session["Amount"].ToString().Equals(taxableamount.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Amount changed from: " + HttpContext.Current.Session["Amount"].ToString() + "To: " + taxableamount.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Amount Updated", HttpContext.Current.Session["Amount"].ToString(), taxableamount.ToString());

                    }

                if (HttpContext.Current.Session["receiptNo"].ToString().Equals(receiptNum))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "Receipt No changed from: " + HttpContext.Current.Session["receiptNo"].ToString() + "To: " + receiptNum;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt No Updated", HttpContext.Current.Session["receiptNo"].ToString(), receiptNum);

                    }
                if (HttpContext.Current.Session["Previous_DepositAmt"].ToString().Equals(oldcanxamt))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Previous Contract Amount changed from: " + HttpContext.Current.Session["Previous_DepositAmt"].ToString() + "To: " + oldcanxamt;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Transferred Contract Amount Updated", HttpContext.Current.Session["Previous_DepositAmt"].ToString(), oldcanxamt);

                    }
                if (HttpContext.Current.Session["USDTotal_deposit"].ToString().Equals(totaldeposit.ToString()))
                { }
                else
                {
                 //   string pageName = "Indian Edit Contract";
                    string details = "Total deposit in USD Amount changed from: " + HttpContext.Current.Session["USDTotal_deposit"].ToString() + "To: " + totaldeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD)Updated", HttpContext.Current.Session["USDTotal_deposit"].ToString(), totaldeposit.ToString());

                    }
                    if (HttpContext.Current.Session["floodcess"].ToString().Equals(floodcess.ToString()))
                    { }
                    else
                    {

                        string details = "Flood cess value changed from: " + HttpContext.Current.Session["floodcess"].ToString() + "To: " + floodcess.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD)Updated", HttpContext.Current.Session["floodcess"].ToString(), floodcess.ToString());

                    }
                    int updaterow = Queries.UpdateContractDepositDetailsAmtTransfer(indeposit.ToString(), type, depositMethod, taxableamount.ToString(), gst.ToString(), receiptNum, oldcanxamt, fulldeposit.ToString(), totaldeposit.ToString(), receiptID);
                    int updaterow1 = Queries.UpdateContractDepositDetailsFloodCess(floodcess.ToString(), receiptID);
                }
        }///curren
        else
        {
            if (oldcanxamt == "0" || oldcanxamt == "" || oldcanxamt == null)
            {
                double gst = 0;
                double taxableamount = 0;
                double currentrate = Convert.ToDouble(foreigncurr);
                double indeposit = Math.Round(Convert.ToDouble(amount) * currentrate);
                double totaldeposit = Math.Round(Convert.ToDouble(amount), 0);

                if (HttpContext.Current.Session["totalamt"].ToString().Equals(indeposit.ToString()))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "Total Amount changed from: " + HttpContext.Current.Session["totalamt"].ToString() + "To: " + indeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Amount Updated", HttpContext.Current.Session["totalamt"].ToString(), amount);

                    }
                if (HttpContext.Current.Session["Total_deposit"].ToString().Equals(amount))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Total Deposit changed from: " + HttpContext.Current.Session["Total_deposit"].ToString() + "To: " + amount;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", HttpContext.Current.Session["Total_deposit"].ToString(), amount);

                    }

                if (HttpContext.Current.Session["receipttype"].ToString().Equals(type))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Receipt Type changed from: " + HttpContext.Current.Session["receipttype"].ToString() + "To: " + type;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt Type Updated", HttpContext.Current.Session["receipttype"].ToString(), type);

                    }

                if (HttpContext.Current.Session["Payment_Mode"].ToString().Equals(depositMethod))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Payment Mode changed from: " + HttpContext.Current.Session["Payment_Mode"].ToString() + "To: " + depositMethod;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Payment Mode Updated", HttpContext.Current.Session["Payment_Mode"].ToString(), depositMethod);

                    }

                if (HttpContext.Current.Session["taxable_value"].ToString().Equals(taxableamount.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "taxable value changed from: " + HttpContext.Current.Session["taxable_value"].ToString() + "To: " + taxableamount.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Taxable Amount Updated", HttpContext.Current.Session["taxable_value"].ToString(), taxableamount.ToString());

                    }

                if (HttpContext.Current.Session["cgstamt"].ToString().Equals(gst.ToString()))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "cgstamt changed from: " + HttpContext.Current.Session["cgstamt"].ToString() + "To: " + gst.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", HttpContext.Current.Session["cgstamt"].ToString(), gst.ToString());

                    }

                if (HttpContext.Current.Session["sgstamt"].ToString().Equals(gst.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "sgstamt changed from: " + HttpContext.Current.Session["sgstamt"].ToString() + "To: " + gst.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", HttpContext.Current.Session["sgstamt"].ToString(), gst.ToString());

                    }

                if (HttpContext.Current.Session["Amount"].ToString().Equals(taxableamount.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Amount changed from: " + HttpContext.Current.Session["Amount"].ToString() + "To: " + taxableamount.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Amount Updated", HttpContext.Current.Session["Amount"].ToString(), taxableamount.ToString());

                    }

                if (HttpContext.Current.Session["receiptNo"].ToString().Equals(receiptNum))
                { }
                else
                {
                   // string pageName = "Indian Edit Contract";
                    string details = "Receipt No changed from: " + HttpContext.Current.Session["receiptNo"].ToString() + "To: " + receiptNum;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt No Updated", HttpContext.Current.Session["receiptNo"].ToString(), receiptNum);

                    }
                if (HttpContext.Current.Session["Previous_DepositAmt"].ToString().Equals(oldcanxamt))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Previous Contract Amount changed from: " + HttpContext.Current.Session["Previous_DepositAmt"].ToString() + "To: " + oldcanxamt;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Transferred Contract Amount Updated", HttpContext.Current.Session["Previous_DepositAmt"].ToString(), oldcanxamt);

                    }
                if (HttpContext.Current.Session["USDTotal_deposit"].ToString().Equals(totaldeposit.ToString()))
                { }
                else
                {
                  //  string pageName = "Indian Edit Contract";
                    string details = "Total deposit in USD Amount changed from: " + HttpContext.Current.Session["USDTotal_deposit"].ToString() + "To: " + totaldeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD)Updated", HttpContext.Current.Session["USDTotal_deposit"].ToString(), totaldeposit.ToString());

                    }
                    if (HttpContext.Current.Session["Converted_rate"].ToString().Equals(foreigncurr))
                    { }
                    else
                    {
                        //  string pageName = "Indian Edit Contract";
                        string details = "Converted Rate changed from: " + HttpContext.Current.Session["Converted_rate"].ToString() + "To: " + foreigncurr;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Converted Currency Updated", HttpContext.Current.Session["Converted_rate"].ToString(), foreigncurr);

                    }
                    if (HttpContext.Current.Session["actual_currency"].ToString().Equals(curr))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Converted Rate changed from: " + HttpContext.Current.Session["actual_currency"].ToString() + "To: " + curr;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Currency Updated", HttpContext.Current.Session["actual_currency"].ToString(), curr);

                    }
                    if (HttpContext.Current.Session["Actual_Amt"].ToString().Equals(amount))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Actual Amount changed from: " + HttpContext.Current.Session["Actual_Amt"].ToString() + "To: " + amount;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Actual Amoutn Updated", HttpContext.Current.Session["Actual_Amt"].ToString(), amount);

                    }
                    if (HttpContext.Current.Session["ExchangedValue_date"].ToString().Equals(DateTime.Now.ToString()))
                    { }
                    else
                    {
                        //     string pageName = "Indian Edit Contract";
                        string details = "Exchanged value date changed from: " + HttpContext.Current.Session["ExchangedValue_date"].ToString() + "To: " + DateTime.Now.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Value Date Updated", HttpContext.Current.Session["ExchangedValue_date"].ToString(), DateTime.Now.ToString());

                    }
                    int updaterow = Queries.UpdateContractDepositDetailsUSD(indeposit.ToString(), type, depositMethod, taxableamount.ToString(), gst.ToString(), receiptNum, oldcanxamt, amount, foreigncurr, totaldeposit.ToString(), curr, DateTime.Now.ToString(), amount, receiptID);
 
            }
            else
            {

                double currentrate = Convert.ToDouble(foreigncurr);
                double oldamt = Convert.ToDouble(oldcanxamt);
                double fulldeposit = Convert.ToDouble(amount);
                double indeposit1 = fulldeposit - oldamt;
                double indeposit = Math.Round(Convert.ToDouble(indeposit1) * currentrate);
                double gst = 0;
                double taxableamount = 0;
                double totaldeposit = Math.Round(Convert.ToDouble(amount), 0);

                    if (HttpContext.Current.Session["totalamt"].ToString().Equals(indeposit.ToString()))
                    { }
                    else
                    {
                        //  string pageName = "Indian Edit Contract";
                        string details = "Total Amount changed from: " + HttpContext.Current.Session["totalamt"].ToString() + "To: " + indeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Amount Updated", HttpContext.Current.Session["totalamt"].ToString(), indeposit.ToString());

                    }
                    if (HttpContext.Current.Session["Total_deposit"].ToString().Equals(fulldeposit.ToString()))
                    { }
                    else
                    {
                        //     string pageName = "Indian Edit Contract";
                        string details = "Total Deposit changed from: " + HttpContext.Current.Session["totalamt"].ToString() + "To: " + fulldeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit Updated", HttpContext.Current.Session["totalamt"].ToString(), fulldeposit.ToString());

                    }
                    if (HttpContext.Current.Session["receipttype"].ToString().Equals(type))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Receipt Type changed from: " + HttpContext.Current.Session["receipttype"].ToString() + "To: " + type;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt Type Updated", HttpContext.Current.Session["receipttype"].ToString(), type);

                    }

                    if (HttpContext.Current.Session["Payment_Mode"].ToString().Equals(depositMethod))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Payment Mode changed from: " + HttpContext.Current.Session["Payment_Mode"].ToString() + "To: " + depositMethod;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Payment Mode Updated", HttpContext.Current.Session["Payment_Mode"].ToString(), depositMethod);

                    }

                    if (HttpContext.Current.Session["taxable_value"].ToString().Equals(taxableamount))
                    { }
                    else
                    {
                        //  string pageName = "Indian Edit Contract";
                        string details = "taxable value changed from: " + HttpContext.Current.Session["taxable_value"].ToString() + "To: " + taxableamount;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Taxable Amount Updated", HttpContext.Current.Session["taxable_value"].ToString(), taxableamount.ToString());

                    }

                    if (HttpContext.Current.Session["cgstamt"].ToString().Equals(gst))
                    { }
                    else
                    {
                        //  string pageName = "Indian Edit Contract";
                        string details = "cgstamt changed from: " + HttpContext.Current.Session["cgstamt"].ToString() + "To: " + gst;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "CGST Updated", HttpContext.Current.Session["cgstamt"].ToString(), gst.ToString());

                    }

                    if (HttpContext.Current.Session["sgstamt"].ToString().Equals(gst))
                    { }
                    else
                    {
                        //  string pageName = "Indian Edit Contract";
                        string details = "sgstamt changed from: " + HttpContext.Current.Session["sgstamt"].ToString() + "To: " + gst;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "SGST Updated", HttpContext.Current.Session["sgstamt"].ToString(), gst.ToString());

                    }

                    if (HttpContext.Current.Session["Amount"].ToString().Equals(taxableamount))
                    { }
                    else
                    {
                        //  string pageName = "Indian Edit Contract";
                        string details = "Amount changed from: " + HttpContext.Current.Session["Amount"].ToString() + "To: " + taxableamount;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Amount Updated", HttpContext.Current.Session["Amount"].ToString(), taxableamount.ToString());

                    }

                    if (HttpContext.Current.Session["receiptNo"].ToString().Equals(receiptNum))
                    { }
                    else
                    {
                        //   string pageName = "Indian Edit Contract";
                        string details = "Receipt No changed from: " + HttpContext.Current.Session["receiptNo"].ToString() + "To: " + receiptNum;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Receipt No Updated", HttpContext.Current.Session["receiptNo"].ToString(), receiptNum);

                    }
                    if (HttpContext.Current.Session["Previous_DepositAmt"].ToString().Equals(oldcanxamt))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Previous Contract Amount changed from: " + HttpContext.Current.Session["Previous_DepositAmt"].ToString() + "To: " + oldcanxamt;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Transferred Contract Amount Updated", HttpContext.Current.Session["Previous_DepositAmt"].ToString(), oldcanxamt);

                    }


                    if (HttpContext.Current.Session["USDTotal_deposit"].ToString().Equals(totaldeposit.ToString()))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Total deposit in USD Amount changed from: " + HttpContext.Current.Session["USDTotal_deposit"].ToString() + "To: " + totaldeposit.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Total Deposit(USD) Updated", HttpContext.Current.Session["USDTotal_deposit"].ToString(), totaldeposit.ToString());

                    }
                    if (HttpContext.Current.Session["Converted_rate"].ToString().Equals(foreigncurr))
                    { }
                    else
                    {
                        //   string pageName = "Indian Edit Contract";
                        string details = "Converted Rate changed from: " + HttpContext.Current.Session["Converted_rate"].ToString() + "To: " + foreigncurr;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Converted Currency Updated", HttpContext.Current.Session["Converted_rate"].ToString(), foreigncurr);

                    }
                    if (HttpContext.Current.Session["actual_currency"].ToString().Equals(curr))
                    { }
                    else
                    {
                        // string pageName = "Indian Edit Contract";
                        string details = "Converted Rate changed from: " + HttpContext.Current.Session["actual_currency"].ToString() + "To: " + curr;
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Currency Updated", HttpContext.Current.Session["actual_currency"].ToString(), curr);

                    }
                    if (HttpContext.Current.Session["Actual_Amt"].ToString().Equals(indeposit1.ToString()))
                    { }
                    else
                    {
                        //   string pageName = "Indian Edit Contract";
                        string details = "Actual Amount changed from: " + HttpContext.Current.Session["Actual_Amt"].ToString() + "To: " + indeposit1.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Actual Amoutn Updated", HttpContext.Current.Session["Actual_Amt"].ToString(), amount);

                    }
                    if (HttpContext.Current.Session["ExchangedValue_date"].ToString().Equals(DateTime.Now.ToString()))
                    { }
                    else
                    {
                        //   string pageName = "Indian Edit Contract";
                        string details = "Exchanged value date changed from: " + HttpContext.Current.Session["ExchangedValue_date"].ToString() + "To: " + DateTime.Now.ToString();
                        int insertlog1 = Queries.InsertContractLogs_India(HttpContext.Current.Session["ProfileID"].ToString(), HttpContext.Current.Session["ContractdetailsID"].ToString(), details, user, DateTime.Now.ToString(), "Indian_contracts_Edit.aspx", "Exchange Value Date Updated", HttpContext.Current.Session["ExchangedValue_date"].ToString(), DateTime.Now.ToString());

                    }
                    int updaterow = Queries.UpdateContractDepositDetailsUSD(indeposit.ToString(), type, depositMethod, taxableamount.ToString(), gst.ToString(), receiptNum, oldcanxamt, amount, foreigncurr, totaldeposit.ToString(), curr, DateTime.Now.ToString(), indeposit1.ToString(), receiptID);

            }
        }//currency else part





        reader.Close();
        sqlcon1.Close();

    }//else of depositmode mode=fntc
        foreigncurr = "";
    }

    protected void Button1_Click(object sender, EventArgs e)
    {
        DataTable datatable = Queries.loadClientDetails(Session["ProfileID"].ToString());// profileidTextBox.Text);
        var printr = "";
        ReportDocument crystalReport = new ReportDocument(); // creating object of crystal report
        crystalReport.Load(Server.MapPath("~/ireports/Client_Details.rpt")); // path of report       
        crystalReport.SetDataSource(datatable);

        System.IO.FileStream fs = null;
        long FileSize = 0;
        DiskFileDestinationOptions oDest = new DiskFileDestinationOptions();
        string ExportFileName = Server.MapPath("~/ireports/" + printr + ".rpt") + "Export";
        crystalReport.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
        crystalReport.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
        oDest.DiskFileName = ExportFileName;
        crystalReport.ExportOptions.DestinationOptions = oDest;
        crystalReport.Export();
        Response.Clear();
        Response.Buffer = true;
        Response.AddHeader("Content-Type", "application/pdf");
        string fn = Session["ProfileID"].ToString() + "Client_Details" + ".pdf";
        Response.AddHeader("Content-Disposition", "attachment;filename=" + fn + ";");

        fs = new System.IO.FileStream(ExportFileName, FileMode.Open);
        FileSize = fs.Length;
        byte[] bBuffer = new byte[Convert.ToInt32(FileSize) + 1];
        fs.Read(bBuffer, 0, Convert.ToInt32(FileSize));
        fs.Close();
        Response.BinaryWrite(bBuffer);
        Response.Flush();
    }
    [WebMethod]
    public static string getCurrentEuroRate(string finance)
    {

        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        sqlcon.Open();
        string JSON = "{\n \"names\":[";
        string query = "select case when( ERates_EUR='' or ERates_EUR=null) then '0.87624' else  ERates_EUR end as ERates_EUR from exchange_rate where ERates_Status='Active' and office='IVO';";
        SqlCommand sql = new SqlCommand(query, sqlcon);

        SqlDataReader reader = sql.ExecuteReader();
        while (reader.Read())
        {
            double eurorate = reader.GetDouble(0);
            JSON += "[\"" + eurorate + "\"],";
        }
        JSON = JSON.Substring(0, JSON.Length - 1);
        JSON += "] \n}";

        return JSON;

    }



    
    [WebMethod]
    public static string GetContractVenue(string cvenue, string venue)
    {
        String conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        string JSON = "{\n \"names\":[";
        sqlcon.Open();

        string query = "select Contract_Venue_Name from Contract_Venue cv join Contract_Group cg on cg.Contract_Group_ID = cv.Contract_Group_ID join venue v on v.venue_id = cv.venue_id where Contract_Venue_Status = 'Active' and cg.Contract_Group_Name = '" + cvenue + "' and v.venue_name = '" + venue + "'";
        SqlCommand sql = new SqlCommand(query, sqlcon);

        SqlDataReader reader = sql.ExecuteReader();
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                string name = reader.GetString(0);
                JSON += "[\"" + name + "\"],";
            }
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";
        }
        else
        {
            JSON += "[\"" + "" + "\"],";
            JSON = JSON.Substring(0, JSON.Length - 1);
            JSON += "] \n}";

        }
        sqlcon.Close();
        return JSON;
    }


    [WebMethod]
    public static void updateSor_Add(string Val, string id, string contractNo, string identity)
    {
        string query = "";
        DateTime time = DateTime.Now;
        string format = "yyyy-MM-dd HH:mm";
        string conn = ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString;
        SqlConnection sqlcon = new SqlConnection(conn);
        if (identity == "acceptance")
        {
            query = "update ContractNo_Othernames set Modified_Date='" + time.ToString(format) + "' , Acceptance='" + Val + "' where otherNamesID='" + id + "' and ContractNo='" + contractNo + "'";
        }
        else if (identity == "enrollment")
        {
            query = "update ContractNo_Othernames set Modified_Date='" + time.ToString(format) + "' , Enrollment='" + Val + "' where otherNamesID='" + id + "' and ContractNo='" + contractNo + "'";
        }
        else
        {
            query = "update ContractNo_Othernames set Modified_Date='" + time.ToString(format) + "' , Acceptance='" + Val + "' where otherNamesID='" + id + "' and ContractNo='" + contractNo + "'";
        }


        sqlcon.Open();
        SqlCommand cmd = new SqlCommand(query, sqlcon);
        cmd.ExecuteNonQuery();
        sqlcon.Close();

    }


}



